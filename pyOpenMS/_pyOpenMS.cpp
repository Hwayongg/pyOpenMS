/* Generated by Cython 0.15.1 on Wed Oct 12 13:14:56 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___pyOpenMS
#define __PYX_HAVE_API___pyOpenMS
#include <vector>
#include <string>
#include "stdlib.h"
#include <OpenMS/METADATA/SourceFile.h>
#include <OpenMS/KERNEL/ChromatogramPeak.h>
#include <OpenMS/KERNEL/Peak1D.h>
#include <OpenMS/METADATA/IonSource.h>
#include <OpenMS/METADATA/InstrumentSettings.h>
#include <OpenMS/METADATA/Precursor.h>
#include <OpenMS/KERNEL/MSSpectrum.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <OpenMS/KERNEL/MSExperiment.h>
#include <OpenMS/KERNEL/ChromatogramTools.h>
#include <OpenMS/DATASTRUCTURES/StringList.h>
#include <OpenMS/DATASTRUCTURES/IntList.h>
#include <OpenMS/DATASTRUCTURES/DoubleList.h>
#include <OpenMS/DATASTRUCTURES/DataValue.h>
#include <OpenMS/FORMAT/MzDataFile.h>
#include <OpenMS/FORMAT/MzMLFile.h>
#include <OpenMS/FORMAT/MzXMLFile.h>
#include <OpenMS/DATASTRUCTURES/String.h>
#include <OpenMS/DATASTRUCTURES/Param.h>
#include <OpenMS/FILTERING/SMOOTHING/SavitzkyGolayFilter.h>
#include "stdio.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif

#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

static const char *__pyx_f[] = {
  "_pyOpenMS.pyx",
  "numpy.pxd",
};

/* "numpy.pxd":719
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "numpy.pxd":720
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "numpy.pxd":721
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "numpy.pxd":722
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "numpy.pxd":726
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "numpy.pxd":727
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "numpy.pxd":728
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "numpy.pxd":729
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "numpy.pxd":733
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "numpy.pxd":734
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "numpy.pxd":743
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "numpy.pxd":744
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "numpy.pxd":745
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "numpy.pxd":747
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "numpy.pxd":748
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "numpy.pxd":749
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "numpy.pxd":751
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "numpy.pxd":752
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "numpy.pxd":754
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "numpy.pxd":755
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "numpy.pxd":756
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif

/*--- Type declarations ---*/
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_;
struct __pyx_obj_9_pyOpenMS_MzDataFile;
struct __pyx_obj_9_pyOpenMS_Peak1D;
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_;
struct __pyx_obj_9_pyOpenMS_InstrumentSettings;
struct __pyx_obj_9_pyOpenMS_MzXMLFile;
struct __pyx_obj_9_pyOpenMS_DoubleList;
struct __pyx_obj_9_pyOpenMS_ChromatogramTools;
struct __pyx_obj_9_pyOpenMS_Precursor;
struct __pyx_obj_9_pyOpenMS_MSExperiment;
struct __pyx_obj_9_pyOpenMS___Py_str_to_string;
struct __pyx_obj_9_pyOpenMS_ChecksumType;
struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__;
struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter;
struct __pyx_obj_9_pyOpenMS_Param;
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_;
struct __pyx_obj_9_pyOpenMS_SourceFile;
struct __pyx_obj_9_pyOpenMS_StringList;
struct __pyx_obj_9_pyOpenMS_DataValue;
struct __pyx_obj_9_pyOpenMS_String;
struct __pyx_obj_9_pyOpenMS_IntList;
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_;
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_;
struct __pyx_obj_9_pyOpenMS_MzMLFile;
struct __pyx_obj_9_pyOpenMS_Polarity;
struct __pyx_obj_9_pyOpenMS_MSSpectrum;

/* "numpy.pxd":758
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "numpy.pxd":759
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "numpy.pxd":760
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "numpy.pxd":762
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "_pyOpenMS.pyx":1205
 * 
 * 
 * cdef class __Py_list_to_vector_Br_int_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[int] * inst
 *     def __cinit__(self):
 */
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *__pyx_vtab;
  std::vector<int> *inst;
};


/* "_pyOpenMS.pyx":361
 *         return self
 * 
 * cdef class MzDataFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MzDataFile * inst
 */
struct __pyx_obj_9_pyOpenMS_MzDataFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile *__pyx_vtab;
  OpenMS::MzDataFile *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":49
 * import numpy as np
 * 
 * cdef class Peak1D:             # <<<<<<<<<<<<<<
 * 
 *     cdef _Peak1D * inst
 */
struct __pyx_obj_9_pyOpenMS_Peak1D {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_Peak1D *__pyx_vtab;
  OpenMS::Peak1D *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":1163
 * 
 * 
 * cdef class __Py_list_to_vector_Br_double_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[double] * inst
 *     def __cinit__(self):
 */
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *__pyx_vtab;
  std::vector<double> *inst;
};


/* "_pyOpenMS.pyx":196
 *         return _result
 * 
 * cdef class InstrumentSettings:             # <<<<<<<<<<<<<<
 * 
 *     cdef _InstrumentSettings * inst
 */
struct __pyx_obj_9_pyOpenMS_InstrumentSettings {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings *__pyx_vtab;
  OpenMS::InstrumentSettings *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":277
 *     SIZE_OF_POLARITY=3
 * 
 * cdef class MzXMLFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MzXMLFile * inst
 */
struct __pyx_obj_9_pyOpenMS_MzXMLFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile *__pyx_vtab;
  OpenMS::MzXMLFile *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":497
 *         return _result
 * 
 * cdef class DoubleList:             # <<<<<<<<<<<<<<
 * 
 *     cdef _DoubleList * inst
 */
struct __pyx_obj_9_pyOpenMS_DoubleList {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_DoubleList *__pyx_vtab;
  OpenMS::DoubleList *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":234
 *         return _result
 * 
 * cdef class ChromatogramTools:             # <<<<<<<<<<<<<<
 * 
 *     cdef _ChromatogramTools * inst
 */
struct __pyx_obj_9_pyOpenMS_ChromatogramTools {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools *__pyx_vtab;
  OpenMS::ChromatogramTools *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":93
 *         return self
 * 
 * cdef class Precursor:             # <<<<<<<<<<<<<<
 * 
 *     cdef _Precursor * inst
 */
struct __pyx_obj_9_pyOpenMS_Precursor {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_Precursor *__pyx_vtab;
  OpenMS::Precursor *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":137
 *         return self
 * 
 * cdef class MSExperiment:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MSExperiment[_Peak1D,_ChromatogramPeak] * inst
 */
struct __pyx_obj_9_pyOpenMS_MSExperiment {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment *__pyx_vtab;
  OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak> *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":1226
 * 
 * 
 * cdef class __Py_str_to_string:             # <<<<<<<<<<<<<<
 *     cdef string * inst
 *     def __cinit__(self):
 */
struct __pyx_obj_9_pyOpenMS___Py_str_to_string {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *__pyx_vtab;
  std::string *inst;
};


/* "_pyOpenMS.pyx":781
 *         self.inst.setChecksum(deref(conv_arg0.conv()), <ChecksumType>arg1)
 *         return self
 * cdef class ChecksumType:             # <<<<<<<<<<<<<<
 *     UNKNOWN_CHECKSUM=0
 *     SHA1=1
 */
struct __pyx_obj_9_pyOpenMS_ChecksumType {
  PyObject_HEAD
};


/* "_pyOpenMS.pyx":1241
 * 
 * 
 * cdef class __Py_str_to_char__ptr__:             # <<<<<<<<<<<<<<
 *     cdef char * inst
 *     def __cinit__(self):
 */
struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_char__ptr__ *__pyx_vtab;
  char *inst;
};


/* "_pyOpenMS.pyx":865
 *         return conv__StringList_to_py(_result)
 * 
 * cdef class SavitzkyGolayFilter:             # <<<<<<<<<<<<<<
 * 
 *     cdef _SavitzkyGolayFilter * inst
 */
struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_SavitzkyGolayFilter *__pyx_vtab;
  OpenMS::SavitzkyGolayFilter *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":544
 *         return _result
 * 
 * cdef class Param:             # <<<<<<<<<<<<<<
 * 
 *     cdef _Param * inst
 */
struct __pyx_obj_9_pyOpenMS_Param {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_Param *__pyx_vtab;
  OpenMS::Param *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":1121
 * 
 * 
 * cdef class __Py_list_to_vector_Br__String_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[_String] * inst
 *     def __cinit__(self):
 */
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *__pyx_vtab;
  std::vector<OpenMS::String> *inst;
};


/* "_pyOpenMS.pyx":701
 *         return _result
 * 
 * cdef class SourceFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef _SourceFile * inst
 */
struct __pyx_obj_9_pyOpenMS_SourceFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_SourceFile *__pyx_vtab;
  OpenMS::SourceFile *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":403
 *         return self
 * 
 * cdef class StringList:             # <<<<<<<<<<<<<<
 * 
 *     cdef _StringList * inst
 */
struct __pyx_obj_9_pyOpenMS_StringList {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_StringList *__pyx_vtab;
  OpenMS::StringList *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":787
 *     SIZE_OF_CHECKSUMTYPE=3
 * 
 * cdef class DataValue:             # <<<<<<<<<<<<<<
 * 
 *     cdef _DataValue * inst
 */
struct __pyx_obj_9_pyOpenMS_DataValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_DataValue *__pyx_vtab;
  OpenMS::DataValue *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":657
 *         return self
 * 
 * cdef class String:             # <<<<<<<<<<<<<<
 * 
 *     cdef _String * inst
 */
struct __pyx_obj_9_pyOpenMS_String {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_String *__pyx_vtab;
  OpenMS::String *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":450
 *         return _result
 * 
 * cdef class IntList:             # <<<<<<<<<<<<<<
 * 
 *     cdef _IntList * inst
 */
struct __pyx_obj_9_pyOpenMS_IntList {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_IntList *__pyx_vtab;
  OpenMS::IntList *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":1142
 * 
 * 
 * cdef class __Py_list_to_vector_Br__Precursor_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[_Precursor] * inst
 *     def __cinit__(self):
 */
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *__pyx_vtab;
  std::vector<OpenMS::Precursor> *inst;
};


/* "_pyOpenMS.pyx":1184
 * 
 * 
 * cdef class __Py_list_to_vector_Br_string_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[string] * inst
 *     def __cinit__(self):
 */
struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *__pyx_vtab;
  std::vector<std::string> *inst;
};


/* "_pyOpenMS.pyx":319
 *         return self
 * 
 * cdef class MzMLFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MzMLFile * inst
 */
struct __pyx_obj_9_pyOpenMS_MzMLFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile *__pyx_vtab;
  OpenMS::MzMLFile *inst;
  PyObject *_cons_sig;
};


/* "_pyOpenMS.pyx":271
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)
 *         return self
 * cdef class Polarity:             # <<<<<<<<<<<<<<
 *     POLNULL=0
 *     POSITIVE=1
 */
struct __pyx_obj_9_pyOpenMS_Polarity {
  PyObject_HEAD
};


/* "_pyOpenMS.pyx":903
 *         return self
 * 
 * cdef class MSSpectrum:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MSSpectrum[_Peak1D] * inst
 */
struct __pyx_obj_9_pyOpenMS_MSSpectrum {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum *__pyx_vtab;
  OpenMS::MSSpectrum<OpenMS::Peak1D> *inst;
  PyObject *_cons_sig;
};



/* "_pyOpenMS.pyx":403
 *         return self
 * 
 * cdef class StringList:             # <<<<<<<<<<<<<<
 * 
 *     cdef _StringList * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_StringList {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_StringList *, OpenMS::StringList *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_StringList *);
  PyObject *(*__subcons_for_list_Br_str_Br_)(struct __pyx_obj_9_pyOpenMS_StringList *, PyObject *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_StringList *__pyx_vtabptr_9_pyOpenMS_StringList;


/* "_pyOpenMS.pyx":1226
 * 
 * 
 * cdef class __Py_str_to_string:             # <<<<<<<<<<<<<<
 *     cdef string * inst
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string {
  std::string *(*conv)(struct __pyx_obj_9_pyOpenMS___Py_str_to_string *);
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *__pyx_vtabptr_9_pyOpenMS___Py_str_to_string;


/* "_pyOpenMS.pyx":234
 *         return _result
 * 
 * cdef class ChromatogramTools:             # <<<<<<<<<<<<<<
 * 
 *     cdef _ChromatogramTools * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *, OpenMS::ChromatogramTools *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools *__pyx_vtabptr_9_pyOpenMS_ChromatogramTools;


/* "_pyOpenMS.pyx":1184
 * 
 * 
 * cdef class __Py_list_to_vector_Br_string_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[string] * inst
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ {
  std::vector<std::string> *(*conv)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *);
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *__pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_string_Br_;


/* "_pyOpenMS.pyx":137
 *         return self
 * 
 * cdef class MSExperiment:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MSExperiment[_Peak1D,_ChromatogramPeak] * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MSExperiment *, OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak> *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_MSExperiment *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment *__pyx_vtabptr_9_pyOpenMS_MSExperiment;


/* "_pyOpenMS.pyx":865
 *         return conv__StringList_to_py(_result)
 * 
 * cdef class SavitzkyGolayFilter:             # <<<<<<<<<<<<<<
 * 
 *     cdef _SavitzkyGolayFilter * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_SavitzkyGolayFilter {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *, OpenMS::SavitzkyGolayFilter *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_SavitzkyGolayFilter *__pyx_vtabptr_9_pyOpenMS_SavitzkyGolayFilter;


/* "_pyOpenMS.pyx":93
 *         return self
 * 
 * cdef class Precursor:             # <<<<<<<<<<<<<<
 * 
 *     cdef _Precursor * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_Precursor {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_Precursor *, OpenMS::Precursor *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_Precursor *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_Precursor *__pyx_vtabptr_9_pyOpenMS_Precursor;


/* "_pyOpenMS.pyx":544
 *         return _result
 * 
 * cdef class Param:             # <<<<<<<<<<<<<<
 * 
 *     cdef _Param * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_Param {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_Param *, OpenMS::Param *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_Param *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_Param *__pyx_vtabptr_9_pyOpenMS_Param;


/* "_pyOpenMS.pyx":450
 *         return _result
 * 
 * cdef class IntList:             # <<<<<<<<<<<<<<
 * 
 *     cdef _IntList * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_IntList {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_IntList *, OpenMS::IntList *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_IntList *);
  PyObject *(*__subcons_for_list_Br_int_Br_)(struct __pyx_obj_9_pyOpenMS_IntList *, PyObject *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_IntList *__pyx_vtabptr_9_pyOpenMS_IntList;


/* "_pyOpenMS.pyx":1241
 * 
 * 
 * cdef class __Py_str_to_char__ptr__:             # <<<<<<<<<<<<<<
 *     cdef char * inst
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_char__ptr__ {
  char *(*conv)(struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *);
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_char__ptr__ *__pyx_vtabptr_9_pyOpenMS___Py_str_to_char__ptr__;


/* "_pyOpenMS.pyx":277
 *     SIZE_OF_POLARITY=3
 * 
 * cdef class MzXMLFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MzXMLFile * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MzXMLFile *, OpenMS::MzXMLFile *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_MzXMLFile *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile *__pyx_vtabptr_9_pyOpenMS_MzXMLFile;


/* "_pyOpenMS.pyx":196
 *         return _result
 * 
 * cdef class InstrumentSettings:             # <<<<<<<<<<<<<<
 * 
 *     cdef _InstrumentSettings * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *, OpenMS::InstrumentSettings *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings *__pyx_vtabptr_9_pyOpenMS_InstrumentSettings;


/* "_pyOpenMS.pyx":903
 *         return self
 * 
 * cdef class MSSpectrum:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MSSpectrum[_Peak1D] * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MSSpectrum *, OpenMS::MSSpectrum<OpenMS::Peak1D> *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_MSSpectrum *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum *__pyx_vtabptr_9_pyOpenMS_MSSpectrum;


/* "_pyOpenMS.pyx":787
 *     SIZE_OF_CHECKSUMTYPE=3
 * 
 * cdef class DataValue:             # <<<<<<<<<<<<<<
 * 
 *     cdef _DataValue * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_DataValue {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_DataValue *, OpenMS::DataValue *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_DataValue *);
  PyObject *(*__subcons_for_str)(struct __pyx_obj_9_pyOpenMS_DataValue *, PyObject *);
  PyObject *(*__subcons_for_int)(struct __pyx_obj_9_pyOpenMS_DataValue *, int);
  PyObject *(*__subcons_for_float)(struct __pyx_obj_9_pyOpenMS_DataValue *, float);
  PyObject *(*__subcons_for_StringList)(struct __pyx_obj_9_pyOpenMS_DataValue *, struct __pyx_obj_9_pyOpenMS_StringList *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_DataValue *__pyx_vtabptr_9_pyOpenMS_DataValue;


/* "_pyOpenMS.pyx":657
 *         return self
 * 
 * cdef class String:             # <<<<<<<<<<<<<<
 * 
 *     cdef _String * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_String {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_String *, OpenMS::String *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_String *);
  PyObject *(*__subcons_for_str)(struct __pyx_obj_9_pyOpenMS_String *, PyObject *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_String *__pyx_vtabptr_9_pyOpenMS_String;


/* "_pyOpenMS.pyx":49
 * import numpy as np
 * 
 * cdef class Peak1D:             # <<<<<<<<<<<<<<
 * 
 *     cdef _Peak1D * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_Peak1D {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_Peak1D *, OpenMS::Peak1D *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_Peak1D *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_Peak1D *__pyx_vtabptr_9_pyOpenMS_Peak1D;


/* "_pyOpenMS.pyx":497
 *         return _result
 * 
 * cdef class DoubleList:             # <<<<<<<<<<<<<<
 * 
 *     cdef _DoubleList * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_DoubleList {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_DoubleList *, OpenMS::DoubleList *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_DoubleList *);
  PyObject *(*__subcons_for_list_Br_float_Br_)(struct __pyx_obj_9_pyOpenMS_DoubleList *, PyObject *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_DoubleList *__pyx_vtabptr_9_pyOpenMS_DoubleList;


/* "_pyOpenMS.pyx":1121
 * 
 * 
 * cdef class __Py_list_to_vector_Br__String_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[_String] * inst
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ {
  std::vector<OpenMS::String> *(*conv)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *);
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *__pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br__String_Br_;


/* "_pyOpenMS.pyx":701
 *         return _result
 * 
 * cdef class SourceFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef _SourceFile * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_SourceFile {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_SourceFile *, OpenMS::SourceFile *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_SourceFile *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_SourceFile *__pyx_vtabptr_9_pyOpenMS_SourceFile;


/* "_pyOpenMS.pyx":1142
 * 
 * 
 * cdef class __Py_list_to_vector_Br__Precursor_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[_Precursor] * inst
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ {
  std::vector<OpenMS::Precursor> *(*conv)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *);
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *__pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_;


/* "_pyOpenMS.pyx":319
 *         return self
 * 
 * cdef class MzMLFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MzMLFile * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MzMLFile *, OpenMS::MzMLFile *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_MzMLFile *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile *__pyx_vtabptr_9_pyOpenMS_MzMLFile;


/* "_pyOpenMS.pyx":361
 *         return self
 * 
 * cdef class MzDataFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef _MzDataFile * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile {
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MzDataFile *, OpenMS::MzDataFile *);
  PyObject *(*__subcons_for_nonarg)(struct __pyx_obj_9_pyOpenMS_MzDataFile *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile *__pyx_vtabptr_9_pyOpenMS_MzDataFile;


/* "_pyOpenMS.pyx":1205
 * 
 * 
 * cdef class __Py_list_to_vector_Br_int_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[int] * inst
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ {
  std::vector<int> *(*conv)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *);
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *__pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_int_Br_;


/* "_pyOpenMS.pyx":1163
 * 
 * 
 * cdef class __Py_list_to_vector_Br_double_Br_:             # <<<<<<<<<<<<<<
 *     cdef vector[double] * inst
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ {
  std::vector<double> *(*conv)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *);
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *__pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_double_Br_;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        /* these presumably have safe hash functions */
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        PyObject *m;
        m = __Pyx_GetAttrString(d, "get");
        if (!m) return NULL;
        value = PyObject_CallFunctionObjArgs(m, key,
            (default_value == Py_None) ? NULL : default_value, NULL);
        Py_DECREF(m);
    }
#endif
    return value;
}

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

/* Run-time type information about structs used with buffers */
struct __Pyx_StructField_;

typedef struct {
  const char* name; /* for error messages only */
  struct __Pyx_StructField_* fields;
  size_t size;     /* sizeof(type) */
  char typegroup; /* _R_eal, _C_omplex, Signed _I_nt, _U_nsigned int, _S_truct, _P_ointer, _O_bject */
} __Pyx_TypeInfo;

typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;

typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;


static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj, __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static void __Pyx_RaiseBufferFallbackError(void); /*proto*/
#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/
#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
#define __Pyx_GetBuffer PyObject_GetBuffer
#define __Pyx_ReleaseBuffer PyBuffer_Release
#endif

Py_ssize_t __Pyx_zeros[] = {0, 0};
Py_ssize_t __Pyx_minusones[] = {-1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  // Catch a handful of different errors here and turn them into the
  // equivalent Python errors.
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    // Unfortunately, in standard C++ we have no way of distinguishing EOF
    // from other errors here; be careful with the exception mask
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif

#if defined(_WIN32) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'pxd.ChecksumType' */

/* Module declarations from 'pxd.ChromatogramPeak' */

/* Module declarations from 'pxd.Peak1D' */

/* Module declarations from 'pxd.IonSource_Polarity' */

/* Module declarations from 'pxd.InstrumentSettings' */

/* Module declarations from 'pxd.Precursor' */

/* Module declarations from 'pxd.SourceFile' */

/* Module declarations from 'pxd.MSSpectrum' */

/* Module declarations from 'pxd.MSExperiment' */

/* Module declarations from 'pxd.ChromatogramTools' */

/* Module declarations from 'pxd.StringList' */

/* Module declarations from 'pxd.IntList' */

/* Module declarations from 'pxd.DoubleList' */

/* Module declarations from 'pxd.DataValue' */

/* Module declarations from 'pxd.DataValue_DataType' */

/* Module declarations from 'pxd.MzDataFile' */

/* Module declarations from 'pxd.MzMLFile' */

/* Module declarations from 'pxd.MzXMLFile' */

/* Module declarations from 'pxd.String' */

/* Module declarations from 'pxd.Param' */

/* Module declarations from 'pxd.SavitzkyGolayFilter' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *); /*proto*/

/* Module declarations from '_pyOpenMS' */
static PyTypeObject *__pyx_ptype_9_pyOpenMS_Peak1D = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_Precursor = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MSExperiment = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_InstrumentSettings = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_ChromatogramTools = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_Polarity = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MzXMLFile = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MzMLFile = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MzDataFile = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_StringList = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_IntList = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_DoubleList = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_Param = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_String = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_SourceFile = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_ChecksumType = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_DataValue = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_SavitzkyGolayFilter = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MSSpectrum = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS___Py_str_to_string = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS___Py_str_to_char__ptr__ = 0;
static PyObject *__pyx_f_9_pyOpenMS_conv_vector_Br__Precursor_Br__to_py(std::vector<OpenMS::Precursor> &); /*proto*/
static PyObject *__pyx_f_9_pyOpenMS_conv_string_to_py(std::string &); /*proto*/
static PyObject *__pyx_f_9_pyOpenMS_conv__DataValue_to_py(OpenMS::DataValue &); /*proto*/
static PyObject *__pyx_f_9_pyOpenMS_conv__MSSpectrum_Br__Peak1D_Br__to_py(OpenMS::MSSpectrum<OpenMS::Peak1D> &); /*proto*/
static PyObject *__pyx_f_9_pyOpenMS_conv__SourceFile_to_py(OpenMS::SourceFile &); /*proto*/
static PyObject *__pyx_f_9_pyOpenMS_conv__Precursor_to_py(OpenMS::Precursor &); /*proto*/
static PyObject *__pyx_f_9_pyOpenMS_conv__Param_to_py(OpenMS::Param &); /*proto*/
static PyObject *__pyx_f_9_pyOpenMS_conv__StringList_to_py(OpenMS::StringList &); /*proto*/
static PyObject *__pyx_f_9_pyOpenMS_conv__Peak1D_to_py(OpenMS::Peak1D &); /*proto*/
static PyObject *__pyx_f_9_pyOpenMS_conv__InstrumentSettings_to_py(OpenMS::InstrumentSettings &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), 'R' };
#define __Pyx_MODULE_NAME "_pyOpenMS"
int __pyx_module_is_main__pyOpenMS = 0;

/* Implementation of '_pyOpenMS' */
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static char __pyx_k_1[] = "<type '[^.]*\\.(\\w+)'>";
static char __pyx_k_2[] = "list[]";
static char __pyx_k_3[] = "list[%s]";
static char __pyx_k_4[] = "input args do not match declaration";
static char __pyx_k_13[] = "list[str]";
static char __pyx_k_15[] = "list[int]";
static char __pyx_k_17[] = "list[float]";
static char __pyx_k_23[] = "type mismatch";
static char __pyx_k_26[] = "ndarray is not C contiguous";
static char __pyx_k_28[] = "ndarray is not Fortran contiguous";
static char __pyx_k_30[] = "Non-native byte order not supported";
static char __pyx_k_32[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_33[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_36[] = "Format string allocated too short.";
static char __pyx_k_38[] = "SIZE_OF_CHECKSUMTYPE";
static char __pyx_k__B[] = "B";
static char __pyx_k__H[] = "H";
static char __pyx_k__I[] = "I";
static char __pyx_k__L[] = "L";
static char __pyx_k__O[] = "O";
static char __pyx_k__Q[] = "Q";
static char __pyx_k__b[] = "b";
static char __pyx_k__d[] = "d";
static char __pyx_k__f[] = "f";
static char __pyx_k__g[] = "g";
static char __pyx_k__h[] = "h";
static char __pyx_k__i[] = "i";
static char __pyx_k__l[] = "l";
static char __pyx_k__q[] = "q";
static char __pyx_k__Zd[] = "Zd";
static char __pyx_k__Zf[] = "Zf";
static char __pyx_k__Zg[] = "Zg";
static char __pyx_k__np[] = "np";
static char __pyx_k__re[] = "re";
static char __pyx_k__MD5[] = "MD5";
static char __pyx_k__arg[] = "arg";
static char __pyx_k__epx[] = "epx";
static char __pyx_k__int[] = "int";
static char __pyx_k__key[] = "key";
static char __pyx_k__map[] = "map";
static char __pyx_k__max[] = "max";
static char __pyx_k__min[] = "min";
static char __pyx_k__str[] = "str";
static char __pyx_k__tag[] = "tag";
static char __pyx_k__val[] = "val";
static char __pyx_k__SHA1[] = "SHA1";
static char __pyx_k___sig[] = "_sig";
static char __pyx_k__arg0[] = "arg0";
static char __pyx_k__arg1[] = "arg1";
static char __pyx_k__desc[] = "desc";
static char __pyx_k__tags[] = "tags";
static char __pyx_k__dtype[] = "dtype";
static char __pyx_k__float[] = "float";
static char __pyx_k__match[] = "match";
static char __pyx_k__mzmax[] = "mzmax";
static char __pyx_k__mzmin[] = "mzmin";
static char __pyx_k__numpy[] = "numpy";
static char __pyx_k__param[] = "param";
static char __pyx_k__range[] = "range";
static char __pyx_k__zeros[] = "zeros";
static char __pyx_k__groups[] = "groups";
static char __pyx_k__prefix[] = "prefix";
static char __pyx_k__POLNULL[] = "POLNULL";
static char __pyx_k__float32[] = "float32";
static char __pyx_k__strings[] = "strings";
static char __pyx_k__NEGATIVE[] = "NEGATIVE";
static char __pyx_k__POSITIVE[] = "POSITIVE";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k___new_inst[] = "_new_inst";
static char __pyx_k___pyOpenMS[] = "_pyOpenMS";
static char __pyx_k__StringList[] = "StringList";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__remove_prefix[] = "remove_prefix";
static char __pyx_k__remove_spectra[] = "remove_spectra";
static char __pyx_k__SIZE_OF_POLARITY[] = "SIZE_OF_POLARITY";
static char __pyx_k__UNKNOWN_CHECKSUM[] = "UNKNOWN_CHECKSUM";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_kp_s_15;
static PyObject *__pyx_kp_s_17;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_23;
static PyObject *__pyx_kp_u_26;
static PyObject *__pyx_kp_u_28;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_u_30;
static PyObject *__pyx_kp_u_32;
static PyObject *__pyx_kp_u_33;
static PyObject *__pyx_kp_u_36;
static PyObject *__pyx_n_s_38;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__MD5;
static PyObject *__pyx_n_s__NEGATIVE;
static PyObject *__pyx_n_s__POLNULL;
static PyObject *__pyx_n_s__POSITIVE;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__SHA1;
static PyObject *__pyx_n_s__SIZE_OF_POLARITY;
static PyObject *__pyx_n_s__StringList;
static PyObject *__pyx_n_s__UNKNOWN_CHECKSUM;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___new_inst;
static PyObject *__pyx_n_s___pyOpenMS;
static PyObject *__pyx_n_s___sig;
static PyObject *__pyx_n_s__arg;
static PyObject *__pyx_n_s__arg0;
static PyObject *__pyx_n_s__arg1;
static PyObject *__pyx_n_s__desc;
static PyObject *__pyx_n_s__dtype;
static PyObject *__pyx_n_s__epx;
static PyObject *__pyx_n_s__float;
static PyObject *__pyx_n_s__float32;
static PyObject *__pyx_n_s__groups;
static PyObject *__pyx_n_s__int;
static PyObject *__pyx_n_s__key;
static PyObject *__pyx_n_s__map;
static PyObject *__pyx_n_s__match;
static PyObject *__pyx_n_s__max;
static PyObject *__pyx_n_s__min;
static PyObject *__pyx_n_s__mzmax;
static PyObject *__pyx_n_s__mzmin;
static PyObject *__pyx_n_s__np;
static PyObject *__pyx_n_s__numpy;
static PyObject *__pyx_n_s__param;
static PyObject *__pyx_n_s__prefix;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__re;
static PyObject *__pyx_n_s__remove_prefix;
static PyObject *__pyx_n_s__remove_spectra;
static PyObject *__pyx_n_s__str;
static PyObject *__pyx_n_s__strings;
static PyObject *__pyx_n_s__tag;
static PyObject *__pyx_n_s__tags;
static PyObject *__pyx_n_s__val;
static PyObject *__pyx_n_s__zeros;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_15;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_7;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_9;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_11;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_18;
static PyObject *__pyx_k_tuple_19;
static PyObject *__pyx_k_tuple_20;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_22;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_25;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_29;
static PyObject *__pyx_k_tuple_31;
static PyObject *__pyx_k_tuple_34;
static PyObject *__pyx_k_tuple_35;
static PyObject *__pyx_k_tuple_37;

/* "_pyOpenMS.pyx":33
 * import re
 * 
 * def _sig(a):             # <<<<<<<<<<<<<<
 *     t = type(a)
 *     m = re.match("<type '[^.]*\.(\w+)'>", str(t))
 */

static PyObject *__pyx_pf_9_pyOpenMS__sig(PyObject *__pyx_self, PyObject *__pyx_v_a); /*proto*/
static PyMethodDef __pyx_mdef_9_pyOpenMS__sig = {__Pyx_NAMESTR("_sig"), (PyCFunction)__pyx_pf_9_pyOpenMS__sig, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_9_pyOpenMS__sig(PyObject *__pyx_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_sig");
  __pyx_self = __pyx_self;

  /* "_pyOpenMS.pyx":34
 * 
 * def _sig(a):
 *     t = type(a)             # <<<<<<<<<<<<<<
 *     m = re.match("<type '[^.]*\.(\w+)'>", str(t))
 *     if m is not None:
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_a)));
  __pyx_v_t = ((PyObject*)((PyObject *)Py_TYPE(__pyx_v_a)));

  /* "_pyOpenMS.pyx":35
 * def _sig(a):
 *     t = type(a)
 *     m = re.match("<type '[^.]*\.(\w+)'>", str(t))             # <<<<<<<<<<<<<<
 *     if m is not None:
 *         return m.groups()[0]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__re); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__match); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_t));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_t));
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_m = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "_pyOpenMS.pyx":36
 *     t = type(a)
 *     m = re.match("<type '[^.]*\.(\w+)'>", str(t))
 *     if m is not None:             # <<<<<<<<<<<<<<
 *         return m.groups()[0]
 *     if t==list:
 */
  __pyx_t_4 = (__pyx_v_m != Py_None);
  if (__pyx_t_4) {

    /* "_pyOpenMS.pyx":37
 *     m = re.match("<type '[^.]*\.(\w+)'>", str(t))
 *     if m is not None:
 *         return m.groups()[0]             # <<<<<<<<<<<<<<
 *     if t==list:
 *         if len(a)==0:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__groups); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":38
 *     if m is not None:
 *         return m.groups()[0]
 *     if t==list:             # <<<<<<<<<<<<<<
 *         if len(a)==0:
 *             return 'list[]'
 */
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_t), ((PyObject *)((PyObject*)(&PyList_Type))), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "_pyOpenMS.pyx":39
 *         return m.groups()[0]
 *     if t==list:
 *         if len(a)==0:             # <<<<<<<<<<<<<<
 *             return 'list[]'
 *         return 'list[%s]' % _sig(a[0])
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_t_5 == 0);
    if (__pyx_t_4) {

      /* "_pyOpenMS.pyx":40
 *     if t==list:
 *         if len(a)==0:
 *             return 'list[]'             # <<<<<<<<<<<<<<
 *         return 'list[%s]' % _sig(a[0])
 *     return { str: 'str',
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
      __pyx_r = ((PyObject *)__pyx_kp_s_2);
      goto __pyx_L0;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "_pyOpenMS.pyx":41
 *         if len(a)==0:
 *             return 'list[]'
 *         return 'list[%s]' % _sig(a[0])             # <<<<<<<<<<<<<<
 *     return { str: 'str',
 *              int: 'int',
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_a, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_3), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = ((PyObject *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":42
 *             return 'list[]'
 *         return 'list[%s]' % _sig(a[0])
 *     return { str: 'str',             # <<<<<<<<<<<<<<
 *              int: 'int',
 *              float: 'float',
 */
  __Pyx_XDECREF(__pyx_r);

  /* "_pyOpenMS.pyx":45
 *              int: 'int',
 *              float: 'float',
 *             }.get(t,t)             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import numpy as np
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

  /* "_pyOpenMS.pyx":42
 *             return 'list[]'
 *         return 'list[%s]' % _sig(a[0])
 *     return { str: 'str',             # <<<<<<<<<<<<<<
 *              int: 'int',
 *              float: 'float',
 */
  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_n_s__str)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":43
 *         return 'list[%s]' % _sig(a[0])
 *     return { str: 'str',
 *              int: 'int',             # <<<<<<<<<<<<<<
 *              float: 'float',
 *             }.get(t,t)
 */
  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_n_s__int)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":44
 *     return { str: 'str',
 *              int: 'int',
 *              float: 'float',             # <<<<<<<<<<<<<<
 *             }.get(t,t)
 * cimport numpy as np
 */
  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)((PyObject*)(&PyFloat_Type))), ((PyObject *)__pyx_n_s__float)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":45
 *              int: 'int',
 *              float: 'float',
 *             }.get(t,t)             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import numpy as np
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_v_t), ((PyObject *)__pyx_v_t)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_pyOpenMS._sig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":54
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_6Peak1D___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_6Peak1D___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":55
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _Peak1D * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":57
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _Peak1D * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_6Peak1D__set_inst(struct __pyx_obj_9_pyOpenMS_Peak1D *__pyx_v_self, OpenMS::Peak1D *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":58
 * 
 *     cdef _set_inst(self, _Peak1D * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":59
 *     cdef _set_inst(self, _Peak1D * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":60
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":62
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_6Peak1D_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_6Peak1D_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":63
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":64
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":67
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_6Peak1D_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_6Peak1D_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":68
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":69
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":70
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":73
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":74
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_Peak1D *)((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":75
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":77
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Peak1D()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":78
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _Peak1D()
 *     def setMZ (self, float arg0):
 */

static PyObject *__pyx_f_9_pyOpenMS_6Peak1D___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_Peak1D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":79
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Peak1D()             # <<<<<<<<<<<<<<
 *     def setMZ (self, float arg0):
 *         self.inst.setMZ(arg0)
 */
  __pyx_v_self->inst = new OpenMS::Peak1D();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":80
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Peak1D()
 *     def setMZ (self, float arg0):             # <<<<<<<<<<<<<<
 *         self.inst.setMZ(arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_3setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_3setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  float __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMZ");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __pyx_PyFloat_AsDouble(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":81
 *         self.inst = new _Peak1D()
 *     def setMZ (self, float arg0):
 *         self.inst.setMZ(arg0)             # <<<<<<<<<<<<<<
 *         return self
 *     def getMZ (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst->setMZ(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":82
 *     def setMZ (self, float arg0):
 *         self.inst.setMZ(arg0)
 *         return self             # <<<<<<<<<<<<<<
 *     def getMZ (self, ):
 *         _result =  self.inst.getMZ()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":83
 *         self.inst.setMZ(arg0)
 *         return self
 *     def getMZ (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getMZ()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_4getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_4getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMZ");

  /* "_pyOpenMS.pyx":84
 *         return self
 *     def getMZ (self, ):
 *         _result =  self.inst.getMZ()             # <<<<<<<<<<<<<<
 *         return _result
 *     def getIntensity (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst->getMZ();

  /* "_pyOpenMS.pyx":85
 *     def getMZ (self, ):
 *         _result =  self.inst.getMZ()
 *         return _result             # <<<<<<<<<<<<<<
 *     def getIntensity (self, ):
 *         _result =  self.inst.getIntensity()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.getMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":86
 *         _result =  self.inst.getMZ()
 *         return _result
 *     def getIntensity (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getIntensity()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_5getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_5getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntensity");

  /* "_pyOpenMS.pyx":87
 *         return _result
 *     def getIntensity (self, ):
 *         _result =  self.inst.getIntensity()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setIntensity (self, float arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst->getIntensity();

  /* "_pyOpenMS.pyx":88
 *     def getIntensity (self, ):
 *         _result =  self.inst.getIntensity()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setIntensity (self, float arg0):
 *         self.inst.setIntensity(arg0)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.getIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":89
 *         _result =  self.inst.getIntensity()
 *         return _result
 *     def setIntensity (self, float arg0):             # <<<<<<<<<<<<<<
 *         self.inst.setIntensity(arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_6setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_6setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  float __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setIntensity");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __pyx_PyFloat_AsDouble(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.setIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":90
 *         return _result
 *     def setIntensity (self, float arg0):
 *         self.inst.setIntensity(arg0)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst->setIntensity(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":91
 *     def setIntensity (self, float arg0):
 *         self.inst.setIntensity(arg0)
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class Precursor:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":98
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_9Precursor___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_9Precursor___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":99
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _Precursor * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":101
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _Precursor * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_9Precursor__set_inst(struct __pyx_obj_9_pyOpenMS_Precursor *__pyx_v_self, OpenMS::Precursor *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":102
 * 
 *     cdef _set_inst(self, _Precursor * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":103
 *     cdef _set_inst(self, _Precursor * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":104
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":106
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_9Precursor_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_9Precursor_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":107
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":108
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":111
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_9Precursor_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_9Precursor_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":112
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":113
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":114
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":117
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":118
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_Precursor *)((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":119
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":121
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Precursor()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.Precursor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":122
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _Precursor()
 *     def setMZ (self, float arg0):
 */

static PyObject *__pyx_f_9_pyOpenMS_9Precursor___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_Precursor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":123
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Precursor()             # <<<<<<<<<<<<<<
 *     def setMZ (self, float arg0):
 *         self.inst.setMZ(arg0)
 */
  __pyx_v_self->inst = new OpenMS::Precursor();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":124
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Precursor()
 *     def setMZ (self, float arg0):             # <<<<<<<<<<<<<<
 *         self.inst.setMZ(arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_3setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_3setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  float __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMZ");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __pyx_PyFloat_AsDouble(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Precursor.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":125
 *         self.inst = new _Precursor()
 *     def setMZ (self, float arg0):
 *         self.inst.setMZ(arg0)             # <<<<<<<<<<<<<<
 *         return self
 *     def getIntensity (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst->setMZ(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":126
 *     def setMZ (self, float arg0):
 *         self.inst.setMZ(arg0)
 *         return self             # <<<<<<<<<<<<<<
 *     def getIntensity (self, ):
 *         _result =  self.inst.getIntensity()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":127
 *         self.inst.setMZ(arg0)
 *         return self
 *     def getIntensity (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getIntensity()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_4getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_4getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntensity");

  /* "_pyOpenMS.pyx":128
 *         return self
 *     def getIntensity (self, ):
 *         _result =  self.inst.getIntensity()             # <<<<<<<<<<<<<<
 *         return _result
 *     def getMZ (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst->getIntensity();

  /* "_pyOpenMS.pyx":129
 *     def getIntensity (self, ):
 *         _result =  self.inst.getIntensity()
 *         return _result             # <<<<<<<<<<<<<<
 *     def getMZ (self, ):
 *         _result =  self.inst.getMZ()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Precursor.getIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":130
 *         _result =  self.inst.getIntensity()
 *         return _result
 *     def getMZ (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getMZ()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_5getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_5getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMZ");

  /* "_pyOpenMS.pyx":131
 *         return _result
 *     def getMZ (self, ):
 *         _result =  self.inst.getMZ()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setIntensity (self, float arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst->getMZ();

  /* "_pyOpenMS.pyx":132
 *     def getMZ (self, ):
 *         _result =  self.inst.getMZ()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setIntensity (self, float arg0):
 *         self.inst.setIntensity(arg0)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Precursor.getMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":133
 *         _result =  self.inst.getMZ()
 *         return _result
 *     def setIntensity (self, float arg0):             # <<<<<<<<<<<<<<
 *         self.inst.setIntensity(arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_6setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_6setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  float __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setIntensity");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __pyx_PyFloat_AsDouble(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Precursor.setIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":134
 *         return _result
 *     def setIntensity (self, float arg0):
 *         self.inst.setIntensity(arg0)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst->setIntensity(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":135
 *     def setIntensity (self, float arg0):
 *         self.inst.setIntensity(arg0)
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class MSExperiment:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":142
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_12MSExperiment___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_12MSExperiment___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":143
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _MSExperiment[_Peak1D,_ChromatogramPeak] * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":145
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _MSExperiment[_Peak1D,_ChromatogramPeak] * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_12MSExperiment__set_inst(struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_self, OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak> *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":146
 * 
 *     cdef _set_inst(self, _MSExperiment[_Peak1D,_ChromatogramPeak] * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":147
 *     cdef _set_inst(self, _MSExperiment[_Peak1D,_ChromatogramPeak] * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":148
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":150
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_12MSExperiment_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_12MSExperiment_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":151
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":152
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":155
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_12MSExperiment_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_12MSExperiment_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":156
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":157
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":158
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":161
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":162
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment *)((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":163
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":165
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_7), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":166
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()
 *     def sortSpectra (self, int arg0):
 */

static PyObject *__pyx_f_9_pyOpenMS_12MSExperiment___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":167
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()             # <<<<<<<<<<<<<<
 *     def sortSpectra (self, int arg0):
 *         self.inst.sortSpectra(arg0)
 */
  __pyx_v_self->inst = new OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak>();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":168
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()
 *     def sortSpectra (self, int arg0):             # <<<<<<<<<<<<<<
 *         self.inst.sortSpectra(arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_3sortSpectra(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_3sortSpectra(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  int __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sortSpectra");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __Pyx_PyInt_AsInt(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.sortSpectra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":169
 *         self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()
 *     def sortSpectra (self, int arg0):
 *         self.inst.sortSpectra(arg0)             # <<<<<<<<<<<<<<
 *         return self
 *     def getMaxRT (self, ):
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_arg0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->sortSpectra(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":170
 *     def sortSpectra (self, int arg0):
 *         self.inst.sortSpectra(arg0)
 *         return self             # <<<<<<<<<<<<<<
 *     def getMaxRT (self, ):
 *         _result =  self.inst.getMaxRT()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.sortSpectra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":171
 *         self.inst.sortSpectra(arg0)
 *         return self
 *     def getMaxRT (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getMaxRT()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_4getMaxRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_4getMaxRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMaxRT");

  /* "_pyOpenMS.pyx":172
 *         return self
 *     def getMaxRT (self, ):
 *         _result =  self.inst.getMaxRT()             # <<<<<<<<<<<<<<
 *         return _result
 *     def getMinMZ (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->getMaxRT();

  /* "_pyOpenMS.pyx":173
 *     def getMaxRT (self, ):
 *         _result =  self.inst.getMaxRT()
 *         return _result             # <<<<<<<<<<<<<<
 *     def getMinMZ (self, ):
 *         _result =  self.inst.getMinMZ()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.getMaxRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":174
 *         _result =  self.inst.getMaxRT()
 *         return _result
 *     def getMinMZ (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getMinMZ()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_5getMinMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_5getMinMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMinMZ");

  /* "_pyOpenMS.pyx":175
 *         return _result
 *     def getMinMZ (self, ):
 *         _result =  self.inst.getMinMZ()             # <<<<<<<<<<<<<<
 *         return _result
 *     def push_back (self, MSSpectrum arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->getMinMZ();

  /* "_pyOpenMS.pyx":176
 *     def getMinMZ (self, ):
 *         _result =  self.inst.getMinMZ()
 *         return _result             # <<<<<<<<<<<<<<
 *     def push_back (self, MSSpectrum arg0):
 *         self.inst.push_back(deref(arg0.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.getMinMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":177
 *         _result =  self.inst.getMinMZ()
 *         return _result
 *     def push_back (self, MSSpectrum arg0):             # <<<<<<<<<<<<<<
 *         self.inst.push_back(deref(arg0.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_6push_back(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_6push_back(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_back");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), __pyx_ptype_9_pyOpenMS_MSSpectrum, 1, "arg0", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":178
 *         return _result
 *     def push_back (self, MSSpectrum arg0):
 *         self.inst.push_back(deref(arg0.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def updateRanges (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->push_back(((OpenMS::MSSpectrum<OpenMS::Peak1D>)(*((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_arg0)->inst)));

  /* "_pyOpenMS.pyx":179
 *     def push_back (self, MSSpectrum arg0):
 *         self.inst.push_back(deref(arg0.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def updateRanges (self, ):
 *         self.inst.updateRanges()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.push_back", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":180
 *         self.inst.push_back(deref(arg0.inst))
 *         return self
 *     def updateRanges (self, ):             # <<<<<<<<<<<<<<
 *         self.inst.updateRanges()
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_7updateRanges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_7updateRanges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateRanges");

  /* "_pyOpenMS.pyx":181
 *         return self
 *     def updateRanges (self, ):
 *         self.inst.updateRanges()             # <<<<<<<<<<<<<<
 *         return self
 *     def __getitem__(self, int idx):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->updateRanges();

  /* "_pyOpenMS.pyx":182
 *     def updateRanges (self, ):
 *         self.inst.updateRanges()
 *         return self             # <<<<<<<<<<<<<<
 *     def __getitem__(self, int idx):
 *         cdef _MSSpectrum[_Peak1D] _result = deref(self.inst)[idx]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":183
 *         self.inst.updateRanges()
 *         return self
 *     def __getitem__(self, int idx):             # <<<<<<<<<<<<<<
 *         cdef _MSSpectrum[_Peak1D] _result = deref(self.inst)[idx]
 *         return conv__MSSpectrum_Br__Peak1D_Br__to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_8__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_8__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx) {
  int __pyx_v_idx;
  OpenMS::MSSpectrum<OpenMS::Peak1D> __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_AsInt(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":184
 *         return self
 *     def __getitem__(self, int idx):
 *         cdef _MSSpectrum[_Peak1D] _result = deref(self.inst)[idx]             # <<<<<<<<<<<<<<
 *         return conv__MSSpectrum_Br__Peak1D_Br__to_py(_result)
 *     def getMaxMZ (self, ):
 */
  __pyx_v__result = ((OpenMS::MSSpectrum<OpenMS::Peak1D>)((*((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst)[__pyx_v_idx]));

  /* "_pyOpenMS.pyx":185
 *     def __getitem__(self, int idx):
 *         cdef _MSSpectrum[_Peak1D] _result = deref(self.inst)[idx]
 *         return conv__MSSpectrum_Br__Peak1D_Br__to_py(_result)             # <<<<<<<<<<<<<<
 *     def getMaxMZ (self, ):
 *         _result =  self.inst.getMaxMZ()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv__MSSpectrum_Br__Peak1D_Br__to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":186
 *         cdef _MSSpectrum[_Peak1D] _result = deref(self.inst)[idx]
 *         return conv__MSSpectrum_Br__Peak1D_Br__to_py(_result)
 *     def getMaxMZ (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getMaxMZ()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_9getMaxMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_9getMaxMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMaxMZ");

  /* "_pyOpenMS.pyx":187
 *         return conv__MSSpectrum_Br__Peak1D_Br__to_py(_result)
 *     def getMaxMZ (self, ):
 *         _result =  self.inst.getMaxMZ()             # <<<<<<<<<<<<<<
 *         return _result
 *     def getMinRT (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->getMaxMZ();

  /* "_pyOpenMS.pyx":188
 *     def getMaxMZ (self, ):
 *         _result =  self.inst.getMaxMZ()
 *         return _result             # <<<<<<<<<<<<<<
 *     def getMinRT (self, ):
 *         _result =  self.inst.getMinRT()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.getMaxMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":189
 *         _result =  self.inst.getMaxMZ()
 *         return _result
 *     def getMinRT (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getMinRT()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_10getMinRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_10getMinRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMinRT");

  /* "_pyOpenMS.pyx":190
 *         return _result
 *     def getMinRT (self, ):
 *         _result =  self.inst.getMinRT()             # <<<<<<<<<<<<<<
 *         return _result
 *     def size (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->getMinRT();

  /* "_pyOpenMS.pyx":191
 *     def getMinRT (self, ):
 *         _result =  self.inst.getMinRT()
 *         return _result             # <<<<<<<<<<<<<<
 *     def size (self, ):
 *         _result =  self.inst.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.getMinRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":192
 *         _result =  self.inst.getMinRT()
 *         return _result
 *     def size (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.size()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_11size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_11size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "_pyOpenMS.pyx":193
 *         return _result
 *     def size (self, ):
 *         _result =  self.inst.size()             # <<<<<<<<<<<<<<
 *         return _result
 * 
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->size();

  /* "_pyOpenMS.pyx":194
 *     def size (self, ):
 *         _result =  self.inst.size()
 *         return _result             # <<<<<<<<<<<<<<
 * 
 * cdef class InstrumentSettings:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":201
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_18InstrumentSettings___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_18InstrumentSettings___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":202
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _InstrumentSettings * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":204
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _InstrumentSettings * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_18InstrumentSettings__set_inst(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *__pyx_v_self, OpenMS::InstrumentSettings *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":205
 * 
 *     cdef _set_inst(self, _InstrumentSettings * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":206
 *     cdef _set_inst(self, _InstrumentSettings * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":207
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":209
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_18InstrumentSettings_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_18InstrumentSettings_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":210
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":211
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":214
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_18InstrumentSettings_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_18InstrumentSettings_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":215
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":216
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":217
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":220
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":221
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings *)((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":222
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":224
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _InstrumentSettings()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.InstrumentSettings.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":225
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _InstrumentSettings()
 *     def setPolarity (self, int arg0):
 */

static PyObject *__pyx_f_9_pyOpenMS_18InstrumentSettings___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":226
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _InstrumentSettings()             # <<<<<<<<<<<<<<
 *     def setPolarity (self, int arg0):
 *         self.inst.setPolarity(<Polarity>arg0)
 */
  __pyx_v_self->inst = new OpenMS::InstrumentSettings();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":227
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _InstrumentSettings()
 *     def setPolarity (self, int arg0):             # <<<<<<<<<<<<<<
 *         self.inst.setPolarity(<Polarity>arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_18InstrumentSettings_3setPolarity(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_18InstrumentSettings_3setPolarity(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  int __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum OpenMS::IonSource::Polarity __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPolarity");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __Pyx_PyInt_AsInt(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.InstrumentSettings.setPolarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":228
 *         self.inst = new _InstrumentSettings()
 *     def setPolarity (self, int arg0):
 *         self.inst.setPolarity(<Polarity>arg0)             # <<<<<<<<<<<<<<
 *         return self
 *     def getPolarity (self, ):
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_arg0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum OpenMS::IonSource::Polarity)PyInt_AsLong(__pyx_t_1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->inst->setPolarity(__pyx_t_2);

  /* "_pyOpenMS.pyx":229
 *     def setPolarity (self, int arg0):
 *         self.inst.setPolarity(<Polarity>arg0)
 *         return self             # <<<<<<<<<<<<<<
 *     def getPolarity (self, ):
 *         _result =  self.inst.getPolarity()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.InstrumentSettings.setPolarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":230
 *         self.inst.setPolarity(<Polarity>arg0)
 *         return self
 *     def getPolarity (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getPolarity()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_18InstrumentSettings_4getPolarity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_18InstrumentSettings_4getPolarity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v__result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPolarity");

  /* "_pyOpenMS.pyx":231
 *         return self
 *     def getPolarity (self, ):
 *         _result =  self.inst.getPolarity()             # <<<<<<<<<<<<<<
 *         return _result
 * 
 */
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->inst->getPolarity()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":232
 *     def getPolarity (self, ):
 *         _result =  self.inst.getPolarity()
 *         return _result             # <<<<<<<<<<<<<<
 * 
 * cdef class ChromatogramTools:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__result);
  __pyx_r = __pyx_v__result;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.InstrumentSettings.getPolarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":239
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_17ChromatogramTools___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_17ChromatogramTools___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":240
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _ChromatogramTools * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":242
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _ChromatogramTools * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_17ChromatogramTools__set_inst(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *__pyx_v_self, OpenMS::ChromatogramTools *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":243
 * 
 *     cdef _set_inst(self, _ChromatogramTools * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":244
 *     cdef _set_inst(self, _ChromatogramTools * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":245
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":247
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_17ChromatogramTools_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_17ChromatogramTools_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":248
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":249
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":252
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_17ChromatogramTools_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_17ChromatogramTools_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":253
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":254
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":255
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":258
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":259
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools *)((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":260
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":262
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _ChromatogramTools()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_9), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.ChromatogramTools.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":263
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _ChromatogramTools()
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):
 */

static PyObject *__pyx_f_9_pyOpenMS_17ChromatogramTools___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":264
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _ChromatogramTools()             # <<<<<<<<<<<<<<
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))
 */
  __pyx_v_self->inst = new OpenMS::ChromatogramTools();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":265
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _ChromatogramTools()
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):             # <<<<<<<<<<<<<<
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_17ChromatogramTools_3convertChromatogramsToSpectra(PyObject *__pyx_v_self, PyObject *__pyx_v_epx); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_17ChromatogramTools_3convertChromatogramsToSpectra(PyObject *__pyx_v_self, PyObject *__pyx_v_epx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convertChromatogramsToSpectra");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_epx), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "epx", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":266
 *         self.inst = new _ChromatogramTools()
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):
 */
  ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->inst->convertChromatogramsToSpectra((*((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_epx)->inst));

  /* "_pyOpenMS.pyx":267
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.ChromatogramTools.convertChromatogramsToSpectra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":268
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))
 *         return self
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):             # <<<<<<<<<<<<<<
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_17ChromatogramTools_4convertSpectraToChromatograms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_17ChromatogramTools_4convertSpectraToChromatograms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_epx = 0;
  int __pyx_v_remove_spectra;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__epx,&__pyx_n_s__remove_spectra,0};
  __Pyx_RefNannySetupContext("convertSpectraToChromatograms");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__epx);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__remove_spectra);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convertSpectraToChromatograms", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "convertSpectraToChromatograms") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_epx = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[0]);
    __pyx_v_remove_spectra = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_remove_spectra == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convertSpectraToChromatograms", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.ChromatogramTools.convertSpectraToChromatograms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_epx), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "epx", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":269
 *         return self
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)             # <<<<<<<<<<<<<<
 *         return self
 * cdef class Polarity:
 */
  ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->inst->convertSpectraToChromatograms((*__pyx_v_epx->inst), __pyx_v_remove_spectra);

  /* "_pyOpenMS.pyx":270
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)
 *         return self             # <<<<<<<<<<<<<<
 * cdef class Polarity:
 *     POLNULL=0
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.ChromatogramTools.convertSpectraToChromatograms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":282
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_9MzXMLFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_9MzXMLFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":283
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _MzXMLFile * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":285
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _MzXMLFile * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_9MzXMLFile__set_inst(struct __pyx_obj_9_pyOpenMS_MzXMLFile *__pyx_v_self, OpenMS::MzXMLFile *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":286
 * 
 *     cdef _set_inst(self, _MzXMLFile * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":287
 *     cdef _set_inst(self, _MzXMLFile * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":288
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":290
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_9MzXMLFile_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_9MzXMLFile_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":291
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":292
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":295
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_9MzXMLFile_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_9MzXMLFile_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":296
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":297
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":298
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":301
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":302
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile *)((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":303
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":305
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzXMLFile()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_10), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":306
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _MzXMLFile()
 *     def load (self, str arg0, MSExperiment arg1):
 */

static PyObject *__pyx_f_9_pyOpenMS_9MzXMLFile___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_MzXMLFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":307
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzXMLFile()             # <<<<<<<<<<<<<<
 *     def load (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 */
  __pyx_v_self->inst = new OpenMS::MzXMLFile();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":308
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzXMLFile()
 *     def load (self, str arg0, MSExperiment arg1):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_9MzXMLFile_3load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9MzXMLFile_3load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg0 = 0;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_arg1 = 0;
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg0,&__pyx_n_s__arg1,0};
  __Pyx_RefNannySetupContext("load");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg0);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg0 = ((PyObject*)values[0]);
    __pyx_v_arg1 = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg1), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "arg1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":310
 *     def load (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":311
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def store (self, str arg0, MSExperiment arg1):
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->inst->load((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)), (*__pyx_v_arg1->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":312
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def store (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":313
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self
 *     def store (self, str arg0, MSExperiment arg1):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_9MzXMLFile_4store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9MzXMLFile_4store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg0 = 0;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_arg1 = 0;
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg0,&__pyx_n_s__arg1,0};
  __Pyx_RefNannySetupContext("store");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg0);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "store") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg0 = ((PyObject*)values[0]);
    __pyx_v_arg1 = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg1), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "arg1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":315
 *     def store (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":316
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.store(deref(conv_arg0.conv()), deref(arg1.inst))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->inst->store((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)), (*__pyx_v_arg1->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":317
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.store(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class MzMLFile:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":324
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_8MzMLFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_8MzMLFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":325
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _MzMLFile * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":327
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _MzMLFile * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_8MzMLFile__set_inst(struct __pyx_obj_9_pyOpenMS_MzMLFile *__pyx_v_self, OpenMS::MzMLFile *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":328
 * 
 *     cdef _set_inst(self, _MzMLFile * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":329
 *     cdef _set_inst(self, _MzMLFile * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":330
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":332
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_8MzMLFile_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_8MzMLFile_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":333
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":334
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":337
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_8MzMLFile_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_8MzMLFile_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":338
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":339
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":340
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":343
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":344
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile *)((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":345
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":347
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzMLFile()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_11), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":348
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _MzMLFile()
 *     def load (self, str arg0, MSExperiment arg1):
 */

static PyObject *__pyx_f_9_pyOpenMS_8MzMLFile___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_MzMLFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":349
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzMLFile()             # <<<<<<<<<<<<<<
 *     def load (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 */
  __pyx_v_self->inst = new OpenMS::MzMLFile();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":350
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzMLFile()
 *     def load (self, str arg0, MSExperiment arg1):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_8MzMLFile_3load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_8MzMLFile_3load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg0 = 0;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_arg1 = 0;
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg0,&__pyx_n_s__arg1,0};
  __Pyx_RefNannySetupContext("load");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg0);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg0 = ((PyObject*)values[0]);
    __pyx_v_arg1 = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg1), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "arg1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":352
 *     def load (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":353
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def store (self, str arg0, MSExperiment arg1):
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->inst->load((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)), (*__pyx_v_arg1->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":354
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def store (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":355
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self
 *     def store (self, str arg0, MSExperiment arg1):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_8MzMLFile_4store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_8MzMLFile_4store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg0 = 0;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_arg1 = 0;
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg0,&__pyx_n_s__arg1,0};
  __Pyx_RefNannySetupContext("store");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg0);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "store") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg0 = ((PyObject*)values[0]);
    __pyx_v_arg1 = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg1), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "arg1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":357
 *     def store (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":358
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.store(deref(conv_arg0.conv()), deref(arg1.inst))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->inst->store((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)), (*__pyx_v_arg1->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":359
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.store(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class MzDataFile:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":366
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_10MzDataFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10MzDataFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":367
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _MzDataFile * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":369
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _MzDataFile * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_10MzDataFile__set_inst(struct __pyx_obj_9_pyOpenMS_MzDataFile *__pyx_v_self, OpenMS::MzDataFile *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":370
 * 
 *     cdef _set_inst(self, _MzDataFile * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":371
 *     cdef _set_inst(self, _MzDataFile * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":372
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":374
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_10MzDataFile_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_10MzDataFile_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":375
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":376
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":379
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_10MzDataFile_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10MzDataFile_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":380
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":381
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":382
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":385
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":386
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile *)((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":387
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":389
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzDataFile()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":390
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _MzDataFile()
 *     def load (self, str arg0, MSExperiment arg1):
 */

static PyObject *__pyx_f_9_pyOpenMS_10MzDataFile___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_MzDataFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":391
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzDataFile()             # <<<<<<<<<<<<<<
 *     def load (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 */
  __pyx_v_self->inst = new OpenMS::MzDataFile();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":392
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzDataFile()
 *     def load (self, str arg0, MSExperiment arg1):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MzDataFile_3load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MzDataFile_3load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg0 = 0;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_arg1 = 0;
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg0,&__pyx_n_s__arg1,0};
  __Pyx_RefNannySetupContext("load");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg0);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg0 = ((PyObject*)values[0]);
    __pyx_v_arg1 = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg1), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "arg1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":394
 *     def load (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":395
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def store (self, str arg0, MSExperiment arg1):
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->inst->load((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)), (*__pyx_v_arg1->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":396
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def store (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":397
 *         self.inst.load(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self
 *     def store (self, str arg0, MSExperiment arg1):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MzDataFile_4store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MzDataFile_4store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg0 = 0;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_arg1 = 0;
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg0,&__pyx_n_s__arg1,0};
  __Pyx_RefNannySetupContext("store");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg0);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "store") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg0 = ((PyObject*)values[0]);
    __pyx_v_arg1 = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg1), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "arg1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":399
 *     def store (self, str arg0, MSExperiment arg1):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":400
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.store(deref(conv_arg0.conv()), deref(arg1.inst))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->inst->store((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)), (*__pyx_v_arg1->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":401
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.store(deref(conv_arg0.conv()), deref(arg1.inst))
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class StringList:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":408
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_10StringList___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10StringList___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":409
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _StringList * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":411
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _StringList * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_10StringList__set_inst(struct __pyx_obj_9_pyOpenMS_StringList *__pyx_v_self, OpenMS::StringList *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":412
 * 
 *     cdef _set_inst(self, _StringList * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":413
 *     cdef _set_inst(self, _StringList * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":414
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":416
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_10StringList_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_10StringList_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":417
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":418
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":421
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_10StringList_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10StringList_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":422
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":423
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":424
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":427
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":428
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_StringList *)((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":429
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":432
 * 
 * 
 *         if self._cons_sig == ["list[str]"]:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_list_Br_str_Br_(a[0])
 *             return
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_13));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":433
 * 
 *         if self._cons_sig == ["list[str]"]:
 *             self.__subcons_for_list_Br_str_Br_(a[0])             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    if (!(likely(PyList_CheckExact(PyTuple_GET_ITEM(__pyx_v_a, 0)))||((PyTuple_GET_ITEM(__pyx_v_a, 0)) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(PyTuple_GET_ITEM(__pyx_v_a, 0))->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_a, 0);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_StringList *)((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->__pyx_vtab)->__subcons_for_list_Br_str_Br_(((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":434
 *         if self._cons_sig == ["list[str]"]:
 *             self.__subcons_for_list_Br_str_Br_(a[0])
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_pyOpenMS.pyx":436
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _StringList()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.StringList.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":437
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _StringList()
 *     cdef __subcons_for_list_Br_str_Br_(self, list a0):
 */

static PyObject *__pyx_f_9_pyOpenMS_10StringList___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_StringList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":438
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _StringList()             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_list_Br_str_Br_(self, list a0):
 *         cdef __Py_list_to_vector_Br_string_Br_ conv_a0
 */
  __pyx_v_self->inst = new OpenMS::StringList();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":439
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _StringList()
 *     cdef __subcons_for_list_Br_str_Br_(self, list a0):             # <<<<<<<<<<<<<<
 *         cdef __Py_list_to_vector_Br_string_Br_ conv_a0
 *         conv_a0 = __Py_list_to_vector_Br_string_Br_(a0)
 */

static PyObject *__pyx_f_9_pyOpenMS_10StringList___subcons_for_list_Br_str_Br_(struct __pyx_obj_9_pyOpenMS_StringList *__pyx_v_self, PyObject *__pyx_v_a0) {
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *__pyx_v_conv_a0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__subcons_for_list_Br_str_Br_");

  /* "_pyOpenMS.pyx":441
 *     cdef __subcons_for_list_Br_str_Br_(self, list a0):
 *         cdef __Py_list_to_vector_Br_string_Br_ conv_a0
 *         conv_a0 = __Py_list_to_vector_Br_string_Br_(a0)             # <<<<<<<<<<<<<<
 *         self.inst = new _StringList(deref(conv_a0.conv()))
 *     def at (self, int arg0):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_a0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_a0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br_string_Br_)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_a0 = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":442
 *         cdef __Py_list_to_vector_Br_string_Br_ conv_a0
 *         conv_a0 = __Py_list_to_vector_Br_string_Br_(a0)
 *         self.inst = new _StringList(deref(conv_a0.conv()))             # <<<<<<<<<<<<<<
 *     def at (self, int arg0):
 *         _result =  self.inst.at(arg0)
 */
  __pyx_v_self->inst = new OpenMS::StringList((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *)__pyx_v_conv_a0->__pyx_vtab)->conv(__pyx_v_conv_a0)));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.StringList.__subcons_for_list_Br_str_Br_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_a0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":443
 *         conv_a0 = __Py_list_to_vector_Br_string_Br_(a0)
 *         self.inst = new _StringList(deref(conv_a0.conv()))
 *     def at (self, int arg0):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.at(arg0)
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10StringList_3at(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10StringList_3at(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  int __pyx_v_arg0;
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("at");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __Pyx_PyInt_AsInt(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.StringList.at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":444
 *         self.inst = new _StringList(deref(conv_a0.conv()))
 *     def at (self, int arg0):
 *         _result =  self.inst.at(arg0)             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def size (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->inst->at(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":445
 *     def at (self, int arg0):
 *         _result =  self.inst.at(arg0)
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def size (self, ):
 *         _result =  self.inst.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.StringList.at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":446
 *         _result =  self.inst.at(arg0)
 *         return conv_string_to_py(_result)
 *     def size (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.size()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10StringList_4size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10StringList_4size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "_pyOpenMS.pyx":447
 *         return conv_string_to_py(_result)
 *     def size (self, ):
 *         _result =  self.inst.size()             # <<<<<<<<<<<<<<
 *         return _result
 * 
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_v_self)->inst->size();

  /* "_pyOpenMS.pyx":448
 *     def size (self, ):
 *         _result =  self.inst.size()
 *         return _result             # <<<<<<<<<<<<<<
 * 
 * cdef class IntList:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.StringList.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":455
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_7IntList___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_7IntList___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":456
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _IntList * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":458
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _IntList * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_7IntList__set_inst(struct __pyx_obj_9_pyOpenMS_IntList *__pyx_v_self, OpenMS::IntList *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":459
 * 
 *     cdef _set_inst(self, _IntList * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":460
 *     cdef _set_inst(self, _IntList * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":461
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":463
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_7IntList_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_7IntList_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":464
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":465
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":468
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_7IntList_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_7IntList_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":469
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":470
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":471
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":474
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":475
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_IntList *)((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":476
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":479
 * 
 * 
 *         if self._cons_sig == ["list[int]"]:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_list_Br_int_Br_(a[0])
 *             return
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_15));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_15));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":480
 * 
 *         if self._cons_sig == ["list[int]"]:
 *             self.__subcons_for_list_Br_int_Br_(a[0])             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    if (!(likely(PyList_CheckExact(PyTuple_GET_ITEM(__pyx_v_a, 0)))||((PyTuple_GET_ITEM(__pyx_v_a, 0)) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(PyTuple_GET_ITEM(__pyx_v_a, 0))->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_a, 0);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_IntList *)((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->__pyx_vtab)->__subcons_for_list_Br_int_Br_(((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":481
 *         if self._cons_sig == ["list[int]"]:
 *             self.__subcons_for_list_Br_int_Br_(a[0])
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_pyOpenMS.pyx":483
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _IntList()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.IntList.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":484
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _IntList()
 *     cdef __subcons_for_list_Br_int_Br_(self, list a0):
 */

static PyObject *__pyx_f_9_pyOpenMS_7IntList___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_IntList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":485
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _IntList()             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_list_Br_int_Br_(self, list a0):
 *         cdef __Py_list_to_vector_Br_int_Br_ conv_a0
 */
  __pyx_v_self->inst = new OpenMS::IntList();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":486
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _IntList()
 *     cdef __subcons_for_list_Br_int_Br_(self, list a0):             # <<<<<<<<<<<<<<
 *         cdef __Py_list_to_vector_Br_int_Br_ conv_a0
 *         conv_a0 = __Py_list_to_vector_Br_int_Br_(a0)
 */

static PyObject *__pyx_f_9_pyOpenMS_7IntList___subcons_for_list_Br_int_Br_(struct __pyx_obj_9_pyOpenMS_IntList *__pyx_v_self, PyObject *__pyx_v_a0) {
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *__pyx_v_conv_a0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__subcons_for_list_Br_int_Br_");

  /* "_pyOpenMS.pyx":488
 *     cdef __subcons_for_list_Br_int_Br_(self, list a0):
 *         cdef __Py_list_to_vector_Br_int_Br_ conv_a0
 *         conv_a0 = __Py_list_to_vector_Br_int_Br_(a0)             # <<<<<<<<<<<<<<
 *         self.inst = new _IntList(deref(conv_a0.conv()))
 *     def at (self, int arg0):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_a0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_a0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br_int_Br_)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_a0 = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":489
 *         cdef __Py_list_to_vector_Br_int_Br_ conv_a0
 *         conv_a0 = __Py_list_to_vector_Br_int_Br_(a0)
 *         self.inst = new _IntList(deref(conv_a0.conv()))             # <<<<<<<<<<<<<<
 *     def at (self, int arg0):
 *         _result =  self.inst.at(arg0)
 */
  __pyx_v_self->inst = new OpenMS::IntList((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *)__pyx_v_conv_a0->__pyx_vtab)->conv(__pyx_v_conv_a0)));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.IntList.__subcons_for_list_Br_int_Br_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_a0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":490
 *         conv_a0 = __Py_list_to_vector_Br_int_Br_(a0)
 *         self.inst = new _IntList(deref(conv_a0.conv()))
 *     def at (self, int arg0):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.at(arg0)
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_7IntList_3at(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_7IntList_3at(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  int __pyx_v_arg0;
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("at");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __Pyx_PyInt_AsInt(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.IntList.at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":491
 *         self.inst = new _IntList(deref(conv_a0.conv()))
 *     def at (self, int arg0):
 *         _result =  self.inst.at(arg0)             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def size (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->inst->at(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":492
 *     def at (self, int arg0):
 *         _result =  self.inst.at(arg0)
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def size (self, ):
 *         _result =  self.inst.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.IntList.at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":493
 *         _result =  self.inst.at(arg0)
 *         return conv_string_to_py(_result)
 *     def size (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.size()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_7IntList_4size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_7IntList_4size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "_pyOpenMS.pyx":494
 *         return conv_string_to_py(_result)
 *     def size (self, ):
 *         _result =  self.inst.size()             # <<<<<<<<<<<<<<
 *         return _result
 * 
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_IntList *)__pyx_v_self)->inst->size();

  /* "_pyOpenMS.pyx":495
 *     def size (self, ):
 *         _result =  self.inst.size()
 *         return _result             # <<<<<<<<<<<<<<
 * 
 * cdef class DoubleList:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.IntList.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":502
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_10DoubleList___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10DoubleList___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":503
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _DoubleList * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":505
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _DoubleList * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_10DoubleList__set_inst(struct __pyx_obj_9_pyOpenMS_DoubleList *__pyx_v_self, OpenMS::DoubleList *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":506
 * 
 *     cdef _set_inst(self, _DoubleList * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":507
 *     cdef _set_inst(self, _DoubleList * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":508
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":510
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_10DoubleList_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_10DoubleList_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":511
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":512
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":515
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_10DoubleList_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10DoubleList_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":516
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":517
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":518
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":521
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":522
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_DoubleList *)((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":523
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":526
 * 
 * 
 *         if self._cons_sig == ["list[float]"]:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_list_Br_float_Br_(a[0])
 *             return
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_17));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_17));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_17));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":527
 * 
 *         if self._cons_sig == ["list[float]"]:
 *             self.__subcons_for_list_Br_float_Br_(a[0])             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    if (!(likely(PyList_CheckExact(PyTuple_GET_ITEM(__pyx_v_a, 0)))||((PyTuple_GET_ITEM(__pyx_v_a, 0)) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(PyTuple_GET_ITEM(__pyx_v_a, 0))->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_a, 0);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_DoubleList *)((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->__pyx_vtab)->__subcons_for_list_Br_float_Br_(((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":528
 *         if self._cons_sig == ["list[float]"]:
 *             self.__subcons_for_list_Br_float_Br_(a[0])
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_pyOpenMS.pyx":530
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _DoubleList()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_18), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.DoubleList.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":531
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _DoubleList()
 *     cdef __subcons_for_list_Br_float_Br_(self, list a0):
 */

static PyObject *__pyx_f_9_pyOpenMS_10DoubleList___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_DoubleList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":532
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _DoubleList()             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_list_Br_float_Br_(self, list a0):
 *         cdef __Py_list_to_vector_Br_double_Br_ conv_a0
 */
  __pyx_v_self->inst = new OpenMS::DoubleList();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":533
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _DoubleList()
 *     cdef __subcons_for_list_Br_float_Br_(self, list a0):             # <<<<<<<<<<<<<<
 *         cdef __Py_list_to_vector_Br_double_Br_ conv_a0
 *         conv_a0 = __Py_list_to_vector_Br_double_Br_(a0)
 */

static PyObject *__pyx_f_9_pyOpenMS_10DoubleList___subcons_for_list_Br_float_Br_(struct __pyx_obj_9_pyOpenMS_DoubleList *__pyx_v_self, PyObject *__pyx_v_a0) {
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *__pyx_v_conv_a0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__subcons_for_list_Br_float_Br_");

  /* "_pyOpenMS.pyx":535
 *     cdef __subcons_for_list_Br_float_Br_(self, list a0):
 *         cdef __Py_list_to_vector_Br_double_Br_ conv_a0
 *         conv_a0 = __Py_list_to_vector_Br_double_Br_(a0)             # <<<<<<<<<<<<<<
 *         self.inst = new _DoubleList(deref(conv_a0.conv()))
 *     def at (self, int arg0):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_a0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_a0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br_double_Br_)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_a0 = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":536
 *         cdef __Py_list_to_vector_Br_double_Br_ conv_a0
 *         conv_a0 = __Py_list_to_vector_Br_double_Br_(a0)
 *         self.inst = new _DoubleList(deref(conv_a0.conv()))             # <<<<<<<<<<<<<<
 *     def at (self, int arg0):
 *         _result =  self.inst.at(arg0)
 */
  __pyx_v_self->inst = new OpenMS::DoubleList((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *)__pyx_v_conv_a0->__pyx_vtab)->conv(__pyx_v_conv_a0)));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.DoubleList.__subcons_for_list_Br_float_Br_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_a0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":537
 *         conv_a0 = __Py_list_to_vector_Br_double_Br_(a0)
 *         self.inst = new _DoubleList(deref(conv_a0.conv()))
 *     def at (self, int arg0):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.at(arg0)
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10DoubleList_3at(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10DoubleList_3at(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  int __pyx_v_arg0;
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("at");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __Pyx_PyInt_AsInt(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.DoubleList.at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":538
 *         self.inst = new _DoubleList(deref(conv_a0.conv()))
 *     def at (self, int arg0):
 *         _result =  self.inst.at(arg0)             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def size (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->inst->at(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":539
 *     def at (self, int arg0):
 *         _result =  self.inst.at(arg0)
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def size (self, ):
 *         _result =  self.inst.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.DoubleList.at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":540
 *         _result =  self.inst.at(arg0)
 *         return conv_string_to_py(_result)
 *     def size (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.size()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10DoubleList_4size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10DoubleList_4size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "_pyOpenMS.pyx":541
 *         return conv_string_to_py(_result)
 *     def size (self, ):
 *         _result =  self.inst.size()             # <<<<<<<<<<<<<<
 *         return _result
 * 
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_DoubleList *)__pyx_v_self)->inst->size();

  /* "_pyOpenMS.pyx":542
 *     def size (self, ):
 *         _result =  self.inst.size()
 *         return _result             # <<<<<<<<<<<<<<
 * 
 * cdef class Param:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.DoubleList.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":549
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_5Param___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_5Param___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":550
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _Param * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":552
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _Param * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_5Param__set_inst(struct __pyx_obj_9_pyOpenMS_Param *__pyx_v_self, OpenMS::Param *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":553
 * 
 *     cdef _set_inst(self, _Param * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":554
 *     cdef _set_inst(self, _Param * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":555
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":557
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_5Param_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_5Param_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":558
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":559
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":562
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_5Param_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_5Param_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":563
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":564
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":565
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":568
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":569
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_Param *)((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":570
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":572
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Param()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_19), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.Param.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":573
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _Param()
 *     def load (self, str filename):
 */

static PyObject *__pyx_f_9_pyOpenMS_5Param___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_Param *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":574
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Param()             # <<<<<<<<<<<<<<
 *     def load (self, str filename):
 *         cdef __Py_str_to_string conv_filename
 */
  __pyx_v_self->inst = new OpenMS::Param();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":575
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Param()
 *     def load (self, str filename):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_filename
 *         conv_filename = __Py_str_to_string(filename)
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_3load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_3load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_filename = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":577
 *     def load (self, str filename):
 *         cdef __Py_str_to_string conv_filename
 *         conv_filename = __Py_str_to_string(filename)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(conv_filename.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_filename));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_filename));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_filename));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_filename = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":578
 *         cdef __Py_str_to_string conv_filename
 *         conv_filename = __Py_str_to_string(filename)
 *         self.inst.load(deref(conv_filename.conv()))             # <<<<<<<<<<<<<<
 *         return self
 *     def exists (self, String key):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->load((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_filename->__pyx_vtab)->conv(__pyx_v_conv_filename)));

  /* "_pyOpenMS.pyx":579
 *         conv_filename = __Py_str_to_string(filename)
 *         self.inst.load(deref(conv_filename.conv()))
 *         return self             # <<<<<<<<<<<<<<
 *     def exists (self, String key):
 *         _result =  self.inst.exists(deref(key.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.Param.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":580
 *         self.inst.load(deref(conv_filename.conv()))
 *         return self
 *     def exists (self, String key):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.exists(deref(key.inst))
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_4exists(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_4exists(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exists");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":581
 *         return self
 *     def exists (self, String key):
 *         _result =  self.inst.exists(deref(key.inst))             # <<<<<<<<<<<<<<
 *         return _result
 *     def getDescription (self, String key):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->exists((*((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_key)->inst));

  /* "_pyOpenMS.pyx":582
 *     def exists (self, String key):
 *         _result =  self.inst.exists(deref(key.inst))
 *         return _result             # <<<<<<<<<<<<<<
 *     def getDescription (self, String key):
 *         _result =  self.inst.getDescription(deref(key.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Param.exists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":583
 *         _result =  self.inst.exists(deref(key.inst))
 *         return _result
 *     def getDescription (self, String key):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getDescription(deref(key.inst))
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_5getDescription(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_5getDescription(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDescription");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":584
 *         return _result
 *     def getDescription (self, String key):
 *         _result =  self.inst.getDescription(deref(key.inst))             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def setMaxInt (self, String key, int max):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->getDescription((*((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_key)->inst));

  /* "_pyOpenMS.pyx":585
 *     def getDescription (self, String key):
 *         _result =  self.inst.getDescription(deref(key.inst))
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def setMaxInt (self, String key, int max):
 *         self.inst.setMaxInt(deref(key.inst), max)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Param.getDescription", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":586
 *         _result =  self.inst.getDescription(deref(key.inst))
 *         return conv_string_to_py(_result)
 *     def setMaxInt (self, String key, int max):             # <<<<<<<<<<<<<<
 *         self.inst.setMaxInt(deref(key.inst), max)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_6setMaxInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_6setMaxInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  int __pyx_v_max;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__max,0};
  __Pyx_RefNannySetupContext("setMaxInt");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMaxInt", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setMaxInt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_max = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_max == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMaxInt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setMaxInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":587
 *         return conv_string_to_py(_result)
 *     def setMaxInt (self, String key, int max):
 *         self.inst.setMaxInt(deref(key.inst), max)             # <<<<<<<<<<<<<<
 *         return self
 *     def setMinInt (self, String key, int min):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->setMaxInt((*__pyx_v_key->inst), __pyx_v_max);

  /* "_pyOpenMS.pyx":588
 *     def setMaxInt (self, String key, int max):
 *         self.inst.setMaxInt(deref(key.inst), max)
 *         return self             # <<<<<<<<<<<<<<
 *     def setMinInt (self, String key, int min):
 *         self.inst.setMinInt(deref(key.inst), min)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setMaxInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":589
 *         self.inst.setMaxInt(deref(key.inst), max)
 *         return self
 *     def setMinInt (self, String key, int min):             # <<<<<<<<<<<<<<
 *         self.inst.setMinInt(deref(key.inst), min)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_7setMinInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_7setMinInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  int __pyx_v_min;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__min,0};
  __Pyx_RefNannySetupContext("setMinInt");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMinInt", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setMinInt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_min = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_min == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMinInt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setMinInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":590
 *         return self
 *     def setMinInt (self, String key, int min):
 *         self.inst.setMinInt(deref(key.inst), min)             # <<<<<<<<<<<<<<
 *         return self
 *     def size (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->setMinInt((*__pyx_v_key->inst), __pyx_v_min);

  /* "_pyOpenMS.pyx":591
 *     def setMinInt (self, String key, int min):
 *         self.inst.setMinInt(deref(key.inst), min)
 *         return self             # <<<<<<<<<<<<<<
 *     def size (self, ):
 *         _result =  self.inst.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setMinInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":592
 *         self.inst.setMinInt(deref(key.inst), min)
 *         return self
 *     def size (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.size()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_8size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_8size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "_pyOpenMS.pyx":593
 *         return self
 *     def size (self, ):
 *         _result =  self.inst.size()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setMinFloat (self, String key, float min):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->size();

  /* "_pyOpenMS.pyx":594
 *     def size (self, ):
 *         _result =  self.inst.size()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setMinFloat (self, String key, float min):
 *         self.inst.setMinFloat(deref(key.inst), min)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Param.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":595
 *         _result =  self.inst.size()
 *         return _result
 *     def setMinFloat (self, String key, float min):             # <<<<<<<<<<<<<<
 *         self.inst.setMinFloat(deref(key.inst), min)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_9setMinFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_9setMinFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  float __pyx_v_min;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__min,0};
  __Pyx_RefNannySetupContext("setMinFloat");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMinFloat", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setMinFloat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_min = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_min == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMinFloat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setMinFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":596
 *         return _result
 *     def setMinFloat (self, String key, float min):
 *         self.inst.setMinFloat(deref(key.inst), min)             # <<<<<<<<<<<<<<
 *         return self
 *     def setValidStrings (self, String key, list strings):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->setMinFloat((*__pyx_v_key->inst), __pyx_v_min);

  /* "_pyOpenMS.pyx":597
 *     def setMinFloat (self, String key, float min):
 *         self.inst.setMinFloat(deref(key.inst), min)
 *         return self             # <<<<<<<<<<<<<<
 *     def setValidStrings (self, String key, list strings):
 *         cdef __Py_list_to_vector_Br__String_Br_ conv_strings
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setMinFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":598
 *         self.inst.setMinFloat(deref(key.inst), min)
 *         return self
 *     def setValidStrings (self, String key, list strings):             # <<<<<<<<<<<<<<
 *         cdef __Py_list_to_vector_Br__String_Br_ conv_strings
 *         conv_strings = __Py_list_to_vector_Br__String_Br_(strings)
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_10setValidStrings(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_10setValidStrings(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  PyObject *__pyx_v_strings = 0;
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *__pyx_v_conv_strings = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__strings,0};
  __Pyx_RefNannySetupContext("setValidStrings");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__strings);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setValidStrings", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValidStrings") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_strings = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValidStrings", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setValidStrings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strings), (&PyList_Type), 1, "strings", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":600
 *     def setValidStrings (self, String key, list strings):
 *         cdef __Py_list_to_vector_Br__String_Br_ conv_strings
 *         conv_strings = __Py_list_to_vector_Br__String_Br_(strings)             # <<<<<<<<<<<<<<
 *         self.inst.setValidStrings(deref(key.inst), deref(conv_strings.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_strings));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_strings));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_strings));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br__String_Br_)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_strings = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":601
 *         cdef __Py_list_to_vector_Br__String_Br_ conv_strings
 *         conv_strings = __Py_list_to_vector_Br__String_Br_(strings)
 *         self.inst.setValidStrings(deref(key.inst), deref(conv_strings.conv()))             # <<<<<<<<<<<<<<
 *         return self
 *     def getSectionDescription (self, String key):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->setValidStrings((*__pyx_v_key->inst), (*((struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *)__pyx_v_conv_strings->__pyx_vtab)->conv(__pyx_v_conv_strings)));

  /* "_pyOpenMS.pyx":602
 *         conv_strings = __Py_list_to_vector_Br__String_Br_(strings)
 *         self.inst.setValidStrings(deref(key.inst), deref(conv_strings.conv()))
 *         return self             # <<<<<<<<<<<<<<
 *     def getSectionDescription (self, String key):
 *         _result =  self.inst.getSectionDescription(deref(key.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.Param.setValidStrings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_strings);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":603
 *         self.inst.setValidStrings(deref(key.inst), deref(conv_strings.conv()))
 *         return self
 *     def getSectionDescription (self, String key):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getSectionDescription(deref(key.inst))
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_11getSectionDescription(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_11getSectionDescription(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSectionDescription");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":604
 *         return self
 *     def getSectionDescription (self, String key):
 *         _result =  self.inst.getSectionDescription(deref(key.inst))             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def hasTag (self, String key, String tag):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->getSectionDescription((*((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_key)->inst));

  /* "_pyOpenMS.pyx":605
 *     def getSectionDescription (self, String key):
 *         _result =  self.inst.getSectionDescription(deref(key.inst))
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def hasTag (self, String key, String tag):
 *         _result =  self.inst.hasTag(deref(key.inst), deref(tag.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Param.getSectionDescription", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":606
 *         _result =  self.inst.getSectionDescription(deref(key.inst))
 *         return conv_string_to_py(_result)
 *     def hasTag (self, String key, String tag):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.hasTag(deref(key.inst), deref(tag.inst))
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_12hasTag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_12hasTag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_tag = 0;
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__tag,0};
  __Pyx_RefNannySetupContext("hasTag");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tag);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hasTag", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "hasTag") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_tag = ((struct __pyx_obj_9_pyOpenMS_String *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hasTag", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.hasTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tag), __pyx_ptype_9_pyOpenMS_String, 1, "tag", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":607
 *         return conv_string_to_py(_result)
 *     def hasTag (self, String key, String tag):
 *         _result =  self.inst.hasTag(deref(key.inst), deref(tag.inst))             # <<<<<<<<<<<<<<
 *         return _result
 *     def empty (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->hasTag((*__pyx_v_key->inst), (*__pyx_v_tag->inst));

  /* "_pyOpenMS.pyx":608
 *     def hasTag (self, String key, String tag):
 *         _result =  self.inst.hasTag(deref(key.inst), deref(tag.inst))
 *         return _result             # <<<<<<<<<<<<<<
 *     def empty (self, ):
 *         _result =  self.inst.empty()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Param.hasTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":609
 *         _result =  self.inst.hasTag(deref(key.inst), deref(tag.inst))
 *         return _result
 *     def empty (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.empty()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_13empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("empty");

  /* "_pyOpenMS.pyx":610
 *         return _result
 *     def empty (self, ):
 *         _result =  self.inst.empty()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setValue (self, String key, DataValue val, String desc, StringList tags):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->empty();

  /* "_pyOpenMS.pyx":611
 *     def empty (self, ):
 *         _result =  self.inst.empty()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setValue (self, String key, DataValue val, String desc, StringList tags):
 *         self.inst.setValue(deref(key.inst), deref(val.inst), deref(desc.inst), deref(tags.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Param.empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":612
 *         _result =  self.inst.empty()
 *         return _result
 *     def setValue (self, String key, DataValue val, String desc, StringList tags):             # <<<<<<<<<<<<<<
 *         self.inst.setValue(deref(key.inst), deref(val.inst), deref(desc.inst), deref(tags.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_14setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_14setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  struct __pyx_obj_9_pyOpenMS_DataValue *__pyx_v_val = 0;
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_desc = 0;
  struct __pyx_obj_9_pyOpenMS_StringList *__pyx_v_tags = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__val,&__pyx_n_s__desc,&__pyx_n_s__tags,0};
  __Pyx_RefNannySetupContext("setValue");
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setValue", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__desc);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setValue", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tags);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setValue", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_val = ((struct __pyx_obj_9_pyOpenMS_DataValue *)values[1]);
    __pyx_v_desc = ((struct __pyx_obj_9_pyOpenMS_String *)values[2]);
    __pyx_v_tags = ((struct __pyx_obj_9_pyOpenMS_StringList *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValue", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_val), __pyx_ptype_9_pyOpenMS_DataValue, 1, "val", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_desc), __pyx_ptype_9_pyOpenMS_String, 1, "desc", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tags), __pyx_ptype_9_pyOpenMS_StringList, 1, "tags", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":613
 *         return _result
 *     def setValue (self, String key, DataValue val, String desc, StringList tags):
 *         self.inst.setValue(deref(key.inst), deref(val.inst), deref(desc.inst), deref(tags.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def addTags (self, String key, StringList tags):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->setValue((*__pyx_v_key->inst), (*__pyx_v_val->inst), (*__pyx_v_desc->inst), (*__pyx_v_tags->inst));

  /* "_pyOpenMS.pyx":614
 *     def setValue (self, String key, DataValue val, String desc, StringList tags):
 *         self.inst.setValue(deref(key.inst), deref(val.inst), deref(desc.inst), deref(tags.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def addTags (self, String key, StringList tags):
 *         self.inst.addTags(deref(key.inst), deref(tags.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":615
 *         self.inst.setValue(deref(key.inst), deref(val.inst), deref(desc.inst), deref(tags.inst))
 *         return self
 *     def addTags (self, String key, StringList tags):             # <<<<<<<<<<<<<<
 *         self.inst.addTags(deref(key.inst), deref(tags.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_15addTags(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_15addTags(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  struct __pyx_obj_9_pyOpenMS_StringList *__pyx_v_tags = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__tags,0};
  __Pyx_RefNannySetupContext("addTags");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tags);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addTags", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addTags") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_tags = ((struct __pyx_obj_9_pyOpenMS_StringList *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addTags", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.addTags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tags), __pyx_ptype_9_pyOpenMS_StringList, 1, "tags", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":616
 *         return self
 *     def addTags (self, String key, StringList tags):
 *         self.inst.addTags(deref(key.inst), deref(tags.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def copy (self, String prefix, int remove_prefix):
 */
  try {((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->addTags((*__pyx_v_key->inst), (*__pyx_v_tags->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":617
 *     def addTags (self, String key, StringList tags):
 *         self.inst.addTags(deref(key.inst), deref(tags.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def copy (self, String prefix, int remove_prefix):
 *         _result =  self.inst.copy(deref(prefix.inst), remove_prefix)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.addTags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":618
 *         self.inst.addTags(deref(key.inst), deref(tags.inst))
 *         return self
 *     def copy (self, String prefix, int remove_prefix):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.copy(deref(prefix.inst), remove_prefix)
 *         return conv__Param_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_16copy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_16copy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_prefix = 0;
  int __pyx_v_remove_prefix;
  OpenMS::Param __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__prefix,&__pyx_n_s__remove_prefix,0};
  __Pyx_RefNannySetupContext("copy");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prefix);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__remove_prefix);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "copy") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_prefix = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_remove_prefix = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_remove_prefix == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), __pyx_ptype_9_pyOpenMS_String, 1, "prefix", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":619
 *         return self
 *     def copy (self, String prefix, int remove_prefix):
 *         _result =  self.inst.copy(deref(prefix.inst), remove_prefix)             # <<<<<<<<<<<<<<
 *         return conv__Param_to_py(_result)
 *     def getTags (self, String key):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->copy((*__pyx_v_prefix->inst), __pyx_v_remove_prefix);

  /* "_pyOpenMS.pyx":620
 *     def copy (self, String prefix, int remove_prefix):
 *         _result =  self.inst.copy(deref(prefix.inst), remove_prefix)
 *         return conv__Param_to_py(_result)             # <<<<<<<<<<<<<<
 *     def getTags (self, String key):
 *         _result =  self.inst.getTags(deref(key.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv__Param_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Param.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":621
 *         _result =  self.inst.copy(deref(prefix.inst), remove_prefix)
 *         return conv__Param_to_py(_result)
 *     def getTags (self, String key):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getTags(deref(key.inst))
 *         return conv__StringList_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_17getTags(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_17getTags(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  OpenMS::StringList __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTags");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":622
 *         return conv__Param_to_py(_result)
 *     def getTags (self, String key):
 *         _result =  self.inst.getTags(deref(key.inst))             # <<<<<<<<<<<<<<
 *         return conv__StringList_to_py(_result)
 *     def insert (self, String prefix, Param param):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->getTags((*((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_key)->inst));

  /* "_pyOpenMS.pyx":623
 *     def getTags (self, String key):
 *         _result =  self.inst.getTags(deref(key.inst))
 *         return conv__StringList_to_py(_result)             # <<<<<<<<<<<<<<
 *     def insert (self, String prefix, Param param):
 *         self.inst.insert(deref(prefix.inst), deref(param.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv__StringList_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Param.getTags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":624
 *         _result =  self.inst.getTags(deref(key.inst))
 *         return conv__StringList_to_py(_result)
 *     def insert (self, String prefix, Param param):             # <<<<<<<<<<<<<<
 *         self.inst.insert(deref(prefix.inst), deref(param.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_18insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_18insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_prefix = 0;
  struct __pyx_obj_9_pyOpenMS_Param *__pyx_v_param = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__prefix,&__pyx_n_s__param,0};
  __Pyx_RefNannySetupContext("insert");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prefix);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__param);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "insert") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_prefix = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_param = ((struct __pyx_obj_9_pyOpenMS_Param *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), __pyx_ptype_9_pyOpenMS_String, 1, "prefix", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_param), __pyx_ptype_9_pyOpenMS_Param, 1, "param", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":625
 *         return conv__StringList_to_py(_result)
 *     def insert (self, String prefix, Param param):
 *         self.inst.insert(deref(prefix.inst), deref(param.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def clear (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->insert((*__pyx_v_prefix->inst), (*__pyx_v_param->inst));

  /* "_pyOpenMS.pyx":626
 *     def insert (self, String prefix, Param param):
 *         self.inst.insert(deref(prefix.inst), deref(param.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def clear (self, ):
 *         self.inst.clear()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":627
 *         self.inst.insert(deref(prefix.inst), deref(param.inst))
 *         return self
 *     def clear (self, ):             # <<<<<<<<<<<<<<
 *         self.inst.clear()
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_19clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_19clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear");

  /* "_pyOpenMS.pyx":628
 *         return self
 *     def clear (self, ):
 *         self.inst.clear()             # <<<<<<<<<<<<<<
 *         return self
 *     def setMaxFloat (self, String key, float max):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->clear();

  /* "_pyOpenMS.pyx":629
 *     def clear (self, ):
 *         self.inst.clear()
 *         return self             # <<<<<<<<<<<<<<
 *     def setMaxFloat (self, String key, float max):
 *         self.inst.setMaxFloat(deref(key.inst), max)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":630
 *         self.inst.clear()
 *         return self
 *     def setMaxFloat (self, String key, float max):             # <<<<<<<<<<<<<<
 *         self.inst.setMaxFloat(deref(key.inst), max)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_20setMaxFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_20setMaxFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  float __pyx_v_max;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__max,0};
  __Pyx_RefNannySetupContext("setMaxFloat");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMaxFloat", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setMaxFloat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_max = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_max == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMaxFloat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setMaxFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":631
 *         return self
 *     def setMaxFloat (self, String key, float max):
 *         self.inst.setMaxFloat(deref(key.inst), max)             # <<<<<<<<<<<<<<
 *         return self
 *     def remove (self, String key):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->setMaxFloat((*__pyx_v_key->inst), __pyx_v_max);

  /* "_pyOpenMS.pyx":632
 *     def setMaxFloat (self, String key, float max):
 *         self.inst.setMaxFloat(deref(key.inst), max)
 *         return self             # <<<<<<<<<<<<<<
 *     def remove (self, String key):
 *         self.inst.remove(deref(key.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setMaxFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":633
 *         self.inst.setMaxFloat(deref(key.inst), max)
 *         return self
 *     def remove (self, String key):             # <<<<<<<<<<<<<<
 *         self.inst.remove(deref(key.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_21remove(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_21remove(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":634
 *         return self
 *     def remove (self, String key):
 *         self.inst.remove(deref(key.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def getValue (self, String key):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->remove((*((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_key)->inst));

  /* "_pyOpenMS.pyx":635
 *     def remove (self, String key):
 *         self.inst.remove(deref(key.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def getValue (self, String key):
 *         _result =  self.inst.getValue(deref(key.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":636
 *         self.inst.remove(deref(key.inst))
 *         return self
 *     def getValue (self, String key):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getValue(deref(key.inst))
 *         return conv__DataValue_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_22getValue(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_22getValue(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  OpenMS::DataValue __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValue");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":637
 *         return self
 *     def getValue (self, String key):
 *         _result =  self.inst.getValue(deref(key.inst))             # <<<<<<<<<<<<<<
 *         return conv__DataValue_to_py(_result)
 *     def removeAll (self, String prefix):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->getValue((*((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_key)->inst));

  /* "_pyOpenMS.pyx":638
 *     def getValue (self, String key):
 *         _result =  self.inst.getValue(deref(key.inst))
 *         return conv__DataValue_to_py(_result)             # <<<<<<<<<<<<<<
 *     def removeAll (self, String prefix):
 *         self.inst.removeAll(deref(prefix.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv__DataValue_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Param.getValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":639
 *         _result =  self.inst.getValue(deref(key.inst))
 *         return conv__DataValue_to_py(_result)
 *     def removeAll (self, String prefix):             # <<<<<<<<<<<<<<
 *         self.inst.removeAll(deref(prefix.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_23removeAll(PyObject *__pyx_v_self, PyObject *__pyx_v_prefix); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_23removeAll(PyObject *__pyx_v_self, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeAll");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), __pyx_ptype_9_pyOpenMS_String, 1, "prefix", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":640
 *         return conv__DataValue_to_py(_result)
 *     def removeAll (self, String prefix):
 *         self.inst.removeAll(deref(prefix.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def clearTags (self, String key):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->removeAll((*((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_prefix)->inst));

  /* "_pyOpenMS.pyx":641
 *     def removeAll (self, String prefix):
 *         self.inst.removeAll(deref(prefix.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def clearTags (self, String key):
 *         self.inst.clearTags(deref(key.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.removeAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":642
 *         self.inst.removeAll(deref(prefix.inst))
 *         return self
 *     def clearTags (self, String key):             # <<<<<<<<<<<<<<
 *         self.inst.clearTags(deref(key.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_24clearTags(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_24clearTags(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clearTags");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":643
 *         return self
 *     def clearTags (self, String key):
 *         self.inst.clearTags(deref(key.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def store (self, str filename):
 */
  try {((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->clearTags((*((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_key)->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":644
 *     def clearTags (self, String key):
 *         self.inst.clearTags(deref(key.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def store (self, str filename):
 *         cdef __Py_str_to_string conv_filename
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.clearTags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":645
 *         self.inst.clearTags(deref(key.inst))
 *         return self
 *     def store (self, str filename):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_filename
 *         conv_filename = __Py_str_to_string(filename)
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_25store(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_25store(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_filename = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("store");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyString_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":647
 *     def store (self, str filename):
 *         cdef __Py_str_to_string conv_filename
 *         conv_filename = __Py_str_to_string(filename)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(conv_filename.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_filename));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_filename));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_filename));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_filename = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":648
 *         cdef __Py_str_to_string conv_filename
 *         conv_filename = __Py_str_to_string(filename)
 *         self.inst.store(deref(conv_filename.conv()))             # <<<<<<<<<<<<<<
 *         return self
 *     def setSectionDescription (self, String key, String desc):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->store((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_filename->__pyx_vtab)->conv(__pyx_v_conv_filename)));

  /* "_pyOpenMS.pyx":649
 *         conv_filename = __Py_str_to_string(filename)
 *         self.inst.store(deref(conv_filename.conv()))
 *         return self             # <<<<<<<<<<<<<<
 *     def setSectionDescription (self, String key, String desc):
 *         self.inst.setSectionDescription(deref(key.inst), deref(desc.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.Param.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":650
 *         self.inst.store(deref(conv_filename.conv()))
 *         return self
 *     def setSectionDescription (self, String key, String desc):             # <<<<<<<<<<<<<<
 *         self.inst.setSectionDescription(deref(key.inst), deref(desc.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_26setSectionDescription(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_26setSectionDescription(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_desc = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__desc,0};
  __Pyx_RefNannySetupContext("setSectionDescription");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__desc);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setSectionDescription", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setSectionDescription") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_desc = ((struct __pyx_obj_9_pyOpenMS_String *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSectionDescription", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setSectionDescription", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_desc), __pyx_ptype_9_pyOpenMS_String, 1, "desc", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":651
 *         return self
 *     def setSectionDescription (self, String key, String desc):
 *         self.inst.setSectionDescription(deref(key.inst), deref(desc.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def addTag (self, String key, String tag):
 */
  ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->setSectionDescription((*__pyx_v_key->inst), (*__pyx_v_desc->inst));

  /* "_pyOpenMS.pyx":652
 *     def setSectionDescription (self, String key, String desc):
 *         self.inst.setSectionDescription(deref(key.inst), deref(desc.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def addTag (self, String key, String tag):
 *         self.inst.addTag(deref(key.inst), deref(tag.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.setSectionDescription", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":653
 *         self.inst.setSectionDescription(deref(key.inst), deref(desc.inst))
 *         return self
 *     def addTag (self, String key, String tag):             # <<<<<<<<<<<<<<
 *         self.inst.addTag(deref(key.inst), deref(tag.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_5Param_27addTag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_5Param_27addTag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_key = 0;
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_tag = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__tag,0};
  __Pyx_RefNannySetupContext("addTag");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tag);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addTag", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addTag") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9_pyOpenMS_String *)values[0]);
    __pyx_v_tag = ((struct __pyx_obj_9_pyOpenMS_String *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addTag", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.addTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9_pyOpenMS_String, 1, "key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tag), __pyx_ptype_9_pyOpenMS_String, 1, "tag", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":654
 *         return self
 *     def addTag (self, String key, String tag):
 *         self.inst.addTag(deref(key.inst), deref(tag.inst))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_v_self)->inst->addTag((*__pyx_v_key->inst), (*__pyx_v_tag->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":655
 *     def addTag (self, String key, String tag):
 *         self.inst.addTag(deref(key.inst), deref(tag.inst))
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class String:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.Param.addTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":662
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_6String___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_6String___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":663
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _String * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":665
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _String * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_6String__set_inst(struct __pyx_obj_9_pyOpenMS_String *__pyx_v_self, OpenMS::String *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":666
 * 
 *     cdef _set_inst(self, _String * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":667
 *     cdef _set_inst(self, _String * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":668
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":670
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_6String_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_6String_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":671
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":672
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":675
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_6String_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_6String_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":676
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":677
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":678
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":681
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":682
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_String *)((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":683
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":686
 * 
 * 
 *         if self._cons_sig == ["str"]:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_str(a[0])
 *             return
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__str));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__str));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__str));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":687
 * 
 *         if self._cons_sig == ["str"]:
 *             self.__subcons_for_str(a[0])             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    if (!(likely(PyString_CheckExact(PyTuple_GET_ITEM(__pyx_v_a, 0)))||((PyTuple_GET_ITEM(__pyx_v_a, 0)) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected str, got %.200s", Py_TYPE(PyTuple_GET_ITEM(__pyx_v_a, 0))->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_a, 0);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_String *)((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->__pyx_vtab)->__subcons_for_str(((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":688
 *         if self._cons_sig == ["str"]:
 *             self.__subcons_for_str(a[0])
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_pyOpenMS.pyx":690
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _String()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_20), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.String.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":691
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _String()
 *     cdef __subcons_for_str(self, str a0):
 */

static PyObject *__pyx_f_9_pyOpenMS_6String___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_String *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":692
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _String()             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_str(self, str a0):
 *         cdef __Py_str_to_char__ptr__ conv_a0
 */
  __pyx_v_self->inst = new OpenMS::String();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":693
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _String()
 *     cdef __subcons_for_str(self, str a0):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_char__ptr__ conv_a0
 *         conv_a0 = __Py_str_to_char__ptr__(a0)
 */

static PyObject *__pyx_f_9_pyOpenMS_6String___subcons_for_str(struct __pyx_obj_9_pyOpenMS_String *__pyx_v_self, PyObject *__pyx_v_a0) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *__pyx_v_conv_a0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__subcons_for_str");

  /* "_pyOpenMS.pyx":695
 *     cdef __subcons_for_str(self, str a0):
 *         cdef __Py_str_to_char__ptr__ conv_a0
 *         conv_a0 = __Py_str_to_char__ptr__(a0)             # <<<<<<<<<<<<<<
 *         self.inst = new _String(conv_a0.conv())
 *     def c_str (self, ):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_a0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_a0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_char__ptr__)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_a0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":696
 *         cdef __Py_str_to_char__ptr__ conv_a0
 *         conv_a0 = __Py_str_to_char__ptr__(a0)
 *         self.inst = new _String(conv_a0.conv())             # <<<<<<<<<<<<<<
 *     def c_str (self, ):
 *         _result = <char *> self.inst.c_str()
 */
  __pyx_v_self->inst = new OpenMS::String(((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_char__ptr__ *)__pyx_v_conv_a0->__pyx_vtab)->conv(__pyx_v_conv_a0));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.String.__subcons_for_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_a0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":697
 *         conv_a0 = __Py_str_to_char__ptr__(a0)
 *         self.inst = new _String(conv_a0.conv())
 *     def c_str (self, ):             # <<<<<<<<<<<<<<
 *         _result = <char *> self.inst.c_str()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_6String_3c_str(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_6String_3c_str(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  char *__pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_str");

  /* "_pyOpenMS.pyx":698
 *         self.inst = new _String(conv_a0.conv())
 *     def c_str (self, ):
 *         _result = <char *> self.inst.c_str()             # <<<<<<<<<<<<<<
 *         return _result
 * 
 */
  __pyx_v__result = ((char *)((struct __pyx_obj_9_pyOpenMS_String *)__pyx_v_self)->inst->c_str());

  /* "_pyOpenMS.pyx":699
 *     def c_str (self, ):
 *         _result = <char *> self.inst.c_str()
 *         return _result             # <<<<<<<<<<<<<<
 * 
 * cdef class SourceFile:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.String.c_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":706
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_10SourceFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10SourceFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":707
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _SourceFile * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":709
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _SourceFile * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_10SourceFile__set_inst(struct __pyx_obj_9_pyOpenMS_SourceFile *__pyx_v_self, OpenMS::SourceFile *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":710
 * 
 *     cdef _set_inst(self, _SourceFile * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":711
 *     cdef _set_inst(self, _SourceFile * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":712
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":714
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_10SourceFile_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_10SourceFile_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":715
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":716
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":719
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_10SourceFile_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10SourceFile_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":720
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":721
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":722
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":725
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":726
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_SourceFile *)((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":727
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":729
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _SourceFile()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_21), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":730
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _SourceFile()
 *     def setNativeIDType (self, str arg0):
 */

static PyObject *__pyx_f_9_pyOpenMS_10SourceFile___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_SourceFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":731
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _SourceFile()             # <<<<<<<<<<<<<<
 *     def setNativeIDType (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 */
  __pyx_v_self->inst = new OpenMS::SourceFile();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":732
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _SourceFile()
 *     def setNativeIDType (self, str arg0):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_3setNativeIDType(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_3setNativeIDType(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNativeIDType");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":734
 *     def setNativeIDType (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.setNativeIDType(deref(conv_arg0.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":735
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setNativeIDType(deref(conv_arg0.conv()))             # <<<<<<<<<<<<<<
 *         return self
 *     def getChecksum (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->setNativeIDType((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)));

  /* "_pyOpenMS.pyx":736
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setNativeIDType(deref(conv_arg0.conv()))
 *         return self             # <<<<<<<<<<<<<<
 *     def getChecksum (self, ):
 *         _result =  self.inst.getChecksum()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.setNativeIDType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":737
 *         self.inst.setNativeIDType(deref(conv_arg0.conv()))
 *         return self
 *     def getChecksum (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getChecksum()
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_4getChecksum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_4getChecksum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChecksum");

  /* "_pyOpenMS.pyx":738
 *         return self
 *     def getChecksum (self, ):
 *         _result =  self.inst.getChecksum()             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def getNativeIDType (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->getChecksum();

  /* "_pyOpenMS.pyx":739
 *     def getChecksum (self, ):
 *         _result =  self.inst.getChecksum()
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def getNativeIDType (self, ):
 *         _result =  self.inst.getNativeIDType()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.getChecksum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":740
 *         _result =  self.inst.getChecksum()
 *         return conv_string_to_py(_result)
 *     def getNativeIDType (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getNativeIDType()
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_5getNativeIDType(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_5getNativeIDType(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNativeIDType");

  /* "_pyOpenMS.pyx":741
 *         return conv_string_to_py(_result)
 *     def getNativeIDType (self, ):
 *         _result =  self.inst.getNativeIDType()             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def setFileType (self, str arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->getNativeIDType();

  /* "_pyOpenMS.pyx":742
 *     def getNativeIDType (self, ):
 *         _result =  self.inst.getNativeIDType()
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def setFileType (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.getNativeIDType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":743
 *         _result =  self.inst.getNativeIDType()
 *         return conv_string_to_py(_result)
 *     def setFileType (self, str arg0):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_6setFileType(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_6setFileType(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setFileType");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":745
 *     def setFileType (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.setFileType(deref(conv_arg0.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":746
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setFileType(deref(conv_arg0.conv()))             # <<<<<<<<<<<<<<
 *         return self
 *     def getFileSize (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->setFileType((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)));

  /* "_pyOpenMS.pyx":747
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setFileType(deref(conv_arg0.conv()))
 *         return self             # <<<<<<<<<<<<<<
 *     def getFileSize (self, ):
 *         _result =  self.inst.getFileSize()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.setFileType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":748
 *         self.inst.setFileType(deref(conv_arg0.conv()))
 *         return self
 *     def getFileSize (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getFileSize()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_7getFileSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_7getFileSize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v__result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFileSize");

  /* "_pyOpenMS.pyx":749
 *         return self
 *     def getFileSize (self, ):
 *         _result =  self.inst.getFileSize()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setNameOfFile (self, str arg0):
 */
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->getFileSize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":750
 *     def getFileSize (self, ):
 *         _result =  self.inst.getFileSize()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setNameOfFile (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__result);
  __pyx_r = __pyx_v__result;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.getFileSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":751
 *         _result =  self.inst.getFileSize()
 *         return _result
 *     def setNameOfFile (self, str arg0):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_8setNameOfFile(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_8setNameOfFile(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNameOfFile");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":753
 *     def setNameOfFile (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.setNameOfFile(deref(conv_arg0.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":754
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setNameOfFile(deref(conv_arg0.conv()))             # <<<<<<<<<<<<<<
 *         return self
 *     def getPathToFile (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->setNameOfFile((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)));

  /* "_pyOpenMS.pyx":755
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setNameOfFile(deref(conv_arg0.conv()))
 *         return self             # <<<<<<<<<<<<<<
 *     def getPathToFile (self, ):
 *         _result =  self.inst.getPathToFile()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.setNameOfFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":756
 *         self.inst.setNameOfFile(deref(conv_arg0.conv()))
 *         return self
 *     def getPathToFile (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getPathToFile()
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_9getPathToFile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_9getPathToFile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPathToFile");

  /* "_pyOpenMS.pyx":757
 *         return self
 *     def getPathToFile (self, ):
 *         _result =  self.inst.getPathToFile()             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def setPathToFile (self, str arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->getPathToFile();

  /* "_pyOpenMS.pyx":758
 *     def getPathToFile (self, ):
 *         _result =  self.inst.getPathToFile()
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def setPathToFile (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.getPathToFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":759
 *         _result =  self.inst.getPathToFile()
 *         return conv_string_to_py(_result)
 *     def setPathToFile (self, str arg0):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_10setPathToFile(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_10setPathToFile(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPathToFile");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":761
 *     def setPathToFile (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.setPathToFile(deref(conv_arg0.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":762
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setPathToFile(deref(conv_arg0.conv()))             # <<<<<<<<<<<<<<
 *         return self
 *     def getFileType (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->setPathToFile((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)));

  /* "_pyOpenMS.pyx":763
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setPathToFile(deref(conv_arg0.conv()))
 *         return self             # <<<<<<<<<<<<<<
 *     def getFileType (self, ):
 *         _result =  self.inst.getFileType()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.setPathToFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":764
 *         self.inst.setPathToFile(deref(conv_arg0.conv()))
 *         return self
 *     def getFileType (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getFileType()
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_11getFileType(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_11getFileType(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFileType");

  /* "_pyOpenMS.pyx":765
 *         return self
 *     def getFileType (self, ):
 *         _result =  self.inst.getFileType()             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def setFileSize (self, float arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->getFileType();

  /* "_pyOpenMS.pyx":766
 *     def getFileType (self, ):
 *         _result =  self.inst.getFileType()
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def setFileSize (self, float arg0):
 *         self.inst.setFileSize(arg0)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.getFileType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":767
 *         _result =  self.inst.getFileType()
 *         return conv_string_to_py(_result)
 *     def setFileSize (self, float arg0):             # <<<<<<<<<<<<<<
 *         self.inst.setFileSize(arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_12setFileSize(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_12setFileSize(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  float __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setFileSize");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __pyx_PyFloat_AsDouble(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.setFileSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":768
 *         return conv_string_to_py(_result)
 *     def setFileSize (self, float arg0):
 *         self.inst.setFileSize(arg0)             # <<<<<<<<<<<<<<
 *         return self
 *     def getNameOfFile (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->setFileSize(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":769
 *     def setFileSize (self, float arg0):
 *         self.inst.setFileSize(arg0)
 *         return self             # <<<<<<<<<<<<<<
 *     def getNameOfFile (self, ):
 *         _result =  self.inst.getNameOfFile()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":770
 *         self.inst.setFileSize(arg0)
 *         return self
 *     def getNameOfFile (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getNameOfFile()
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_13getNameOfFile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_13getNameOfFile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNameOfFile");

  /* "_pyOpenMS.pyx":771
 *         return self
 *     def getNameOfFile (self, ):
 *         _result =  self.inst.getNameOfFile()             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def getChecksumType (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->getNameOfFile();

  /* "_pyOpenMS.pyx":772
 *     def getNameOfFile (self, ):
 *         _result =  self.inst.getNameOfFile()
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def getChecksumType (self, ):
 *         _result =  self.inst.getChecksumType()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.getNameOfFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":773
 *         _result =  self.inst.getNameOfFile()
 *         return conv_string_to_py(_result)
 *     def getChecksumType (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getChecksumType()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_14getChecksumType(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_14getChecksumType(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v__result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChecksumType");

  /* "_pyOpenMS.pyx":774
 *         return conv_string_to_py(_result)
 *     def getChecksumType (self, ):
 *         _result =  self.inst.getChecksumType()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setChecksum (self, str arg0, int arg1):
 */
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->getChecksumType()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":775
 *     def getChecksumType (self, ):
 *         _result =  self.inst.getChecksumType()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setChecksum (self, str arg0, int arg1):
 *         cdef __Py_str_to_string conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__result);
  __pyx_r = __pyx_v__result;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.getChecksumType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":776
 *         _result =  self.inst.getChecksumType()
 *         return _result
 *     def setChecksum (self, str arg0, int arg1):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_15setChecksum(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10SourceFile_15setChecksum(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg0 = 0;
  int __pyx_v_arg1;
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  enum OpenMS::SourceFile::ChecksumType __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg0,&__pyx_n_s__arg1,0};
  __Pyx_RefNannySetupContext("setChecksum");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg0);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setChecksum", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setChecksum") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg0 = ((PyObject*)values[0]);
    __pyx_v_arg1 = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_arg1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setChecksum", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.setChecksum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":778
 *     def setChecksum (self, str arg0, int arg1):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.setChecksum(deref(conv_arg0.conv()), <ChecksumType>arg1)
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":779
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setChecksum(deref(conv_arg0.conv()), <ChecksumType>arg1)             # <<<<<<<<<<<<<<
 *         return self
 * cdef class ChecksumType:
 */
  __pyx_t_2 = PyInt_FromLong(__pyx_v_arg1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((enum OpenMS::SourceFile::ChecksumType)PyInt_AsLong(__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_self)->inst->setChecksum((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)), __pyx_t_3);

  /* "_pyOpenMS.pyx":780
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setChecksum(deref(conv_arg0.conv()), <ChecksumType>arg1)
 *         return self             # <<<<<<<<<<<<<<
 * cdef class ChecksumType:
 *     UNKNOWN_CHECKSUM=0
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.SourceFile.setChecksum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":792
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_9DataValue___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_9DataValue___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":793
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _DataValue * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":795
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _DataValue * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_9DataValue__set_inst(struct __pyx_obj_9_pyOpenMS_DataValue *__pyx_v_self, OpenMS::DataValue *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":796
 * 
 *     cdef _set_inst(self, _DataValue * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":797
 *     cdef _set_inst(self, _DataValue * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":798
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":800
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_9DataValue_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_9DataValue_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":801
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":802
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":805
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_9DataValue_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_9DataValue_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":806
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":807
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":808
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":811
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":812
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_DataValue *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":813
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":816
 * 
 * 
 *         if self._cons_sig == ["str"]:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_str(a[0])
 *             return
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__str));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__str));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__str));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":817
 * 
 *         if self._cons_sig == ["str"]:
 *             self.__subcons_for_str(a[0])             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    if (!(likely(PyString_CheckExact(PyTuple_GET_ITEM(__pyx_v_a, 0)))||((PyTuple_GET_ITEM(__pyx_v_a, 0)) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected str, got %.200s", Py_TYPE(PyTuple_GET_ITEM(__pyx_v_a, 0))->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_a, 0);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_DataValue *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->__pyx_vtab)->__subcons_for_str(((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":818
 *         if self._cons_sig == ["str"]:
 *             self.__subcons_for_str(a[0])
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_pyOpenMS.pyx":821
 * 
 * 
 *         if self._cons_sig == ["int"]:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_int(a[0])
 *             return
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__int));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__int));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__int));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":822
 * 
 *         if self._cons_sig == ["int"]:
 *             self.__subcons_for_int(a[0])             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_7 = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_v_a, 0)); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_DataValue *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->__pyx_vtab)->__subcons_for_int(((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self), __pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_pyOpenMS.pyx":823
 *         if self._cons_sig == ["int"]:
 *             self.__subcons_for_int(a[0])
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "_pyOpenMS.pyx":826
 * 
 * 
 *         if self._cons_sig == ["float"]:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_float(a[0])
 *             return
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__float));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__float));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__float));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":827
 * 
 *         if self._cons_sig == ["float"]:
 *             self.__subcons_for_float(a[0])             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_8 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v_a, 0)); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_DataValue *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->__pyx_vtab)->__subcons_for_float(((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self), __pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":828
 *         if self._cons_sig == ["float"]:
 *             self.__subcons_for_float(a[0])
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "_pyOpenMS.pyx":831
 * 
 * 
 *         if self._cons_sig == ["StringList"]:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_StringList(a[0])
 *             return
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__StringList));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__StringList));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__StringList));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":832
 * 
 *         if self._cons_sig == ["StringList"]:
 *             self.__subcons_for_StringList(a[0])             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    if (!(likely(((PyTuple_GET_ITEM(__pyx_v_a, 0)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v_a, 0), __pyx_ptype_9_pyOpenMS_StringList))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_a, 0);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_DataValue *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->__pyx_vtab)->__subcons_for_StringList(((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self), ((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":833
 *         if self._cons_sig == ["StringList"]:
 *             self.__subcons_for_StringList(a[0])
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L10;
  }
  __pyx_L10:;

  /* "_pyOpenMS.pyx":835
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _DataValue()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_22), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.DataValue.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":836
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _DataValue()
 *     cdef __subcons_for_str(self, str a0):
 */

static PyObject *__pyx_f_9_pyOpenMS_9DataValue___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_DataValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":837
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _DataValue()             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_str(self, str a0):
 *         cdef __Py_str_to_char__ptr__ conv_a0
 */
  __pyx_v_self->inst = new OpenMS::DataValue();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":838
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _DataValue()
 *     cdef __subcons_for_str(self, str a0):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_char__ptr__ conv_a0
 *         conv_a0 = __Py_str_to_char__ptr__(a0)
 */

static PyObject *__pyx_f_9_pyOpenMS_9DataValue___subcons_for_str(struct __pyx_obj_9_pyOpenMS_DataValue *__pyx_v_self, PyObject *__pyx_v_a0) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *__pyx_v_conv_a0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__subcons_for_str");

  /* "_pyOpenMS.pyx":840
 *     cdef __subcons_for_str(self, str a0):
 *         cdef __Py_str_to_char__ptr__ conv_a0
 *         conv_a0 = __Py_str_to_char__ptr__(a0)             # <<<<<<<<<<<<<<
 *         self.inst = new _DataValue(conv_a0.conv())
 *     cdef __subcons_for_int(self, int a0):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_a0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_a0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_char__ptr__)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_a0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":841
 *         cdef __Py_str_to_char__ptr__ conv_a0
 *         conv_a0 = __Py_str_to_char__ptr__(a0)
 *         self.inst = new _DataValue(conv_a0.conv())             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_int(self, int a0):
 *         self.inst = new _DataValue(a0)
 */
  __pyx_v_self->inst = new OpenMS::DataValue(((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_char__ptr__ *)__pyx_v_conv_a0->__pyx_vtab)->conv(__pyx_v_conv_a0));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.DataValue.__subcons_for_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_a0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":842
 *         conv_a0 = __Py_str_to_char__ptr__(a0)
 *         self.inst = new _DataValue(conv_a0.conv())
 *     cdef __subcons_for_int(self, int a0):             # <<<<<<<<<<<<<<
 *         self.inst = new _DataValue(a0)
 *     cdef __subcons_for_float(self, float a0):
 */

static PyObject *__pyx_f_9_pyOpenMS_9DataValue___subcons_for_int(struct __pyx_obj_9_pyOpenMS_DataValue *__pyx_v_self, int __pyx_v_a0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_int");

  /* "_pyOpenMS.pyx":843
 *         self.inst = new _DataValue(conv_a0.conv())
 *     cdef __subcons_for_int(self, int a0):
 *         self.inst = new _DataValue(a0)             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_float(self, float a0):
 *         self.inst = new _DataValue(a0)
 */
  __pyx_v_self->inst = new OpenMS::DataValue(__pyx_v_a0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":844
 *     cdef __subcons_for_int(self, int a0):
 *         self.inst = new _DataValue(a0)
 *     cdef __subcons_for_float(self, float a0):             # <<<<<<<<<<<<<<
 *         self.inst = new _DataValue(a0)
 *     cdef __subcons_for_StringList(self, StringList a0):
 */

static PyObject *__pyx_f_9_pyOpenMS_9DataValue___subcons_for_float(struct __pyx_obj_9_pyOpenMS_DataValue *__pyx_v_self, float __pyx_v_a0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_float");

  /* "_pyOpenMS.pyx":845
 *         self.inst = new _DataValue(a0)
 *     cdef __subcons_for_float(self, float a0):
 *         self.inst = new _DataValue(a0)             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_StringList(self, StringList a0):
 *         self.inst = new _DataValue(deref(a0.inst))
 */
  __pyx_v_self->inst = new OpenMS::DataValue(__pyx_v_a0);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":846
 *     cdef __subcons_for_float(self, float a0):
 *         self.inst = new _DataValue(a0)
 *     cdef __subcons_for_StringList(self, StringList a0):             # <<<<<<<<<<<<<<
 *         self.inst = new _DataValue(deref(a0.inst))
 *     def intValue(self):
 */

static PyObject *__pyx_f_9_pyOpenMS_9DataValue___subcons_for_StringList(struct __pyx_obj_9_pyOpenMS_DataValue *__pyx_v_self, struct __pyx_obj_9_pyOpenMS_StringList *__pyx_v_a0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_StringList");

  /* "_pyOpenMS.pyx":847
 *         self.inst = new _DataValue(a0)
 *     cdef __subcons_for_StringList(self, StringList a0):
 *         self.inst = new _DataValue(deref(a0.inst))             # <<<<<<<<<<<<<<
 *     def intValue(self):
 *         assert self._cons_sig == ['int'], 'type mismatch'
 */
  __pyx_v_self->inst = new OpenMS::DataValue((*__pyx_v_a0->inst));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":848
 *     cdef __subcons_for_StringList(self, StringList a0):
 *         self.inst = new _DataValue(deref(a0.inst))
 *     def intValue(self):             # <<<<<<<<<<<<<<
 *         assert self._cons_sig == ['int'], 'type mismatch'
 *         cdef int _result = <int>deref(self.inst)
 */

static PyObject *__pyx_pf_9_pyOpenMS_9DataValue_3intValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9DataValue_3intValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intValue");

  /* "_pyOpenMS.pyx":849
 *         self.inst = new _DataValue(deref(a0.inst))
 *     def intValue(self):
 *         assert self._cons_sig == ['int'], 'type mismatch'             # <<<<<<<<<<<<<<
 *         cdef int _result = <int>deref(self.inst)
 *         return _result
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__int));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__int));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__int));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) {
    PyErr_SetObject(PyExc_AssertionError, ((PyObject *)__pyx_kp_s_23));
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "_pyOpenMS.pyx":850
 *     def intValue(self):
 *         assert self._cons_sig == ['int'], 'type mismatch'
 *         cdef int _result = <int>deref(self.inst)             # <<<<<<<<<<<<<<
 *         return _result
 *     def stringValue(self):
 */
  __pyx_v__result = ((int)(*((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->inst));

  /* "_pyOpenMS.pyx":851
 *         assert self._cons_sig == ['int'], 'type mismatch'
 *         cdef int _result = <int>deref(self.inst)
 *         return _result             # <<<<<<<<<<<<<<
 *     def stringValue(self):
 *         assert self._cons_sig == ['str'], 'type mismatch'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.DataValue.intValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":852
 *         cdef int _result = <int>deref(self.inst)
 *         return _result
 *     def stringValue(self):             # <<<<<<<<<<<<<<
 *         assert self._cons_sig == ['str'], 'type mismatch'
 *         cdef string _result = <string>deref(self.inst)
 */

static PyObject *__pyx_pf_9_pyOpenMS_9DataValue_4stringValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9DataValue_4stringValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stringValue");

  /* "_pyOpenMS.pyx":853
 *         return _result
 *     def stringValue(self):
 *         assert self._cons_sig == ['str'], 'type mismatch'             # <<<<<<<<<<<<<<
 *         cdef string _result = <string>deref(self.inst)
 *         return conv_string_to_py(_result)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__str));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__str));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__str));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) {
    PyErr_SetObject(PyExc_AssertionError, ((PyObject *)__pyx_kp_s_23));
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "_pyOpenMS.pyx":854
 *     def stringValue(self):
 *         assert self._cons_sig == ['str'], 'type mismatch'
 *         cdef string _result = <string>deref(self.inst)             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def floatValue(self):
 */
  __pyx_v__result = ((std::string)(*((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->inst));

  /* "_pyOpenMS.pyx":855
 *         assert self._cons_sig == ['str'], 'type mismatch'
 *         cdef string _result = <string>deref(self.inst)
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def floatValue(self):
 *         assert self._cons_sig == ['float'], 'type mismatch'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.DataValue.stringValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":856
 *         cdef string _result = <string>deref(self.inst)
 *         return conv_string_to_py(_result)
 *     def floatValue(self):             # <<<<<<<<<<<<<<
 *         assert self._cons_sig == ['float'], 'type mismatch'
 *         cdef double _result = <double>deref(self.inst)
 */

static PyObject *__pyx_pf_9_pyOpenMS_9DataValue_5floatValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9DataValue_5floatValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("floatValue");

  /* "_pyOpenMS.pyx":857
 *         return conv_string_to_py(_result)
 *     def floatValue(self):
 *         assert self._cons_sig == ['float'], 'type mismatch'             # <<<<<<<<<<<<<<
 *         cdef double _result = <double>deref(self.inst)
 *         return _result
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__float));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__float));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__float));
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_1), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) {
    PyErr_SetObject(PyExc_AssertionError, ((PyObject *)__pyx_kp_s_23));
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "_pyOpenMS.pyx":858
 *     def floatValue(self):
 *         assert self._cons_sig == ['float'], 'type mismatch'
 *         cdef double _result = <double>deref(self.inst)             # <<<<<<<<<<<<<<
 *         return _result
 *     def stringList(self):
 */
  __pyx_v__result = ((double)(*((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->inst));

  /* "_pyOpenMS.pyx":859
 *         assert self._cons_sig == ['float'], 'type mismatch'
 *         cdef double _result = <double>deref(self.inst)
 *         return _result             # <<<<<<<<<<<<<<
 *     def stringList(self):
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.DataValue.floatValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":860
 *         cdef double _result = <double>deref(self.inst)
 *         return _result
 *     def stringList(self):             # <<<<<<<<<<<<<<
 * 
 *         cdef _StringList _result = <_StringList>deref(self.inst)
 */

static PyObject *__pyx_pf_9_pyOpenMS_9DataValue_6stringList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9DataValue_6stringList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  OpenMS::StringList __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stringList");

  /* "_pyOpenMS.pyx":862
 *     def stringList(self):
 * 
 *         cdef _StringList _result = <_StringList>deref(self.inst)             # <<<<<<<<<<<<<<
 *         return conv__StringList_to_py(_result)
 * 
 */
  __pyx_v__result = ((OpenMS::StringList)(*((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_v_self)->inst));

  /* "_pyOpenMS.pyx":863
 * 
 *         cdef _StringList _result = <_StringList>deref(self.inst)
 *         return conv__StringList_to_py(_result)             # <<<<<<<<<<<<<<
 * 
 * cdef class SavitzkyGolayFilter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv__StringList_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.DataValue.stringList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":870
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":871
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _SavitzkyGolayFilter * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":873
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _SavitzkyGolayFilter * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_19SavitzkyGolayFilter__set_inst(struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *__pyx_v_self, OpenMS::SavitzkyGolayFilter *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":874
 * 
 *     cdef _set_inst(self, _SavitzkyGolayFilter * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":875
 *     cdef _set_inst(self, _SavitzkyGolayFilter * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":876
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":878
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":879
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":880
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":883
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":884
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":885
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":886
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":889
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":890
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_SavitzkyGolayFilter *)((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":891
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":893
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _SavitzkyGolayFilter()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.SavitzkyGolayFilter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":894
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _SavitzkyGolayFilter()
 *     def filter (self, MSSpectrum arg0):
 */

static PyObject *__pyx_f_9_pyOpenMS_19SavitzkyGolayFilter___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":895
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _SavitzkyGolayFilter()             # <<<<<<<<<<<<<<
 *     def filter (self, MSSpectrum arg0):
 *         self.inst.filter(deref(arg0.inst))
 */
  __pyx_v_self->inst = new OpenMS::SavitzkyGolayFilter();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":896
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _SavitzkyGolayFilter()
 *     def filter (self, MSSpectrum arg0):             # <<<<<<<<<<<<<<
 *         self.inst.filter(deref(arg0.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_3filter(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_3filter(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), __pyx_ptype_9_pyOpenMS_MSSpectrum, 1, "arg0", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":897
 *         self.inst = new _SavitzkyGolayFilter()
 *     def filter (self, MSSpectrum arg0):
 *         self.inst.filter(deref(arg0.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def filterExperiment (self, MSExperiment arg0):
 */
  ((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->inst->filter((*((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_arg0)->inst));

  /* "_pyOpenMS.pyx":898
 *     def filter (self, MSSpectrum arg0):
 *         self.inst.filter(deref(arg0.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def filterExperiment (self, MSExperiment arg0):
 *         self.inst.filterExperiment(deref(arg0.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.SavitzkyGolayFilter.filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":899
 *         self.inst.filter(deref(arg0.inst))
 *         return self
 *     def filterExperiment (self, MSExperiment arg0):             # <<<<<<<<<<<<<<
 *         self.inst.filterExperiment(deref(arg0.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_4filterExperiment(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_4filterExperiment(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filterExperiment");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "arg0", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":900
 *         return self
 *     def filterExperiment (self, MSExperiment arg0):
 *         self.inst.filterExperiment(deref(arg0.inst))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  ((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)__pyx_v_self)->inst->filterExperiment((*((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_arg0)->inst));

  /* "_pyOpenMS.pyx":901
 *     def filterExperiment (self, MSExperiment arg0):
 *         self.inst.filterExperiment(deref(arg0.inst))
 *         return self             # <<<<<<<<<<<<<<
 * 
 * cdef class MSSpectrum:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.SavitzkyGolayFilter.filterExperiment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":908
 *     cdef list  _cons_sig
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 * 
 */

static int __pyx_pf_9_pyOpenMS_10MSSpectrum___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10MSSpectrum___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":909
 * 
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_inst(self, _MSSpectrum[_Peak1D] * inst):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":911
 *         self.inst = NULL
 * 
 *     cdef _set_inst(self, _MSSpectrum[_Peak1D] * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_10MSSpectrum__set_inst(struct __pyx_obj_9_pyOpenMS_MSSpectrum *__pyx_v_self, OpenMS::MSSpectrum<OpenMS::Peak1D> *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":912
 * 
 *     cdef _set_inst(self, _MSSpectrum[_Peak1D] * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":913
 *     cdef _set_inst(self, _MSSpectrum[_Peak1D] * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":914
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":916
 *         self.inst = inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_10MSSpectrum_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_10MSSpectrum_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":917
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":918
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":921
 * 
 * 
 *     def __init__(self, *a, **kw):             # <<<<<<<<<<<<<<
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 */

static int __pyx_pf_9_pyOpenMS_10MSSpectrum_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10MSSpectrum_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_kw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kw = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kw)) return -1;
  __Pyx_GOTREF(__pyx_v_kw);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_a = __pyx_args;

  /* "_pyOpenMS.pyx":922
 * 
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)             # <<<<<<<<<<<<<<
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___sig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->_cons_sig);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->_cons_sig));
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->_cons_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":923
 *     def __init__(self, *a, **kw):
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_a) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_a)); 
  __pyx_t_4 = (__pyx_t_3 == 0);
  if (__pyx_t_4) {
    if (unlikely(((PyObject *)__pyx_v_kw) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __Pyx_PyDict_GetItemDefault(((PyObject *)__pyx_v_kw), ((PyObject *)__pyx_n_s___new_inst), Py_None); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":924
 *         self._cons_sig = map(_sig, a)
 *         if len(a)==0 and kw.get("_new_inst") is False:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "_pyOpenMS.pyx":927
 * 
 * 
 *         if self._cons_sig == []:             # <<<<<<<<<<<<<<
 *             self.__subcons_for_nonarg()
 *             return
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->_cons_sig), ((PyObject *)__pyx_t_2), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "_pyOpenMS.pyx":928
 * 
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum *)((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->__pyx_vtab)->__subcons_for_nonarg(((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":929
 *         if self._cons_sig == []:
 *             self.__subcons_for_nonarg()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         raise Exception("input args do not match declaration")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_pyOpenMS.pyx":931
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MSSpectrum[_Peak1D]()
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_25), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_kw);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":932
 * 
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):             # <<<<<<<<<<<<<<
 *         self.inst = new _MSSpectrum[_Peak1D]()
 *     def getRT (self, ):
 */

static PyObject *__pyx_f_9_pyOpenMS_10MSSpectrum___subcons_for_nonarg(struct __pyx_obj_9_pyOpenMS_MSSpectrum *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__subcons_for_nonarg");

  /* "_pyOpenMS.pyx":933
 *         raise Exception("input args do not match declaration")
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MSSpectrum[_Peak1D]()             # <<<<<<<<<<<<<<
 *     def getRT (self, ):
 *         _result =  self.inst.getRT()
 */
  __pyx_v_self->inst = new OpenMS::MSSpectrum<OpenMS::Peak1D>();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":934
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MSSpectrum[_Peak1D]()
 *     def getRT (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getRT()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_3getRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_3getRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRT");

  /* "_pyOpenMS.pyx":935
 *         self.inst = new _MSSpectrum[_Peak1D]()
 *     def getRT (self, ):
 *         _result =  self.inst.getRT()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setSourceFile (self, SourceFile arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getRT();

  /* "_pyOpenMS.pyx":936
 *     def getRT (self, ):
 *         _result =  self.inst.getRT()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setSourceFile (self, SourceFile arg0):
 *         self.inst.setSourceFile(deref(arg0.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":937
 *         _result =  self.inst.getRT()
 *         return _result
 *     def setSourceFile (self, SourceFile arg0):             # <<<<<<<<<<<<<<
 *         self.inst.setSourceFile(deref(arg0.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_4setSourceFile(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_4setSourceFile(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSourceFile");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), __pyx_ptype_9_pyOpenMS_SourceFile, 1, "arg0", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":938
 *         return _result
 *     def setSourceFile (self, SourceFile arg0):
 *         self.inst.setSourceFile(deref(arg0.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def updateRanges (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setSourceFile((*((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_v_arg0)->inst));

  /* "_pyOpenMS.pyx":939
 *     def setSourceFile (self, SourceFile arg0):
 *         self.inst.setSourceFile(deref(arg0.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def updateRanges (self, ):
 *         self.inst.updateRanges()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setSourceFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":940
 *         self.inst.setSourceFile(deref(arg0.inst))
 *         return self
 *     def updateRanges (self, ):             # <<<<<<<<<<<<<<
 *         self.inst.updateRanges()
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_5updateRanges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_5updateRanges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateRanges");

  /* "_pyOpenMS.pyx":941
 *         return self
 *     def updateRanges (self, ):
 *         self.inst.updateRanges()             # <<<<<<<<<<<<<<
 *         return self
 *     def push_back (self, Peak1D arg0):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->updateRanges();

  /* "_pyOpenMS.pyx":942
 *     def updateRanges (self, ):
 *         self.inst.updateRanges()
 *         return self             # <<<<<<<<<<<<<<
 *     def push_back (self, Peak1D arg0):
 *         self.inst.push_back(deref(arg0.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":943
 *         self.inst.updateRanges()
 *         return self
 *     def push_back (self, Peak1D arg0):             # <<<<<<<<<<<<<<
 *         self.inst.push_back(deref(arg0.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_6push_back(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_6push_back(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_back");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), __pyx_ptype_9_pyOpenMS_Peak1D, 1, "arg0", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":944
 *         return self
 *     def push_back (self, Peak1D arg0):
 *         self.inst.push_back(deref(arg0.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def getMSLevel (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->push_back((*((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_arg0)->inst));

  /* "_pyOpenMS.pyx":945
 *     def push_back (self, Peak1D arg0):
 *         self.inst.push_back(deref(arg0.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def getMSLevel (self, ):
 *         _result =  self.inst.getMSLevel()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.push_back", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":946
 *         self.inst.push_back(deref(arg0.inst))
 *         return self
 *     def getMSLevel (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getMSLevel()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_7getMSLevel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_7getMSLevel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  unsigned int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMSLevel");

  /* "_pyOpenMS.pyx":947
 *         return self
 *     def getMSLevel (self, ):
 *         _result =  self.inst.getMSLevel()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setMSLevel (self, unsigned int arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getMSLevel();

  /* "_pyOpenMS.pyx":948
 *     def getMSLevel (self, ):
 *         _result =  self.inst.getMSLevel()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setMSLevel (self, unsigned int arg0):
 *         self.inst.setMSLevel(arg0)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getMSLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":949
 *         _result =  self.inst.getMSLevel()
 *         return _result
 *     def setMSLevel (self, unsigned int arg0):             # <<<<<<<<<<<<<<
 *         self.inst.setMSLevel(arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_8setMSLevel(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_8setMSLevel(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  unsigned int __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMSLevel");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __Pyx_PyInt_AsUnsignedInt(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setMSLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":950
 *         return _result
 *     def setMSLevel (self, unsigned int arg0):
 *         self.inst.setMSLevel(arg0)             # <<<<<<<<<<<<<<
 *         return self
 *     def findNearest (self, float arg0):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setMSLevel(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":951
 *     def setMSLevel (self, unsigned int arg0):
 *         self.inst.setMSLevel(arg0)
 *         return self             # <<<<<<<<<<<<<<
 *     def findNearest (self, float arg0):
 *         _result =  self.inst.findNearest(arg0)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":952
 *         self.inst.setMSLevel(arg0)
 *         return self
 *     def findNearest (self, float arg0):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.findNearest(arg0)
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_9findNearest(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_9findNearest(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  float __pyx_v_arg0;
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findNearest");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __pyx_PyFloat_AsDouble(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.findNearest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":953
 *         return self
 *     def findNearest (self, float arg0):
 *         _result =  self.inst.findNearest(arg0)             # <<<<<<<<<<<<<<
 *         return _result
 *     def size (self, ):
 */
  try {__pyx_t_1 = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->findNearest(__pyx_v_arg0);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v__result = __pyx_t_1;

  /* "_pyOpenMS.pyx":954
 *     def findNearest (self, float arg0):
 *         _result =  self.inst.findNearest(arg0)
 *         return _result             # <<<<<<<<<<<<<<
 *     def size (self, ):
 *         _result =  self.inst.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.findNearest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":955
 *         _result =  self.inst.findNearest(arg0)
 *         return _result
 *     def size (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.size()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_10size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_10size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "_pyOpenMS.pyx":956
 *         return _result
 *     def size (self, ):
 *         _result =  self.inst.size()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setRT (self, float arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->size();

  /* "_pyOpenMS.pyx":957
 *     def size (self, ):
 *         _result =  self.inst.size()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setRT (self, float arg0):
 *         self.inst.setRT(arg0)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":958
 *         _result =  self.inst.size()
 *         return _result
 *     def setRT (self, float arg0):             # <<<<<<<<<<<<<<
 *         self.inst.setRT(arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_11setRT(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_11setRT(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  float __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setRT");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __pyx_PyFloat_AsDouble(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":959
 *         return _result
 *     def setRT (self, float arg0):
 *         self.inst.setRT(arg0)             # <<<<<<<<<<<<<<
 *         return self
 *     def getName (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setRT(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":960
 *     def setRT (self, float arg0):
 *         self.inst.setRT(arg0)
 *         return self             # <<<<<<<<<<<<<<
 *     def getName (self, ):
 *         _result =  self.inst.getName()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":961
 *         self.inst.setRT(arg0)
 *         return self
 *     def getName (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getName()
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_12getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_12getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");

  /* "_pyOpenMS.pyx":962
 *         return self
 *     def getName (self, ):
 *         _result =  self.inst.getName()             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def getNativeID (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getName();

  /* "_pyOpenMS.pyx":963
 *     def getName (self, ):
 *         _result =  self.inst.getName()
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def getNativeID (self, ):
 *         _result =  self.inst.getNativeID()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":964
 *         _result =  self.inst.getName()
 *         return conv_string_to_py(_result)
 *     def getNativeID (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getNativeID()
 *         return conv_string_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_13getNativeID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_13getNativeID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNativeID");

  /* "_pyOpenMS.pyx":965
 *         return conv_string_to_py(_result)
 *     def getNativeID (self, ):
 *         _result =  self.inst.getNativeID()             # <<<<<<<<<<<<<<
 *         return conv_string_to_py(_result)
 *     def getSourceFile (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getNativeID();

  /* "_pyOpenMS.pyx":966
 *     def getNativeID (self, ):
 *         _result =  self.inst.getNativeID()
 *         return conv_string_to_py(_result)             # <<<<<<<<<<<<<<
 *     def getSourceFile (self, ):
 *         _result =  self.inst.getSourceFile()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_string_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getNativeID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":967
 *         _result =  self.inst.getNativeID()
 *         return conv_string_to_py(_result)
 *     def getSourceFile (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getSourceFile()
 *         return conv__SourceFile_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_14getSourceFile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_14getSourceFile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  OpenMS::SourceFile __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSourceFile");

  /* "_pyOpenMS.pyx":968
 *         return conv_string_to_py(_result)
 *     def getSourceFile (self, ):
 *         _result =  self.inst.getSourceFile()             # <<<<<<<<<<<<<<
 *         return conv__SourceFile_to_py(_result)
 *     def setName (self, str arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getSourceFile();

  /* "_pyOpenMS.pyx":969
 *     def getSourceFile (self, ):
 *         _result =  self.inst.getSourceFile()
 *         return conv__SourceFile_to_py(_result)             # <<<<<<<<<<<<<<
 *     def setName (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv__SourceFile_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getSourceFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":970
 *         _result =  self.inst.getSourceFile()
 *         return conv__SourceFile_to_py(_result)
 *     def setName (self, str arg0):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_15setName(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_15setName(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setName");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":972
 *     def setName (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.setName(deref(conv_arg0.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":973
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setName(deref(conv_arg0.conv()))             # <<<<<<<<<<<<<<
 *         return self
 *     def __getitem__(self, int idx):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setName((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)));

  /* "_pyOpenMS.pyx":974
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setName(deref(conv_arg0.conv()))
 *         return self             # <<<<<<<<<<<<<<
 *     def __getitem__(self, int idx):
 *         cdef _Peak1D _result = deref(self.inst)[idx]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":975
 *         self.inst.setName(deref(conv_arg0.conv()))
 *         return self
 *     def __getitem__(self, int idx):             # <<<<<<<<<<<<<<
 *         cdef _Peak1D _result = deref(self.inst)[idx]
 *         return conv__Peak1D_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_16__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_16__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx) {
  int __pyx_v_idx;
  OpenMS::Peak1D __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_AsInt(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":976
 *         return self
 *     def __getitem__(self, int idx):
 *         cdef _Peak1D _result = deref(self.inst)[idx]             # <<<<<<<<<<<<<<
 *         return conv__Peak1D_to_py(_result)
 *     def setNativeID (self, str arg0):
 */
  __pyx_v__result = ((*((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst)[__pyx_v_idx]);

  /* "_pyOpenMS.pyx":977
 *     def __getitem__(self, int idx):
 *         cdef _Peak1D _result = deref(self.inst)[idx]
 *         return conv__Peak1D_to_py(_result)             # <<<<<<<<<<<<<<
 *     def setNativeID (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv__Peak1D_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":978
 *         cdef _Peak1D _result = deref(self.inst)[idx]
 *         return conv__Peak1D_to_py(_result)
 *     def setNativeID (self, str arg0):             # <<<<<<<<<<<<<<
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_17setNativeID(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_17setNativeID(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNativeID");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyString_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":980
 *     def setNativeID (self, str arg0):
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.setNativeID(deref(conv_arg0.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":981
 *         cdef __Py_str_to_string conv_arg0
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setNativeID(deref(conv_arg0.conv()))             # <<<<<<<<<<<<<<
 *         return self
 *     def clear (self, int arg0):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setNativeID((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0)));

  /* "_pyOpenMS.pyx":982
 *         conv_arg0 = __Py_str_to_string(arg0)
 *         self.inst.setNativeID(deref(conv_arg0.conv()))
 *         return self             # <<<<<<<<<<<<<<
 *     def clear (self, int arg0):
 *         self.inst.clear(arg0)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setNativeID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":983
 *         self.inst.setNativeID(deref(conv_arg0.conv()))
 *         return self
 *     def clear (self, int arg0):             # <<<<<<<<<<<<<<
 *         self.inst.clear(arg0)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_18clear(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_18clear(PyObject *__pyx_v_self, PyObject *__pyx_arg_arg0) {
  int __pyx_v_arg0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear");
  assert(__pyx_arg_arg0); {
    __pyx_v_arg0 = __Pyx_PyInt_AsInt(__pyx_arg_arg0); if (unlikely((__pyx_v_arg0 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":984
 *         return self
 *     def clear (self, int arg0):
 *         self.inst.clear(arg0)             # <<<<<<<<<<<<<<
 *         return self
 *     def getInstrumentSettings (self, ):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->clear(__pyx_v_arg0);

  /* "_pyOpenMS.pyx":985
 *     def clear (self, int arg0):
 *         self.inst.clear(arg0)
 *         return self             # <<<<<<<<<<<<<<
 *     def getInstrumentSettings (self, ):
 *         _result =  self.inst.getInstrumentSettings()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":986
 *         self.inst.clear(arg0)
 *         return self
 *     def getInstrumentSettings (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getInstrumentSettings()
 *         return conv__InstrumentSettings_to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_19getInstrumentSettings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_19getInstrumentSettings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  OpenMS::InstrumentSettings __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getInstrumentSettings");

  /* "_pyOpenMS.pyx":987
 *         return self
 *     def getInstrumentSettings (self, ):
 *         _result =  self.inst.getInstrumentSettings()             # <<<<<<<<<<<<<<
 *         return conv__InstrumentSettings_to_py(_result)
 *     def getPrecursors (self, ):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getInstrumentSettings();

  /* "_pyOpenMS.pyx":988
 *     def getInstrumentSettings (self, ):
 *         _result =  self.inst.getInstrumentSettings()
 *         return conv__InstrumentSettings_to_py(_result)             # <<<<<<<<<<<<<<
 *     def getPrecursors (self, ):
 *         _result =  self.inst.getPrecursors()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv__InstrumentSettings_to_py(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getInstrumentSettings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":989
 *         _result =  self.inst.getInstrumentSettings()
 *         return conv__InstrumentSettings_to_py(_result)
 *     def getPrecursors (self, ):             # <<<<<<<<<<<<<<
 *         _result =  self.inst.getPrecursors()
 *         return conv_vector_Br__Precursor_Br__to_py(_result)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_20getPrecursors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_20getPrecursors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::vector<OpenMS::Precursor> __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPrecursors");

  /* "_pyOpenMS.pyx":990
 *         return conv__InstrumentSettings_to_py(_result)
 *     def getPrecursors (self, ):
 *         _result =  self.inst.getPrecursors()             # <<<<<<<<<<<<<<
 *         return conv_vector_Br__Precursor_Br__to_py(_result)
 *     def setPrecursors (self, list arg0):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getPrecursors();

  /* "_pyOpenMS.pyx":991
 *     def getPrecursors (self, ):
 *         _result =  self.inst.getPrecursors()
 *         return conv_vector_Br__Precursor_Br__to_py(_result)             # <<<<<<<<<<<<<<
 *     def setPrecursors (self, list arg0):
 *         cdef __Py_list_to_vector_Br__Precursor_Br_ conv_arg0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9_pyOpenMS_conv_vector_Br__Precursor_Br__to_py(((std::vector<OpenMS::Precursor> &)__pyx_v__result)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getPrecursors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":992
 *         _result =  self.inst.getPrecursors()
 *         return conv_vector_Br__Precursor_Br__to_py(_result)
 *     def setPrecursors (self, list arg0):             # <<<<<<<<<<<<<<
 *         cdef __Py_list_to_vector_Br__Precursor_Br_ conv_arg0
 *         conv_arg0 = __Py_list_to_vector_Br__Precursor_Br_(arg0)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_21setPrecursors(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_21setPrecursors(PyObject *__pyx_v_self, PyObject *__pyx_v_arg0) {
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *__pyx_v_conv_arg0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPrecursors");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg0), (&PyList_Type), 1, "arg0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":994
 *     def setPrecursors (self, list arg0):
 *         cdef __Py_list_to_vector_Br__Precursor_Br_ conv_arg0
 *         conv_arg0 = __Py_list_to_vector_Br__Precursor_Br_(arg0)             # <<<<<<<<<<<<<<
 *         self.inst.setPrecursors(deref(conv_arg0.conv()))
 *         return self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_arg0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_arg0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arg0));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_conv_arg0 = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":995
 *         cdef __Py_list_to_vector_Br__Precursor_Br_ conv_arg0
 *         conv_arg0 = __Py_list_to_vector_Br__Precursor_Br_(arg0)
 *         self.inst.setPrecursors(deref(conv_arg0.conv()))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setPrecursors(((std::vector<OpenMS::Precursor>)(*((struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *)__pyx_v_conv_arg0->__pyx_vtab)->conv(__pyx_v_conv_arg0))));

  /* "_pyOpenMS.pyx":996
 *         conv_arg0 = __Py_list_to_vector_Br__Precursor_Br_(arg0)
 *         self.inst.setPrecursors(deref(conv_arg0.conv()))
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def get_peaks(self): # MSSpectrum[Peak1D] spec_):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setPrecursors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_arg0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":998
 *         return self
 * 
 *     def get_peaks(self): # MSSpectrum[Peak1D] spec_):             # <<<<<<<<<<<<<<
 * 
 *         cdef _MSSpectrum[_Peak1D] * spec_ = self.inst
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_22get_peaks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_22get_peaks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  OpenMS::MSSpectrum<OpenMS::Peak1D> *__pyx_v_spec_;
  unsigned int __pyx_v_n;
  PyArrayObject *__pyx_v_peaks = 0;
  std::vector<OpenMS::Peak1D>::iterator __pyx_v_it;
  int __pyx_v_i;
  Py_buffer __pyx_bstruct_peaks;
  Py_ssize_t __pyx_bstride_0_peaks = 0;
  Py_ssize_t __pyx_bstride_1_peaks = 0;
  Py_ssize_t __pyx_bshape_0_peaks = 0;
  Py_ssize_t __pyx_bshape_1_peaks = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  long __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_peaks");
  __pyx_bstruct_peaks.buf = NULL;

  /* "_pyOpenMS.pyx":1000
 *     def get_peaks(self): # MSSpectrum[Peak1D] spec_):
 * 
 *         cdef _MSSpectrum[_Peak1D] * spec_ = self.inst             # <<<<<<<<<<<<<<
 * 
 *         cdef unsigned int n = spec_.size()
 */
  __pyx_v_spec_ = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst;

  /* "_pyOpenMS.pyx":1002
 *         cdef _MSSpectrum[_Peak1D] * spec_ = self.inst
 * 
 *         cdef unsigned int n = spec_.size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float32_t, ndim=2] peaks
 *         peaks = np.zeros( [n,2], dtype=np.float32)
 */
  __pyx_v_n = __pyx_v_spec_->size();

  /* "_pyOpenMS.pyx":1004
 *         cdef unsigned int n = spec_.size()
 *         cdef np.ndarray[np.float32_t, ndim=2] peaks
 *         peaks = np.zeros( [n,2], dtype=np.float32)             # <<<<<<<<<<<<<<
 *         cdef _Peak1D p
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_n); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__float32); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyEval_CallObjectWithKeywords(__pyx_t_2, ((PyObject *)__pyx_t_1), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_peaks);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_peaks, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_peaks, (PyObject*)__pyx_v_peaks, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
    }
    __pyx_bstride_0_peaks = __pyx_bstruct_peaks.strides[0]; __pyx_bstride_1_peaks = __pyx_bstruct_peaks.strides[1];
    __pyx_bshape_0_peaks = __pyx_bstruct_peaks.shape[0]; __pyx_bshape_1_peaks = __pyx_bstruct_peaks.shape[1];
    if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = 0;
  __pyx_v_peaks = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "_pyOpenMS.pyx":1007
 *         cdef _Peak1D p
 * 
 *         cdef vector[_Peak1D].iterator it = spec_.begin()             # <<<<<<<<<<<<<<
 *         cdef int i = 0
 *         while it != spec_.end():
 */
  __pyx_v_it = ((std::vector<OpenMS::Peak1D>::iterator)__pyx_v_spec_->begin());

  /* "_pyOpenMS.pyx":1008
 * 
 *         cdef vector[_Peak1D].iterator it = spec_.begin()
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         while it != spec_.end():
 *             peaks[i,0] = deref(it).getMZ()
 */
  __pyx_v_i = 0;

  /* "_pyOpenMS.pyx":1009
 *         cdef vector[_Peak1D].iterator it = spec_.begin()
 *         cdef int i = 0
 *         while it != spec_.end():             # <<<<<<<<<<<<<<
 *             peaks[i,0] = deref(it).getMZ()
 *             peaks[i,1] = deref(it).getIntensity()
 */
  while (1) {
    __pyx_t_11 = (__pyx_v_it != __pyx_v_spec_->end());
    if (!__pyx_t_11) break;

    /* "_pyOpenMS.pyx":1010
 *         cdef int i = 0
 *         while it != spec_.end():
 *             peaks[i,0] = deref(it).getMZ()             # <<<<<<<<<<<<<<
 *             peaks[i,1] = deref(it).getIntensity()
 *             preincrement(it)
 */
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_12 = 0;
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_bstruct_peaks.buf, __pyx_t_7, __pyx_bstride_0_peaks, __pyx_t_12, __pyx_bstride_1_peaks) = (*__pyx_v_it).getMZ();

    /* "_pyOpenMS.pyx":1011
 *         while it != spec_.end():
 *             peaks[i,0] = deref(it).getMZ()
 *             peaks[i,1] = deref(it).getIntensity()             # <<<<<<<<<<<<<<
 *             preincrement(it)
 *             i += 1
 */
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_14 = 1;
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_bstruct_peaks.buf, __pyx_t_13, __pyx_bstride_0_peaks, __pyx_t_14, __pyx_bstride_1_peaks) = (*__pyx_v_it).getIntensity();

    /* "_pyOpenMS.pyx":1012
 *             peaks[i,0] = deref(it).getMZ()
 *             peaks[i,1] = deref(it).getIntensity()
 *             preincrement(it)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    (++__pyx_v_it);

    /* "_pyOpenMS.pyx":1013
 *             peaks[i,1] = deref(it).getIntensity()
 *             preincrement(it)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         return peaks
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "_pyOpenMS.pyx":1015
 *             i += 1
 * 
 *         return peaks             # <<<<<<<<<<<<<<
 * 
 *     def set_peaks(self, np.ndarray[np.float32_t, ndim=2] peaks):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_peaks));
  __pyx_r = ((PyObject *)__pyx_v_peaks);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_peaks);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.get_peaks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_peaks);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_peaks);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1017
 *         return peaks
 * 
 *     def set_peaks(self, np.ndarray[np.float32_t, ndim=2] peaks):             # <<<<<<<<<<<<<<
 * 
 *         cdef _MSSpectrum[_Peak1D] * spec_ = self.inst
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_23set_peaks(PyObject *__pyx_v_self, PyObject *__pyx_v_peaks); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_23set_peaks(PyObject *__pyx_v_self, PyObject *__pyx_v_peaks) {
  OpenMS::MSSpectrum<OpenMS::Peak1D> *__pyx_v_spec_;
  OpenMS::Peak1D __pyx_v_p;
  float __pyx_v_mz;
  float __pyx_v_I;
  int __pyx_v_N;
  int __pyx_v_i;
  Py_buffer __pyx_bstruct_peaks;
  Py_ssize_t __pyx_bstride_0_peaks = 0;
  Py_ssize_t __pyx_bstride_1_peaks = 0;
  Py_ssize_t __pyx_bshape_0_peaks = 0;
  Py_ssize_t __pyx_bshape_1_peaks = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_peaks");
  __pyx_bstruct_peaks.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_peaks), __pyx_ptype_5numpy_ndarray, 1, "peaks", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_peaks, (PyObject*)__pyx_v_peaks, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_peaks = __pyx_bstruct_peaks.strides[0]; __pyx_bstride_1_peaks = __pyx_bstruct_peaks.strides[1];
  __pyx_bshape_0_peaks = __pyx_bstruct_peaks.shape[0]; __pyx_bshape_1_peaks = __pyx_bstruct_peaks.shape[1];

  /* "_pyOpenMS.pyx":1019
 *     def set_peaks(self, np.ndarray[np.float32_t, ndim=2] peaks):
 * 
 *         cdef _MSSpectrum[_Peak1D] * spec_ = self.inst             # <<<<<<<<<<<<<<
 * 
 *         #cdef int delete_meta = 0
 */
  __pyx_v_spec_ = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst;

  /* "_pyOpenMS.pyx":1022
 * 
 *         #cdef int delete_meta = 0
 *         spec_.clear(0) # delete_meta) # emtpy vector , keep meta data             # <<<<<<<<<<<<<<
 *         cdef _Peak1D p = _Peak1D()
 *         cdef float mz, I
 */
  __pyx_v_spec_->clear(0);

  /* "_pyOpenMS.pyx":1023
 *         #cdef int delete_meta = 0
 *         spec_.clear(0) # delete_meta) # emtpy vector , keep meta data
 *         cdef _Peak1D p = _Peak1D()             # <<<<<<<<<<<<<<
 *         cdef float mz, I
 *         cdef int N
 */
  __pyx_v_p = OpenMS::Peak1D();

  /* "_pyOpenMS.pyx":1026
 *         cdef float mz, I
 *         cdef int N
 *         N = peaks.shape[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_N = (((PyArrayObject *)__pyx_v_peaks)->dimensions[0]);

  /* "_pyOpenMS.pyx":1029
 * 
 * 
 *         for i in range(N):             # <<<<<<<<<<<<<<
 *             mz = peaks[i,0]
 *             I  = peaks[i,1]
 */
  __pyx_t_1 = __pyx_v_N;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "_pyOpenMS.pyx":1030
 * 
 *         for i in range(N):
 *             mz = peaks[i,0]             # <<<<<<<<<<<<<<
 *             I  = peaks[i,1]
 *             p.setMZ(mz)
 */
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_4 = 0;
    __pyx_v_mz = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_bstruct_peaks.buf, __pyx_t_3, __pyx_bstride_0_peaks, __pyx_t_4, __pyx_bstride_1_peaks));

    /* "_pyOpenMS.pyx":1031
 *         for i in range(N):
 *             mz = peaks[i,0]
 *             I  = peaks[i,1]             # <<<<<<<<<<<<<<
 *             p.setMZ(mz)
 *             p.setIntensity(I)
 */
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = 1;
    __pyx_v_I = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_bstruct_peaks.buf, __pyx_t_5, __pyx_bstride_0_peaks, __pyx_t_6, __pyx_bstride_1_peaks));

    /* "_pyOpenMS.pyx":1032
 *             mz = peaks[i,0]
 *             I  = peaks[i,1]
 *             p.setMZ(mz)             # <<<<<<<<<<<<<<
 *             p.setIntensity(I)
 *             spec_.push_back(p)
 */
    __pyx_v_p.setMZ(__pyx_v_mz);

    /* "_pyOpenMS.pyx":1033
 *             I  = peaks[i,1]
 *             p.setMZ(mz)
 *             p.setIntensity(I)             # <<<<<<<<<<<<<<
 *             spec_.push_back(p)
 * 
 */
    __pyx_v_p.setIntensity(__pyx_v_I);

    /* "_pyOpenMS.pyx":1034
 *             p.setMZ(mz)
 *             p.setIntensity(I)
 *             spec_.push_back(p)             # <<<<<<<<<<<<<<
 * 
 *         spec_.updateRanges()
 */
    __pyx_v_spec_->push_back(__pyx_v_p);
  }

  /* "_pyOpenMS.pyx":1036
 *             spec_.push_back(p)
 * 
 *         spec_.updateRanges()             # <<<<<<<<<<<<<<
 * 
 *     def intensityInRange(self, float mzmin, float mzmax):
 */
  __pyx_v_spec_->updateRanges();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_peaks);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.set_peaks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_peaks);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1038
 *         spec_.updateRanges()
 * 
 *     def intensityInRange(self, float mzmin, float mzmax):             # <<<<<<<<<<<<<<
 * 
 *         cdef int n
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_24intensityInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_24intensityInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_mzmin;
  float __pyx_v_mzmax;
  double __pyx_v_I;
  OpenMS::MSSpectrum<OpenMS::Peak1D> *__pyx_v_spec_;
  int __pyx_v_N;
  int __pyx_v_i;
  OpenMS::Peak1D *__pyx_v_p;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__mzmin,&__pyx_n_s__mzmax,0};
  __Pyx_RefNannySetupContext("intensityInRange");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__mzmin);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__mzmax);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intensityInRange", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "intensityInRange") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mzmin = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_mzmin == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_mzmax = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_mzmax == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intensityInRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.intensityInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":1043
 *         cdef double I
 * 
 *         cdef _MSSpectrum[_Peak1D] * spec_ = self.inst             # <<<<<<<<<<<<<<
 *         cdef int N = spec_.size()
 * 
 */
  __pyx_v_spec_ = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst;

  /* "_pyOpenMS.pyx":1044
 * 
 *         cdef _MSSpectrum[_Peak1D] * spec_ = self.inst
 *         cdef int N = spec_.size()             # <<<<<<<<<<<<<<
 * 
 *         I = 0
 */
  __pyx_v_N = __pyx_v_spec_->size();

  /* "_pyOpenMS.pyx":1046
 *         cdef int N = spec_.size()
 * 
 *         I = 0             # <<<<<<<<<<<<<<
 *         for i in range(N):
 *                 if deref(spec_)[i].getMZ() >= mzmin:
 */
  __pyx_v_I = 0.0;

  /* "_pyOpenMS.pyx":1047
 * 
 *         I = 0
 *         for i in range(N):             # <<<<<<<<<<<<<<
 *                 if deref(spec_)[i].getMZ() >= mzmin:
 *                     break
 */
  __pyx_t_1 = __pyx_v_N;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "_pyOpenMS.pyx":1048
 *         I = 0
 *         for i in range(N):
 *                 if deref(spec_)[i].getMZ() >= mzmin:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
    __pyx_t_3 = (((*__pyx_v_spec_)[__pyx_v_i]).getMZ() >= __pyx_v_mzmin);
    if (__pyx_t_3) {

      /* "_pyOpenMS.pyx":1049
 *         for i in range(N):
 *                 if deref(spec_)[i].getMZ() >= mzmin:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *         cdef _Peak1D * p
 */
      goto __pyx_L7_break;
      goto __pyx_L8;
    }
    __pyx_L8:;
  }
  __pyx_L7_break:;

  /* "_pyOpenMS.pyx":1052
 * 
 *         cdef _Peak1D * p
 *         for j in range(i, N):             # <<<<<<<<<<<<<<
 *                 p = address(deref(spec_)[i])
 *                 if p.getMZ() > mzmax:
 */
  __pyx_t_1 = __pyx_v_N;
  for (__pyx_t_2 = __pyx_v_i; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_j = __pyx_t_2;

    /* "_pyOpenMS.pyx":1053
 *         cdef _Peak1D * p
 *         for j in range(i, N):
 *                 p = address(deref(spec_)[i])             # <<<<<<<<<<<<<<
 *                 if p.getMZ() > mzmax:
 *                     break
 */
    __pyx_v_p = (&((*__pyx_v_spec_)[__pyx_v_i]));

    /* "_pyOpenMS.pyx":1054
 *         for j in range(i, N):
 *                 p = address(deref(spec_)[i])
 *                 if p.getMZ() > mzmax:             # <<<<<<<<<<<<<<
 *                     break
 *                 I += p.getIntensity()
 */
    __pyx_t_3 = (__pyx_v_p->getMZ() > __pyx_v_mzmax);
    if (__pyx_t_3) {

      /* "_pyOpenMS.pyx":1055
 *                 p = address(deref(spec_)[i])
 *                 if p.getMZ() > mzmax:
 *                     break             # <<<<<<<<<<<<<<
 *                 I += p.getIntensity()
 * 
 */
      goto __pyx_L10_break;
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "_pyOpenMS.pyx":1056
 *                 if p.getMZ() > mzmax:
 *                     break
 *                 I += p.getIntensity()             # <<<<<<<<<<<<<<
 * 
 *         return I
 */
    __pyx_v_I = (__pyx_v_I + __pyx_v_p->getIntensity());
  }
  __pyx_L10_break:;

  /* "_pyOpenMS.pyx":1058
 *                 I += p.getIntensity()
 * 
 *         return I             # <<<<<<<<<<<<<<
 * 
 * cdef conv_vector_Br__Precursor_Br__to_py(vector[_Precursor] & vec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_I); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.intensityInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1060
 *         return I
 * 
 * cdef conv_vector_Br__Precursor_Br__to_py(vector[_Precursor] & vec):             # <<<<<<<<<<<<<<
 *     res = []
 *     cdef _Precursor item
 */

static PyObject *__pyx_f_9_pyOpenMS_conv_vector_Br__Precursor_Br__to_py(std::vector<OpenMS::Precursor> &__pyx_v_vec) {
  PyObject *__pyx_v_res = NULL;
  OpenMS::Precursor __pyx_v_item;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv_vector_Br__Precursor_Br__to_py");

  /* "_pyOpenMS.pyx":1061
 * 
 * cdef conv_vector_Br__Precursor_Br__to_py(vector[_Precursor] & vec):
 *     res = []             # <<<<<<<<<<<<<<
 *     cdef _Precursor item
 *     for i in range(vec.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_res = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":1063
 *     res = []
 *     cdef _Precursor item
 *     for i in range(vec.size()):             # <<<<<<<<<<<<<<
 *         item = vec.at(i)
 *         res.append(conv__Precursor_to_py(item))
 */
  __pyx_t_2 = __pyx_v_vec.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_pyOpenMS.pyx":1064
 *     cdef _Precursor item
 *     for i in range(vec.size()):
 *         item = vec.at(i)             # <<<<<<<<<<<<<<
 *         res.append(conv__Precursor_to_py(item))
 *     return res
 */
    __pyx_v_item = __pyx_v_vec.at(__pyx_v_i);

    /* "_pyOpenMS.pyx":1065
 *     for i in range(vec.size()):
 *         item = vec.at(i)
 *         res.append(conv__Precursor_to_py(item))             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    if (unlikely(((PyObject *)__pyx_v_res) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = __pyx_f_9_pyOpenMS_conv__Precursor_to_py(__pyx_v_item); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "_pyOpenMS.pyx":1066
 *         item = vec.at(i)
 *         res.append(conv__Precursor_to_py(item))
 *     return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.conv_vector_Br__Precursor_Br__to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1069
 * 
 * 
 * cdef conv_string_to_py(string & str):             # <<<<<<<<<<<<<<
 *      return PyString_FromString(str.c_str())
 * 
 */

static PyObject *__pyx_f_9_pyOpenMS_conv_string_to_py(std::string &__pyx_v_str) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv_string_to_py");

  /* "_pyOpenMS.pyx":1070
 * 
 * cdef conv_string_to_py(string & str):
 *      return PyString_FromString(str.c_str())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyString_FromString(__pyx_v_str.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.conv_string_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1073
 * 
 * 
 * cdef conv__DataValue_to_py(_DataValue & inst):             # <<<<<<<<<<<<<<
 *      cdef DataValue res = DataValue(_new_inst=False)
 *      res.inst = new _DataValue(inst)
 */

static PyObject *__pyx_f_9_pyOpenMS_conv__DataValue_to_py(OpenMS::DataValue &__pyx_v_inst) {
  struct __pyx_obj_9_pyOpenMS_DataValue *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv__DataValue_to_py");

  /* "_pyOpenMS.pyx":1074
 * 
 * cdef conv__DataValue_to_py(_DataValue & inst):
 *      cdef DataValue res = DataValue(_new_inst=False)             # <<<<<<<<<<<<<<
 *      res.inst = new _DataValue(inst)
 *      return res
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s___new_inst), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_DataValue)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_DataValue *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":1075
 * cdef conv__DataValue_to_py(_DataValue & inst):
 *      cdef DataValue res = DataValue(_new_inst=False)
 *      res.inst = new _DataValue(inst)             # <<<<<<<<<<<<<<
 *      return res
 * 
 */
  __pyx_v_res->inst = new OpenMS::DataValue(__pyx_v_inst);

  /* "_pyOpenMS.pyx":1076
 *      cdef DataValue res = DataValue(_new_inst=False)
 *      res.inst = new _DataValue(inst)
 *      return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.conv__DataValue_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1079
 * 
 * 
 * cdef conv__MSSpectrum_Br__Peak1D_Br__to_py(_MSSpectrum[_Peak1D] & inst):             # <<<<<<<<<<<<<<
 *      cdef MSSpectrum res = MSSpectrum(_new_inst=False)
 *      res.inst = new _MSSpectrum[_Peak1D](inst)
 */

static PyObject *__pyx_f_9_pyOpenMS_conv__MSSpectrum_Br__Peak1D_Br__to_py(OpenMS::MSSpectrum<OpenMS::Peak1D> &__pyx_v_inst) {
  struct __pyx_obj_9_pyOpenMS_MSSpectrum *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv__MSSpectrum_Br__Peak1D_Br__to_py");

  /* "_pyOpenMS.pyx":1080
 * 
 * cdef conv__MSSpectrum_Br__Peak1D_Br__to_py(_MSSpectrum[_Peak1D] & inst):
 *      cdef MSSpectrum res = MSSpectrum(_new_inst=False)             # <<<<<<<<<<<<<<
 *      res.inst = new _MSSpectrum[_Peak1D](inst)
 *      return res
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s___new_inst), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_MSSpectrum)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":1081
 * cdef conv__MSSpectrum_Br__Peak1D_Br__to_py(_MSSpectrum[_Peak1D] & inst):
 *      cdef MSSpectrum res = MSSpectrum(_new_inst=False)
 *      res.inst = new _MSSpectrum[_Peak1D](inst)             # <<<<<<<<<<<<<<
 *      return res
 * 
 */
  __pyx_v_res->inst = new OpenMS::MSSpectrum<OpenMS::Peak1D>(__pyx_v_inst);

  /* "_pyOpenMS.pyx":1082
 *      cdef MSSpectrum res = MSSpectrum(_new_inst=False)
 *      res.inst = new _MSSpectrum[_Peak1D](inst)
 *      return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.conv__MSSpectrum_Br__Peak1D_Br__to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1085
 * 
 * 
 * cdef conv__SourceFile_to_py(_SourceFile & inst):             # <<<<<<<<<<<<<<
 *      cdef SourceFile res = SourceFile(_new_inst=False)
 *      res.inst = new _SourceFile(inst)
 */

static PyObject *__pyx_f_9_pyOpenMS_conv__SourceFile_to_py(OpenMS::SourceFile &__pyx_v_inst) {
  struct __pyx_obj_9_pyOpenMS_SourceFile *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv__SourceFile_to_py");

  /* "_pyOpenMS.pyx":1086
 * 
 * cdef conv__SourceFile_to_py(_SourceFile & inst):
 *      cdef SourceFile res = SourceFile(_new_inst=False)             # <<<<<<<<<<<<<<
 *      res.inst = new _SourceFile(inst)
 *      return res
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s___new_inst), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_SourceFile)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_SourceFile *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":1087
 * cdef conv__SourceFile_to_py(_SourceFile & inst):
 *      cdef SourceFile res = SourceFile(_new_inst=False)
 *      res.inst = new _SourceFile(inst)             # <<<<<<<<<<<<<<
 *      return res
 * 
 */
  __pyx_v_res->inst = new OpenMS::SourceFile(__pyx_v_inst);

  /* "_pyOpenMS.pyx":1088
 *      cdef SourceFile res = SourceFile(_new_inst=False)
 *      res.inst = new _SourceFile(inst)
 *      return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.conv__SourceFile_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1091
 * 
 * 
 * cdef conv__Precursor_to_py(_Precursor & inst):             # <<<<<<<<<<<<<<
 *      cdef Precursor res = Precursor(_new_inst=False)
 *      res.inst = new _Precursor(inst)
 */

static PyObject *__pyx_f_9_pyOpenMS_conv__Precursor_to_py(OpenMS::Precursor &__pyx_v_inst) {
  struct __pyx_obj_9_pyOpenMS_Precursor *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv__Precursor_to_py");

  /* "_pyOpenMS.pyx":1092
 * 
 * cdef conv__Precursor_to_py(_Precursor & inst):
 *      cdef Precursor res = Precursor(_new_inst=False)             # <<<<<<<<<<<<<<
 *      res.inst = new _Precursor(inst)
 *      return res
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s___new_inst), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_Precursor)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":1093
 * cdef conv__Precursor_to_py(_Precursor & inst):
 *      cdef Precursor res = Precursor(_new_inst=False)
 *      res.inst = new _Precursor(inst)             # <<<<<<<<<<<<<<
 *      return res
 * 
 */
  __pyx_v_res->inst = new OpenMS::Precursor(__pyx_v_inst);

  /* "_pyOpenMS.pyx":1094
 *      cdef Precursor res = Precursor(_new_inst=False)
 *      res.inst = new _Precursor(inst)
 *      return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.conv__Precursor_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1097
 * 
 * 
 * cdef conv__Param_to_py(_Param & inst):             # <<<<<<<<<<<<<<
 *      cdef Param res = Param(_new_inst=False)
 *      res.inst = new _Param(inst)
 */

static PyObject *__pyx_f_9_pyOpenMS_conv__Param_to_py(OpenMS::Param &__pyx_v_inst) {
  struct __pyx_obj_9_pyOpenMS_Param *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv__Param_to_py");

  /* "_pyOpenMS.pyx":1098
 * 
 * cdef conv__Param_to_py(_Param & inst):
 *      cdef Param res = Param(_new_inst=False)             # <<<<<<<<<<<<<<
 *      res.inst = new _Param(inst)
 *      return res
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s___new_inst), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_Param)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_Param *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":1099
 * cdef conv__Param_to_py(_Param & inst):
 *      cdef Param res = Param(_new_inst=False)
 *      res.inst = new _Param(inst)             # <<<<<<<<<<<<<<
 *      return res
 * 
 */
  __pyx_v_res->inst = new OpenMS::Param(__pyx_v_inst);

  /* "_pyOpenMS.pyx":1100
 *      cdef Param res = Param(_new_inst=False)
 *      res.inst = new _Param(inst)
 *      return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.conv__Param_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1103
 * 
 * 
 * cdef conv__StringList_to_py(_StringList & inst):             # <<<<<<<<<<<<<<
 *      cdef StringList res = StringList(_new_inst=False)
 *      res.inst = new _StringList(inst)
 */

static PyObject *__pyx_f_9_pyOpenMS_conv__StringList_to_py(OpenMS::StringList &__pyx_v_inst) {
  struct __pyx_obj_9_pyOpenMS_StringList *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv__StringList_to_py");

  /* "_pyOpenMS.pyx":1104
 * 
 * cdef conv__StringList_to_py(_StringList & inst):
 *      cdef StringList res = StringList(_new_inst=False)             # <<<<<<<<<<<<<<
 *      res.inst = new _StringList(inst)
 *      return res
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s___new_inst), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_StringList)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_StringList *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":1105
 * cdef conv__StringList_to_py(_StringList & inst):
 *      cdef StringList res = StringList(_new_inst=False)
 *      res.inst = new _StringList(inst)             # <<<<<<<<<<<<<<
 *      return res
 * 
 */
  __pyx_v_res->inst = new OpenMS::StringList(__pyx_v_inst);

  /* "_pyOpenMS.pyx":1106
 *      cdef StringList res = StringList(_new_inst=False)
 *      res.inst = new _StringList(inst)
 *      return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.conv__StringList_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1109
 * 
 * 
 * cdef conv__Peak1D_to_py(_Peak1D & inst):             # <<<<<<<<<<<<<<
 *      cdef Peak1D res = Peak1D(_new_inst=False)
 *      res.inst = new _Peak1D(inst)
 */

static PyObject *__pyx_f_9_pyOpenMS_conv__Peak1D_to_py(OpenMS::Peak1D &__pyx_v_inst) {
  struct __pyx_obj_9_pyOpenMS_Peak1D *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv__Peak1D_to_py");

  /* "_pyOpenMS.pyx":1110
 * 
 * cdef conv__Peak1D_to_py(_Peak1D & inst):
 *      cdef Peak1D res = Peak1D(_new_inst=False)             # <<<<<<<<<<<<<<
 *      res.inst = new _Peak1D(inst)
 *      return res
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s___new_inst), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_Peak1D)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":1111
 * cdef conv__Peak1D_to_py(_Peak1D & inst):
 *      cdef Peak1D res = Peak1D(_new_inst=False)
 *      res.inst = new _Peak1D(inst)             # <<<<<<<<<<<<<<
 *      return res
 * 
 */
  __pyx_v_res->inst = new OpenMS::Peak1D(__pyx_v_inst);

  /* "_pyOpenMS.pyx":1112
 *      cdef Peak1D res = Peak1D(_new_inst=False)
 *      res.inst = new _Peak1D(inst)
 *      return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.conv__Peak1D_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1115
 * 
 * 
 * cdef conv__InstrumentSettings_to_py(_InstrumentSettings & inst):             # <<<<<<<<<<<<<<
 *      cdef InstrumentSettings res = InstrumentSettings(_new_inst=False)
 *      res.inst = new _InstrumentSettings(inst)
 */

static PyObject *__pyx_f_9_pyOpenMS_conv__InstrumentSettings_to_py(OpenMS::InstrumentSettings &__pyx_v_inst) {
  struct __pyx_obj_9_pyOpenMS_InstrumentSettings *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("conv__InstrumentSettings_to_py");

  /* "_pyOpenMS.pyx":1116
 * 
 * cdef conv__InstrumentSettings_to_py(_InstrumentSettings & inst):
 *      cdef InstrumentSettings res = InstrumentSettings(_new_inst=False)             # <<<<<<<<<<<<<<
 *      res.inst = new _InstrumentSettings(inst)
 *      return res
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s___new_inst), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_InstrumentSettings)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_pyOpenMS.pyx":1117
 * cdef conv__InstrumentSettings_to_py(_InstrumentSettings & inst):
 *      cdef InstrumentSettings res = InstrumentSettings(_new_inst=False)
 *      res.inst = new _InstrumentSettings(inst)             # <<<<<<<<<<<<<<
 *      return res
 * 
 */
  __pyx_v_res->inst = new OpenMS::InstrumentSettings(__pyx_v_inst);

  /* "_pyOpenMS.pyx":1118
 *      cdef InstrumentSettings res = InstrumentSettings(_new_inst=False)
 *      res.inst = new _InstrumentSettings(inst)
 *      return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.conv__InstrumentSettings_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1123
 * cdef class __Py_list_to_vector_Br__String_Br_:
 *     cdef vector[_String] * inst
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *          inst = NULL
 *     def __dealloc__(self):
 */

static int __pyx_pf_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  void *__pyx_v_inst;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":1124
 *     cdef vector[_String] * inst
 *     def __cinit__(self):
 *          inst = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *          #print "dealloc", self
 */
  __pyx_v_inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1125
 *     def __cinit__(self):
 *          inst = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          #print "dealloc", self
 *          if self.inst:
 */

static void __pyx_pf_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br__1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br__1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":1127
 *     def __dealloc__(self):
 *          #print "dealloc", self
 *          if self.inst:             # <<<<<<<<<<<<<<
 *              #print "kill"
 *              del self.inst
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *)__pyx_v_self)->inst != 0);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":1129
 *          if self.inst:
 *              #print "kill"
 *              del self.inst             # <<<<<<<<<<<<<<
 *     def __init__(self, list arg):
 *          self.inst = new vector[_String]()
 */
    delete ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":1130
 *              #print "kill"
 *              del self.inst
 *     def __init__(self, list arg):             # <<<<<<<<<<<<<<
 *          self.inst = new vector[_String]()
 * 
 */

static int __pyx_pf_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  struct __pyx_obj_9_pyOpenMS_String *__pyx_v_item = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br__String_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg), (&PyList_Type), 1, "arg", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":1131
 *              del self.inst
 *     def __init__(self, list arg):
 *          self.inst = new vector[_String]()             # <<<<<<<<<<<<<<
 * 
 *          cdef String item
 */
  ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *)__pyx_v_self)->inst = new std::vector<OpenMS::String>();

  /* "_pyOpenMS.pyx":1134
 * 
 *          cdef String item
 *          for item in arg:             # <<<<<<<<<<<<<<
 * 
 *              self.inst.push_back(deref(item.inst))
 */
  if (unlikely(((PyObject *)__pyx_v_arg) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_arg); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9_pyOpenMS_String))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v_item));
    __pyx_v_item = ((struct __pyx_obj_9_pyOpenMS_String *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "_pyOpenMS.pyx":1136
 *          for item in arg:
 * 
 *              self.inst.push_back(deref(item.inst))             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[_String] * conv(self):
 */
    ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *)__pyx_v_self)->inst->push_back((*__pyx_v_item->inst));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br__String_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1138
 *              self.inst.push_back(deref(item.inst))
 * 
 *     cdef vector[_String] * conv(self):             # <<<<<<<<<<<<<<
 *          return self.inst
 * 
 */

static std::vector<OpenMS::String> *__pyx_f_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br__conv(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *__pyx_v_self) {
  std::vector<OpenMS::String> *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conv");

  /* "_pyOpenMS.pyx":1139
 * 
 *     cdef vector[_String] * conv(self):
 *          return self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->inst;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1144
 * cdef class __Py_list_to_vector_Br__Precursor_Br_:
 *     cdef vector[_Precursor] * inst
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *          inst = NULL
 *     def __dealloc__(self):
 */

static int __pyx_pf_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  void *__pyx_v_inst;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":1145
 *     cdef vector[_Precursor] * inst
 *     def __cinit__(self):
 *          inst = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *          #print "dealloc", self
 */
  __pyx_v_inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1146
 *     def __cinit__(self):
 *          inst = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          #print "dealloc", self
 *          if self.inst:
 */

static void __pyx_pf_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br__1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br__1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":1148
 *     def __dealloc__(self):
 *          #print "dealloc", self
 *          if self.inst:             # <<<<<<<<<<<<<<
 *              #print "kill"
 *              del self.inst
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *)__pyx_v_self)->inst != 0);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":1150
 *          if self.inst:
 *              #print "kill"
 *              del self.inst             # <<<<<<<<<<<<<<
 *     def __init__(self, list arg):
 *          self.inst = new vector[_Precursor]()
 */
    delete ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":1151
 *              #print "kill"
 *              del self.inst
 *     def __init__(self, list arg):             # <<<<<<<<<<<<<<
 *          self.inst = new vector[_Precursor]()
 * 
 */

static int __pyx_pf_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  struct __pyx_obj_9_pyOpenMS_Precursor *__pyx_v_item = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br__Precursor_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg), (&PyList_Type), 1, "arg", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":1152
 *              del self.inst
 *     def __init__(self, list arg):
 *          self.inst = new vector[_Precursor]()             # <<<<<<<<<<<<<<
 * 
 *          cdef Precursor item
 */
  ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *)__pyx_v_self)->inst = new std::vector<OpenMS::Precursor>();

  /* "_pyOpenMS.pyx":1155
 * 
 *          cdef Precursor item
 *          for item in arg:             # <<<<<<<<<<<<<<
 * 
 *              self.inst.push_back(deref(item.inst))
 */
  if (unlikely(((PyObject *)__pyx_v_arg) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_arg); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9_pyOpenMS_Precursor))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v_item));
    __pyx_v_item = ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "_pyOpenMS.pyx":1157
 *          for item in arg:
 * 
 *              self.inst.push_back(deref(item.inst))             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[_Precursor] * conv(self):
 */
    ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *)__pyx_v_self)->inst->push_back((*__pyx_v_item->inst));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br__Precursor_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1159
 *              self.inst.push_back(deref(item.inst))
 * 
 *     cdef vector[_Precursor] * conv(self):             # <<<<<<<<<<<<<<
 *          return self.inst
 * 
 */

static std::vector<OpenMS::Precursor> *__pyx_f_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br__conv(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *__pyx_v_self) {
  std::vector<OpenMS::Precursor> *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conv");

  /* "_pyOpenMS.pyx":1160
 * 
 *     cdef vector[_Precursor] * conv(self):
 *          return self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->inst;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1165
 * cdef class __Py_list_to_vector_Br_double_Br_:
 *     cdef vector[double] * inst
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *          inst = NULL
 *     def __dealloc__(self):
 */

static int __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  void *__pyx_v_inst;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":1166
 *     cdef vector[double] * inst
 *     def __cinit__(self):
 *          inst = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *          #print "dealloc", self
 */
  __pyx_v_inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1167
 *     def __cinit__(self):
 *          inst = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          #print "dealloc", self
 *          if self.inst:
 */

static void __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br__1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br__1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":1169
 *     def __dealloc__(self):
 *          #print "dealloc", self
 *          if self.inst:             # <<<<<<<<<<<<<<
 *              #print "kill"
 *              del self.inst
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *)__pyx_v_self)->inst != 0);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":1171
 *          if self.inst:
 *              #print "kill"
 *              del self.inst             # <<<<<<<<<<<<<<
 *     def __init__(self, list arg):
 *          self.inst = new vector[double]()
 */
    delete ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":1172
 *              #print "kill"
 *              del self.inst
 *     def __init__(self, list arg):             # <<<<<<<<<<<<<<
 *          self.inst = new vector[double]()
 * 
 */

static int __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  float __pyx_v_item;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br_double_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg), (&PyList_Type), 1, "arg", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":1173
 *              del self.inst
 *     def __init__(self, list arg):
 *          self.inst = new vector[double]()             # <<<<<<<<<<<<<<
 * 
 *          cdef float item
 */
  ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *)__pyx_v_self)->inst = new std::vector<double>();

  /* "_pyOpenMS.pyx":1176
 * 
 *          cdef float item
 *          for item in arg:             # <<<<<<<<<<<<<<
 * 
 *              self.inst.push_back(item)
 */
  if (unlikely(((PyObject *)__pyx_v_arg) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_arg); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_item = __pyx_t_4;

    /* "_pyOpenMS.pyx":1178
 *          for item in arg:
 * 
 *              self.inst.push_back(item)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[double] * conv(self):
 */
    ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *)__pyx_v_self)->inst->push_back(__pyx_v_item);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br_double_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1180
 *              self.inst.push_back(item)
 * 
 *     cdef vector[double] * conv(self):             # <<<<<<<<<<<<<<
 *          return self.inst
 * 
 */

static std::vector<double> *__pyx_f_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br__conv(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *__pyx_v_self) {
  std::vector<double> *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conv");

  /* "_pyOpenMS.pyx":1181
 * 
 *     cdef vector[double] * conv(self):
 *          return self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->inst;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1186
 * cdef class __Py_list_to_vector_Br_string_Br_:
 *     cdef vector[string] * inst
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *          inst = NULL
 *     def __dealloc__(self):
 */

static int __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  void *__pyx_v_inst;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":1187
 *     cdef vector[string] * inst
 *     def __cinit__(self):
 *          inst = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *          #print "dealloc", self
 */
  __pyx_v_inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1188
 *     def __cinit__(self):
 *          inst = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          #print "dealloc", self
 *          if self.inst:
 */

static void __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br__1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br__1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":1190
 *     def __dealloc__(self):
 *          #print "dealloc", self
 *          if self.inst:             # <<<<<<<<<<<<<<
 *              #print "kill"
 *              del self.inst
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *)__pyx_v_self)->inst != 0);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":1192
 *          if self.inst:
 *              #print "kill"
 *              del self.inst             # <<<<<<<<<<<<<<
 *     def __init__(self, list arg):
 *          self.inst = new vector[string]()
 */
    delete ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":1193
 *              #print "kill"
 *              del self.inst
 *     def __init__(self, list arg):             # <<<<<<<<<<<<<<
 *          self.inst = new vector[string]()
 *          cdef __Py_str_to_string conv_item
 */

static int __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_conv_item = 0;
  PyObject *__pyx_v_item = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br_string_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg), (&PyList_Type), 1, "arg", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":1194
 *              del self.inst
 *     def __init__(self, list arg):
 *          self.inst = new vector[string]()             # <<<<<<<<<<<<<<
 *          cdef __Py_str_to_string conv_item
 *          cdef str item
 */
  ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *)__pyx_v_self)->inst = new std::vector<std::string>();

  /* "_pyOpenMS.pyx":1197
 *          cdef __Py_str_to_string conv_item
 *          cdef str item
 *          for item in arg:             # <<<<<<<<<<<<<<
 *              conv_item = __Py_str_to_string(item)
 *              self.inst.push_back(deref(conv_item.conv()))
 */
  if (unlikely(((PyObject *)__pyx_v_arg) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1197; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_arg); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected str, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v_item));
    __pyx_v_item = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "_pyOpenMS.pyx":1198
 *          cdef str item
 *          for item in arg:
 *              conv_item = __Py_str_to_string(item)             # <<<<<<<<<<<<<<
 *              self.inst.push_back(deref(conv_item.conv()))
 * 
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_v_item));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_item));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_item));
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS___Py_str_to_string)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_XDECREF(((PyObject *)__pyx_v_conv_item));
    __pyx_v_conv_item = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "_pyOpenMS.pyx":1199
 *          for item in arg:
 *              conv_item = __Py_str_to_string(item)
 *              self.inst.push_back(deref(conv_item.conv()))             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[string] * conv(self):
 */
    ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *)__pyx_v_self)->inst->push_back((*((struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string *)__pyx_v_conv_item->__pyx_vtab)->conv(__pyx_v_conv_item)));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br_string_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conv_item);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1201
 *              self.inst.push_back(deref(conv_item.conv()))
 * 
 *     cdef vector[string] * conv(self):             # <<<<<<<<<<<<<<
 *          return self.inst
 * 
 */

static std::vector<std::string> *__pyx_f_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br__conv(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *__pyx_v_self) {
  std::vector<std::string> *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conv");

  /* "_pyOpenMS.pyx":1202
 * 
 *     cdef vector[string] * conv(self):
 *          return self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->inst;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1207
 * cdef class __Py_list_to_vector_Br_int_Br_:
 *     cdef vector[int] * inst
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *          inst = NULL
 *     def __dealloc__(self):
 */

static int __pyx_pf_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  void *__pyx_v_inst;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":1208
 *     cdef vector[int] * inst
 *     def __cinit__(self):
 *          inst = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *          #print "dealloc", self
 */
  __pyx_v_inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1209
 *     def __cinit__(self):
 *          inst = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          #print "dealloc", self
 *          if self.inst:
 */

static void __pyx_pf_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br__1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br__1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":1211
 *     def __dealloc__(self):
 *          #print "dealloc", self
 *          if self.inst:             # <<<<<<<<<<<<<<
 *              #print "kill"
 *              del self.inst
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *)__pyx_v_self)->inst != 0);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":1213
 *          if self.inst:
 *              #print "kill"
 *              del self.inst             # <<<<<<<<<<<<<<
 *     def __init__(self, list arg):
 *          self.inst = new vector[int]()
 */
    delete ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":1214
 *              #print "kill"
 *              del self.inst
 *     def __init__(self, list arg):             # <<<<<<<<<<<<<<
 *          self.inst = new vector[int]()
 * 
 */

static int __pyx_pf_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br__2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_v_item;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br_int_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg), (&PyList_Type), 1, "arg", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":1215
 *              del self.inst
 *     def __init__(self, list arg):
 *          self.inst = new vector[int]()             # <<<<<<<<<<<<<<
 * 
 *          cdef int item
 */
  ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *)__pyx_v_self)->inst = new std::vector<int>();

  /* "_pyOpenMS.pyx":1218
 * 
 *          cdef int item
 *          for item in arg:             # <<<<<<<<<<<<<<
 * 
 *              self.inst.push_back(item)
 */
  if (unlikely(((PyObject *)__pyx_v_arg) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_arg); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_item = __pyx_t_4;

    /* "_pyOpenMS.pyx":1220
 *          for item in arg:
 * 
 *              self.inst.push_back(item)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[int] * conv(self):
 */
    ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *)__pyx_v_self)->inst->push_back(__pyx_v_item);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_pyOpenMS.__Py_list_to_vector_Br_int_Br_.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1222
 *              self.inst.push_back(item)
 * 
 *     cdef vector[int] * conv(self):             # <<<<<<<<<<<<<<
 *          return self.inst
 * 
 */

static std::vector<int> *__pyx_f_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br__conv(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *__pyx_v_self) {
  std::vector<int> *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conv");

  /* "_pyOpenMS.pyx":1223
 * 
 *     cdef vector[int] * conv(self):
 *          return self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->inst;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1228
 * cdef class __Py_str_to_string:
 *     cdef string * inst
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *          inst = NULL
 *     def __dealloc__(self):
 */

static int __pyx_pf_9_pyOpenMS_18__Py_str_to_string___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_18__Py_str_to_string___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  void *__pyx_v_inst;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":1229
 *     cdef string * inst
 *     def __cinit__(self):
 *          inst = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *          #print "dealloc", self
 */
  __pyx_v_inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1230
 *     def __cinit__(self):
 *          inst = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          #print "dealloc", self
 *          if self.inst:
 */

static void __pyx_pf_9_pyOpenMS_18__Py_str_to_string_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_18__Py_str_to_string_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":1232
 *     def __dealloc__(self):
 *          #print "dealloc", self
 *          if self.inst:             # <<<<<<<<<<<<<<
 *              #print "kill"
 *              del self.inst
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_v_self)->inst != 0);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":1234
 *          if self.inst:
 *              #print "kill"
 *              del self.inst             # <<<<<<<<<<<<<<
 *     def __init__(self, str arg):
 *          self.inst = new string(PyString_AsString(arg))
 */
    delete ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":1235
 *              #print "kill"
 *              del self.inst
 *     def __init__(self, str arg):             # <<<<<<<<<<<<<<
 *          self.inst = new string(PyString_AsString(arg))
 *     cdef string * conv(self):
 */

static int __pyx_pf_9_pyOpenMS_18__Py_str_to_string_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_18__Py_str_to_string_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.__Py_str_to_string.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg), (&PyString_Type), 1, "arg", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":1236
 *              del self.inst
 *     def __init__(self, str arg):
 *          self.inst = new string(PyString_AsString(arg))             # <<<<<<<<<<<<<<
 *     cdef string * conv(self):
 *          return self.inst
 */
  __pyx_t_1 = PyString_AsString(((PyObject *)__pyx_v_arg)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)__pyx_v_self)->inst = new std::string(__pyx_t_1);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.__Py_str_to_string.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1237
 *     def __init__(self, str arg):
 *          self.inst = new string(PyString_AsString(arg))
 *     cdef string * conv(self):             # <<<<<<<<<<<<<<
 *          return self.inst
 * 
 */

static std::string *__pyx_f_9_pyOpenMS_18__Py_str_to_string_conv(struct __pyx_obj_9_pyOpenMS___Py_str_to_string *__pyx_v_self) {
  std::string *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conv");

  /* "_pyOpenMS.pyx":1238
 *          self.inst = new string(PyString_AsString(arg))
 *     cdef string * conv(self):
 *          return self.inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->inst;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1243
 * cdef class __Py_str_to_char__ptr__:
 *     cdef char * inst
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = NULL
 *     def __dealloc__(self):
 */

static int __pyx_pf_9_pyOpenMS_23__Py_str_to_char__ptr_____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_23__Py_str_to_char__ptr_____cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "_pyOpenMS.pyx":1244
 *     cdef char * inst
 *     def __cinit__(self):
 *         self.inst = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *          #print "dealloc", self
 */
  ((struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *)__pyx_v_self)->inst = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1245
 *     def __cinit__(self):
 *         self.inst = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          #print "dealloc", self
 *          if self.inst:
 */

static void __pyx_pf_9_pyOpenMS_23__Py_str_to_char__ptr___1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_23__Py_str_to_char__ptr___1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":1247
 *     def __dealloc__(self):
 *          #print "dealloc", self
 *          if self.inst:             # <<<<<<<<<<<<<<
 *              #print "kill"
 *              free(self.inst)
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *)__pyx_v_self)->inst != 0);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":1249
 *          if self.inst:
 *              #print "kill"
 *              free(self.inst)             # <<<<<<<<<<<<<<
 *     def __init__(self, str arg):
 *          self.inst = PyString_AsString(arg)
 */
    free(((struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *)__pyx_v_self)->inst);
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":1250
 *              #print "kill"
 *              free(self.inst)
 *     def __init__(self, str arg):             # <<<<<<<<<<<<<<
 *          self.inst = PyString_AsString(arg)
 *     cdef char * conv(self):
 */

static int __pyx_pf_9_pyOpenMS_23__Py_str_to_char__ptr___2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_23__Py_str_to_char__ptr___2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.__Py_str_to_char__ptr__.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arg), (&PyString_Type), 1, "arg", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":1251
 *              free(self.inst)
 *     def __init__(self, str arg):
 *          self.inst = PyString_AsString(arg)             # <<<<<<<<<<<<<<
 *     cdef char * conv(self):
 *          return self.inst
 */
  __pyx_t_1 = PyString_AsString(((PyObject *)__pyx_v_arg)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *)__pyx_v_self)->inst = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.__Py_str_to_char__ptr__.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":1252
 *     def __init__(self, str arg):
 *          self.inst = PyString_AsString(arg)
 *     cdef char * conv(self):             # <<<<<<<<<<<<<<
 *          return self.inst
 * 
 */

static char *__pyx_f_9_pyOpenMS_23__Py_str_to_char__ptr___conv(struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *__pyx_v_self) {
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("conv");

  /* "_pyOpenMS.pyx":1253
 *          self.inst = PyString_AsString(arg)
 *     cdef char * conv(self):
 *          return self.inst             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_r = __pyx_v_self->inst;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":190
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

static CYTHON_UNUSED int __pyx_pf_5numpy_7ndarray___getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pf_5numpy_7ndarray___getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__");
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "numpy.pxd":196
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = (__pyx_v_info == NULL);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "numpy.pxd":199
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":200
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":202
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(((PyArrayObject *)__pyx_v_self));

  /* "numpy.pxd":204
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_1) {

    /* "numpy.pxd":205
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "numpy.pxd":207
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L6:;

  /* "numpy.pxd":209
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS);
  if (__pyx_t_1) {

    /* "numpy.pxd":210
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = (!PyArray_CHKFLAGS(((PyArrayObject *)__pyx_v_self), NPY_C_CONTIGUOUS));
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "numpy.pxd":211
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "numpy.pxd":213
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = ((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS);
  if (__pyx_t_3) {

    /* "numpy.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = (!PyArray_CHKFLAGS(((PyArrayObject *)__pyx_v_self), NPY_F_CONTIGUOUS));
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_29), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "numpy.pxd":217
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(((PyArrayObject *)__pyx_v_self));

  /* "numpy.pxd":218
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "numpy.pxd":219
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  if (__pyx_v_copy_shape) {

    /* "numpy.pxd":222
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "numpy.pxd":223
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "numpy.pxd":224
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "numpy.pxd":225
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(((PyArrayObject *)__pyx_v_self))[__pyx_v_i]);

      /* "numpy.pxd":226
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(((PyArrayObject *)__pyx_v_self))[__pyx_v_i]);
    }
    goto __pyx_L9;
  }
  /*else*/ {

    /* "numpy.pxd":228
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(((PyArrayObject *)__pyx_v_self)));

    /* "numpy.pxd":229
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(((PyArrayObject *)__pyx_v_self)));
  }
  __pyx_L9:;

  /* "numpy.pxd":230
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "numpy.pxd":231
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(((PyArrayObject *)__pyx_v_self));

  /* "numpy.pxd":232
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!PyArray_ISWRITEABLE(((PyArrayObject *)__pyx_v_self)));

  /* "numpy.pxd":235
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "numpy.pxd":236
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __Pyx_INCREF(((PyObject *)((PyArrayObject *)__pyx_v_self)->descr));
  __pyx_v_descr = ((PyArrayObject *)__pyx_v_self)->descr;

  /* "numpy.pxd":240
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "numpy.pxd":242
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = (!__pyx_v_hasfields);
  if (__pyx_t_2) {
    __pyx_t_3 = (!__pyx_v_copy_shape);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "numpy.pxd":244
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L12;
  }
  /*else*/ {

    /* "numpy.pxd":247
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = __pyx_v_self;
  }
  __pyx_L12:;

  /* "numpy.pxd":249
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or
 */
  __pyx_t_1 = (!__pyx_v_hasfields);
  if (__pyx_t_1) {

    /* "numpy.pxd":250
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 */
    __pyx_v_t = __pyx_v_descr->type_num;

    /* "numpy.pxd":251
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = (__pyx_v_descr->byteorder == '>');
    if (__pyx_t_1) {
      __pyx_t_2 = __pyx_v_little_endian;
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "numpy.pxd":252
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = (__pyx_v_descr->byteorder == '<');
      if (__pyx_t_1) {
        __pyx_t_3 = (!__pyx_v_little_endian);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "numpy.pxd":253
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_31), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L14;
    }
    __pyx_L14:;

    /* "numpy.pxd":254
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_BYTE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__b;
      goto __pyx_L15;
    }

    /* "numpy.pxd":255
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_UBYTE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__B;
      goto __pyx_L15;
    }

    /* "numpy.pxd":256
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_SHORT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__h;
      goto __pyx_L15;
    }

    /* "numpy.pxd":257
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_USHORT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__H;
      goto __pyx_L15;
    }

    /* "numpy.pxd":258
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_INT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__i;
      goto __pyx_L15;
    }

    /* "numpy.pxd":259
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_UINT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__I;
      goto __pyx_L15;
    }

    /* "numpy.pxd":260
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__l;
      goto __pyx_L15;
    }

    /* "numpy.pxd":261
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_ULONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__L;
      goto __pyx_L15;
    }

    /* "numpy.pxd":262
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONGLONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__q;
      goto __pyx_L15;
    }

    /* "numpy.pxd":263
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_ULONGLONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Q;
      goto __pyx_L15;
    }

    /* "numpy.pxd":264
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_FLOAT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__f;
      goto __pyx_L15;
    }

    /* "numpy.pxd":265
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_DOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__d;
      goto __pyx_L15;
    }

    /* "numpy.pxd":266
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONGDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__g;
      goto __pyx_L15;
    }

    /* "numpy.pxd":267
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CFLOAT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zf;
      goto __pyx_L15;
    }

    /* "numpy.pxd":268
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zd;
      goto __pyx_L15;
    }

    /* "numpy.pxd":269
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CLONGDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zg;
      goto __pyx_L15;
    }

    /* "numpy.pxd":270
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    __pyx_t_1 = (__pyx_v_t == NPY_OBJECT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__O;
      goto __pyx_L15;
    }
    /*else*/ {

      /* "numpy.pxd":272
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_32), __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_8));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
      __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L15:;

    /* "numpy.pxd":273
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "numpy.pxd":274
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L13;
  }
  /*else*/ {

    /* "numpy.pxd":276
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = '^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "numpy.pxd":277
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = '^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "numpy.pxd":278
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = '^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "numpy.pxd":281
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)             # <<<<<<<<<<<<<<
 *                 f[0] = 0 # Terminate format string
 * 
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "numpy.pxd":282
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = 0 # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = 0;
  }
  __pyx_L13:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":284
 *                 f[0] = 0 # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

static CYTHON_UNUSED void __pyx_pf_5numpy_7ndarray_1__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pf_5numpy_7ndarray_1__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__");

  /* "numpy.pxd":285
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = PyArray_HASFIELDS(((PyArrayObject *)__pyx_v_self));
  if (__pyx_t_1) {

    /* "numpy.pxd":286
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "numpy.pxd":287
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_1) {

    /* "numpy.pxd":288
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L6;
  }
  __pyx_L6:;

  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":764
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1");

  /* "numpy.pxd":765
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":767
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2");

  /* "numpy.pxd":768
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":770
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3");

  /* "numpy.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":773
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4");

  /* "numpy.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":776
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5");

  /* "numpy.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":779
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  char *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring");

  /* "numpy.pxd":786
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":787
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":790
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(((PyObject *)__pyx_v_descr->names) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 790; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_descr->names); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    __Pyx_XDECREF(__pyx_v_childname);
    __pyx_v_childname = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "numpy.pxd":791
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v_fields));
    __pyx_v_fields = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "numpy.pxd":792
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 */
    if (likely(PyTuple_CheckExact(((PyObject *)__pyx_v_fields)))) {
      PyObject* sequence = ((PyObject *)__pyx_v_fields);
      if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
        if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
        else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
    } else {
      __Pyx_UnpackTupleError(((PyObject *)__pyx_v_fields), 2);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v_child));
    __pyx_v_child = ((PyArray_Descr *)__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_v_new_offset);
    __pyx_v_new_offset = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "numpy.pxd":794
 *         child, new_offset = fields
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = PyInt_FromLong((__pyx_v_end - __pyx_v_f)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_15, Py_LT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "numpy.pxd":795
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_34), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "numpy.pxd":797
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == '>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_6 = (__pyx_v_child->byteorder == '>');
    if (__pyx_t_6) {
      __pyx_t_7 = __pyx_v_little_endian;
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    if (!__pyx_t_7) {

      /* "numpy.pxd":798
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_6 = (__pyx_v_child->byteorder == '<');
      if (__pyx_t_6) {
        __pyx_t_8 = (!__pyx_v_little_endian);
        __pyx_t_9 = __pyx_t_8;
      } else {
        __pyx_t_9 = __pyx_t_6;
      }
      __pyx_t_6 = __pyx_t_9;
    } else {
      __pyx_t_6 = __pyx_t_7;
    }
    if (__pyx_t_6) {

      /* "numpy.pxd":799
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_35), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "numpy.pxd":809
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_5 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_v_new_offset, Py_LT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_6) break;

      /* "numpy.pxd":810
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "numpy.pxd":811
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "numpy.pxd":812
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_10 = 0;
      (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + 1);
    }

    /* "numpy.pxd":814
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_10 = 0;
    (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + __pyx_v_child->elsize);

    /* "numpy.pxd":816
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = (!PyDataType_HASFIELDS(__pyx_v_child));
    if (__pyx_t_6) {

      /* "numpy.pxd":817
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_3 = PyInt_FromLong(__pyx_v_child->type_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF(__pyx_v_t);
      __pyx_v_t = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "numpy.pxd":818
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = ((__pyx_v_end - __pyx_v_f) < 5);
      if (__pyx_t_6) {

        /* "numpy.pxd":819
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_3 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_37), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L10;
      }
      __pyx_L10:;

      /* "numpy.pxd":822
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L11;
      }

      /* "numpy.pxd":823
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L11;
      }

      /* "numpy.pxd":824
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L11;
      }

      /* "numpy.pxd":825
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L11;
      }

      /* "numpy.pxd":826
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L11;
      }

      /* "numpy.pxd":827
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L11;
      }

      /* "numpy.pxd":828
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L11;
      }

      /* "numpy.pxd":829
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L11;
      }

      /* "numpy.pxd":830
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L11;
      }

      /* "numpy.pxd":831
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L11;
      }

      /* "numpy.pxd":832
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L11;
      }

      /* "numpy.pxd":833
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_5 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L11;
      }

      /* "numpy.pxd":834
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L11;
      }

      /* "numpy.pxd":835
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "numpy.pxd":836
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "numpy.pxd":837
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "numpy.pxd":838
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_3 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "numpy.pxd":840
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_32), __pyx_v_t); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_5));
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L11:;

      /* "numpy.pxd":841
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "numpy.pxd":845
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_11 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_11;
    }
    __pyx_L9:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "numpy.pxd":846
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":961
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_array_base");

  /* "numpy.pxd":963
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  if (__pyx_t_1) {

    /* "numpy.pxd":964
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":966
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "numpy.pxd":967
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "numpy.pxd":968
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "numpy.pxd":969
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":971
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base");

  /* "numpy.pxd":972
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = (__pyx_v_arr->base == NULL);
  if (__pyx_t_1) {

    /* "numpy.pxd":973
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":975
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9_pyOpenMS_Peak1D __pyx_vtable_9_pyOpenMS_Peak1D;

static PyObject *__pyx_tp_new_9_pyOpenMS_Peak1D(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_Peak1D *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_Peak1D *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_Peak1D;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_6Peak1D___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_Peak1D(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_Peak1D *p = (struct __pyx_obj_9_pyOpenMS_Peak1D *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_6Peak1D_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_Peak1D(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_Peak1D *p = (struct __pyx_obj_9_pyOpenMS_Peak1D *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_Peak1D(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_Peak1D *p = (struct __pyx_obj_9_pyOpenMS_Peak1D *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_Peak1D[] = {
  {__Pyx_NAMESTR("setMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_6Peak1D_3setMZ, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_6Peak1D_4getMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_6Peak1D_5getIntensity, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_6Peak1D_6setIntensity, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Peak1D = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Peak1D = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Peak1D = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Peak1D = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_Peak1D = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.Peak1D"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_Peak1D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_Peak1D, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Peak1D, /*tp_as_number*/
  &__pyx_tp_as_sequence_Peak1D, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Peak1D, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Peak1D, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_Peak1D, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_Peak1D, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_Peak1D, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_6Peak1D_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_Peak1D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_Precursor __pyx_vtable_9_pyOpenMS_Precursor;

static PyObject *__pyx_tp_new_9_pyOpenMS_Precursor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_Precursor *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_Precursor *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_Precursor;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_9Precursor___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_Precursor(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_Precursor *p = (struct __pyx_obj_9_pyOpenMS_Precursor *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_9Precursor_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_Precursor(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_Precursor *p = (struct __pyx_obj_9_pyOpenMS_Precursor *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_Precursor(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_Precursor *p = (struct __pyx_obj_9_pyOpenMS_Precursor *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_Precursor[] = {
  {__Pyx_NAMESTR("setMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_9Precursor_3setMZ, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_9Precursor_4getIntensity, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_9Precursor_5getMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_9Precursor_6setIntensity, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Precursor = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Precursor = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Precursor = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Precursor = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_Precursor = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.Precursor"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_Precursor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_Precursor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Precursor, /*tp_as_number*/
  &__pyx_tp_as_sequence_Precursor, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Precursor, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Precursor, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_Precursor, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_Precursor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_Precursor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_9Precursor_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_Precursor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment __pyx_vtable_9_pyOpenMS_MSExperiment;

static PyObject *__pyx_tp_new_9_pyOpenMS_MSExperiment(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MSExperiment *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MSExperiment;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_12MSExperiment___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MSExperiment(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MSExperiment *p = (struct __pyx_obj_9_pyOpenMS_MSExperiment *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_12MSExperiment_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_MSExperiment(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *p = (struct __pyx_obj_9_pyOpenMS_MSExperiment *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_MSExperiment(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MSExperiment *p = (struct __pyx_obj_9_pyOpenMS_MSExperiment *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_9_pyOpenMS_MSExperiment(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MSExperiment[] = {
  {__Pyx_NAMESTR("sortSpectra"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_3sortSpectra, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMaxRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_4getMaxRT, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMinMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_5getMinMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("push_back"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_6push_back, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("updateRanges"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_7updateRanges, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMaxMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_9getMaxMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMinRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_10getMinRT, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_11size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MSExperiment = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MSExperiment = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9_pyOpenMS_MSExperiment, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MSExperiment = {
  0, /*mp_length*/
  __pyx_pf_9_pyOpenMS_12MSExperiment_8__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MSExperiment = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MSExperiment = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MSExperiment"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MSExperiment), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MSExperiment, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MSExperiment, /*tp_as_number*/
  &__pyx_tp_as_sequence_MSExperiment, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MSExperiment, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MSExperiment, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_MSExperiment, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_MSExperiment, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MSExperiment, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_12MSExperiment_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MSExperiment, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings __pyx_vtable_9_pyOpenMS_InstrumentSettings;

static PyObject *__pyx_tp_new_9_pyOpenMS_InstrumentSettings(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_InstrumentSettings *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_InstrumentSettings;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_18InstrumentSettings___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_InstrumentSettings(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_InstrumentSettings *p = (struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_18InstrumentSettings_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_InstrumentSettings(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_InstrumentSettings *p = (struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_InstrumentSettings(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_InstrumentSettings *p = (struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_InstrumentSettings[] = {
  {__Pyx_NAMESTR("setPolarity"), (PyCFunction)__pyx_pf_9_pyOpenMS_18InstrumentSettings_3setPolarity, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getPolarity"), (PyCFunction)__pyx_pf_9_pyOpenMS_18InstrumentSettings_4getPolarity, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_InstrumentSettings = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_InstrumentSettings = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_InstrumentSettings = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_InstrumentSettings = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_InstrumentSettings = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.InstrumentSettings"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_InstrumentSettings), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_InstrumentSettings, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_InstrumentSettings, /*tp_as_number*/
  &__pyx_tp_as_sequence_InstrumentSettings, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_InstrumentSettings, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_InstrumentSettings, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_InstrumentSettings, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_InstrumentSettings, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_InstrumentSettings, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_18InstrumentSettings_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_InstrumentSettings, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools __pyx_vtable_9_pyOpenMS_ChromatogramTools;

static PyObject *__pyx_tp_new_9_pyOpenMS_ChromatogramTools(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_ChromatogramTools *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_ChromatogramTools;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_17ChromatogramTools___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_ChromatogramTools(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_ChromatogramTools *p = (struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_17ChromatogramTools_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_ChromatogramTools(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_ChromatogramTools *p = (struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_ChromatogramTools(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_ChromatogramTools *p = (struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_ChromatogramTools[] = {
  {__Pyx_NAMESTR("convertChromatogramsToSpectra"), (PyCFunction)__pyx_pf_9_pyOpenMS_17ChromatogramTools_3convertChromatogramsToSpectra, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("convertSpectraToChromatograms"), (PyCFunction)__pyx_pf_9_pyOpenMS_17ChromatogramTools_4convertSpectraToChromatograms, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ChromatogramTools = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ChromatogramTools = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ChromatogramTools = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_ChromatogramTools = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_ChromatogramTools = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.ChromatogramTools"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_ChromatogramTools), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_ChromatogramTools, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ChromatogramTools, /*tp_as_number*/
  &__pyx_tp_as_sequence_ChromatogramTools, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ChromatogramTools, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_ChromatogramTools, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_ChromatogramTools, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_ChromatogramTools, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_ChromatogramTools, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_17ChromatogramTools_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_ChromatogramTools, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9_pyOpenMS_Polarity(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_Polarity(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_Polarity[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Polarity = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Polarity = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Polarity = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Polarity = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_Polarity = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.Polarity"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_Polarity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_Polarity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Polarity, /*tp_as_number*/
  &__pyx_tp_as_sequence_Polarity, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Polarity, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Polarity, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_Polarity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_Polarity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile __pyx_vtable_9_pyOpenMS_MzXMLFile;

static PyObject *__pyx_tp_new_9_pyOpenMS_MzXMLFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MzXMLFile *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MzXMLFile;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_9MzXMLFile___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MzXMLFile(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MzXMLFile *p = (struct __pyx_obj_9_pyOpenMS_MzXMLFile *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_9MzXMLFile_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_MzXMLFile(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_MzXMLFile *p = (struct __pyx_obj_9_pyOpenMS_MzXMLFile *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_MzXMLFile(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MzXMLFile *p = (struct __pyx_obj_9_pyOpenMS_MzXMLFile *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MzXMLFile[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_9MzXMLFile_3load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_9MzXMLFile_4store, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MzXMLFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MzXMLFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MzXMLFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MzXMLFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MzXMLFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MzXMLFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MzXMLFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MzXMLFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MzXMLFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_MzXMLFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MzXMLFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MzXMLFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_MzXMLFile, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_MzXMLFile, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MzXMLFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_9MzXMLFile_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MzXMLFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile __pyx_vtable_9_pyOpenMS_MzMLFile;

static PyObject *__pyx_tp_new_9_pyOpenMS_MzMLFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MzMLFile *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MzMLFile *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MzMLFile;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_8MzMLFile___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MzMLFile(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MzMLFile *p = (struct __pyx_obj_9_pyOpenMS_MzMLFile *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_8MzMLFile_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_MzMLFile(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_MzMLFile *p = (struct __pyx_obj_9_pyOpenMS_MzMLFile *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_MzMLFile(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MzMLFile *p = (struct __pyx_obj_9_pyOpenMS_MzMLFile *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MzMLFile[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_8MzMLFile_3load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_8MzMLFile_4store, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MzMLFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MzMLFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MzMLFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MzMLFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MzMLFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MzMLFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MzMLFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MzMLFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MzMLFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_MzMLFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MzMLFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MzMLFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_MzMLFile, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_MzMLFile, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MzMLFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_8MzMLFile_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MzMLFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile __pyx_vtable_9_pyOpenMS_MzDataFile;

static PyObject *__pyx_tp_new_9_pyOpenMS_MzDataFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MzDataFile *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MzDataFile *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MzDataFile;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_10MzDataFile___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MzDataFile(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MzDataFile *p = (struct __pyx_obj_9_pyOpenMS_MzDataFile *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_10MzDataFile_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_MzDataFile(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_MzDataFile *p = (struct __pyx_obj_9_pyOpenMS_MzDataFile *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_MzDataFile(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MzDataFile *p = (struct __pyx_obj_9_pyOpenMS_MzDataFile *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MzDataFile[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MzDataFile_3load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MzDataFile_4store, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MzDataFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MzDataFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MzDataFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MzDataFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MzDataFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MzDataFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MzDataFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MzDataFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MzDataFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_MzDataFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MzDataFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MzDataFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_MzDataFile, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_MzDataFile, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MzDataFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_10MzDataFile_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MzDataFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_StringList __pyx_vtable_9_pyOpenMS_StringList;

static PyObject *__pyx_tp_new_9_pyOpenMS_StringList(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_StringList *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_StringList *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_StringList;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_10StringList___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_StringList(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_StringList *p = (struct __pyx_obj_9_pyOpenMS_StringList *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_10StringList_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_StringList(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_StringList *p = (struct __pyx_obj_9_pyOpenMS_StringList *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_StringList(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_StringList *p = (struct __pyx_obj_9_pyOpenMS_StringList *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_StringList[] = {
  {__Pyx_NAMESTR("at"), (PyCFunction)__pyx_pf_9_pyOpenMS_10StringList_3at, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_10StringList_4size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_StringList = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_StringList = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_StringList = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_StringList = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_StringList = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.StringList"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_StringList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_StringList, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_StringList, /*tp_as_number*/
  &__pyx_tp_as_sequence_StringList, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_StringList, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_StringList, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_StringList, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_StringList, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_StringList, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_10StringList_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_StringList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_IntList __pyx_vtable_9_pyOpenMS_IntList;

static PyObject *__pyx_tp_new_9_pyOpenMS_IntList(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_IntList *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_IntList *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_IntList;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_7IntList___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_IntList(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_IntList *p = (struct __pyx_obj_9_pyOpenMS_IntList *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_7IntList_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_IntList(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_IntList *p = (struct __pyx_obj_9_pyOpenMS_IntList *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_IntList(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_IntList *p = (struct __pyx_obj_9_pyOpenMS_IntList *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_IntList[] = {
  {__Pyx_NAMESTR("at"), (PyCFunction)__pyx_pf_9_pyOpenMS_7IntList_3at, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_7IntList_4size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_IntList = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_IntList = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_IntList = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_IntList = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_IntList = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.IntList"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_IntList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_IntList, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_IntList, /*tp_as_number*/
  &__pyx_tp_as_sequence_IntList, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_IntList, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_IntList, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_IntList, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_IntList, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_IntList, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_7IntList_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_IntList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_DoubleList __pyx_vtable_9_pyOpenMS_DoubleList;

static PyObject *__pyx_tp_new_9_pyOpenMS_DoubleList(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_DoubleList *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_DoubleList *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_DoubleList;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_10DoubleList___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_DoubleList(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_DoubleList *p = (struct __pyx_obj_9_pyOpenMS_DoubleList *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_10DoubleList_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_DoubleList(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_DoubleList *p = (struct __pyx_obj_9_pyOpenMS_DoubleList *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_DoubleList(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_DoubleList *p = (struct __pyx_obj_9_pyOpenMS_DoubleList *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_DoubleList[] = {
  {__Pyx_NAMESTR("at"), (PyCFunction)__pyx_pf_9_pyOpenMS_10DoubleList_3at, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_10DoubleList_4size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_DoubleList = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_DoubleList = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_DoubleList = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_DoubleList = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_DoubleList = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.DoubleList"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_DoubleList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_DoubleList, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_DoubleList, /*tp_as_number*/
  &__pyx_tp_as_sequence_DoubleList, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_DoubleList, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_DoubleList, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_DoubleList, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_DoubleList, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_DoubleList, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_10DoubleList_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_DoubleList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_Param __pyx_vtable_9_pyOpenMS_Param;

static PyObject *__pyx_tp_new_9_pyOpenMS_Param(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_Param *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_Param *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_Param;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_5Param___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_Param(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_Param *p = (struct __pyx_obj_9_pyOpenMS_Param *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_5Param_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_Param(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_Param *p = (struct __pyx_obj_9_pyOpenMS_Param *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_Param(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_Param *p = (struct __pyx_obj_9_pyOpenMS_Param *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_Param[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_3load, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("exists"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_4exists, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getDescription"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_5getDescription, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMaxInt"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_6setMaxInt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMinInt"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_7setMinInt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_8size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMinFloat"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_9setMinFloat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setValidStrings"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_10setValidStrings, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getSectionDescription"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_11getSectionDescription, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("hasTag"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_12hasTag, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("empty"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_13empty, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setValue"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_14setValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("addTags"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_15addTags, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("copy"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_16copy, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getTags"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_17getTags, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("insert"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_18insert, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("clear"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_19clear, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMaxFloat"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_20setMaxFloat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("remove"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_21remove, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getValue"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_22getValue, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("removeAll"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_23removeAll, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("clearTags"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_24clearTags, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_25store, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setSectionDescription"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_26setSectionDescription, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("addTag"), (PyCFunction)__pyx_pf_9_pyOpenMS_5Param_27addTag, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Param = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Param = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Param = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Param = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_Param = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.Param"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_Param), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_Param, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Param, /*tp_as_number*/
  &__pyx_tp_as_sequence_Param, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Param, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Param, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_Param, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_Param, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_Param, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_5Param_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_Param, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_String __pyx_vtable_9_pyOpenMS_String;

static PyObject *__pyx_tp_new_9_pyOpenMS_String(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_String *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_String *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_String;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_6String___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_String(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_String *p = (struct __pyx_obj_9_pyOpenMS_String *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_6String_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_String(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_String *p = (struct __pyx_obj_9_pyOpenMS_String *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_String(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_String *p = (struct __pyx_obj_9_pyOpenMS_String *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_String[] = {
  {__Pyx_NAMESTR("c_str"), (PyCFunction)__pyx_pf_9_pyOpenMS_6String_3c_str, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_String = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_String = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_String = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_String = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_String = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.String"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_String), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_String, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_String, /*tp_as_number*/
  &__pyx_tp_as_sequence_String, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_String, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_String, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_String, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_String, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_String, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_6String_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_String, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_SourceFile __pyx_vtable_9_pyOpenMS_SourceFile;

static PyObject *__pyx_tp_new_9_pyOpenMS_SourceFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_SourceFile *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_SourceFile *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_SourceFile;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_10SourceFile___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_SourceFile(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_SourceFile *p = (struct __pyx_obj_9_pyOpenMS_SourceFile *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_10SourceFile_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_SourceFile(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_SourceFile *p = (struct __pyx_obj_9_pyOpenMS_SourceFile *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_SourceFile(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_SourceFile *p = (struct __pyx_obj_9_pyOpenMS_SourceFile *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_SourceFile[] = {
  {__Pyx_NAMESTR("setNativeIDType"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_3setNativeIDType, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getChecksum"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_4getChecksum, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getNativeIDType"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_5getNativeIDType, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setFileType"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_6setFileType, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getFileSize"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_7getFileSize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setNameOfFile"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_8setNameOfFile, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getPathToFile"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_9getPathToFile, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setPathToFile"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_10setPathToFile, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getFileType"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_11getFileType, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setFileSize"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_12setFileSize, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getNameOfFile"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_13getNameOfFile, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getChecksumType"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_14getChecksumType, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setChecksum"), (PyCFunction)__pyx_pf_9_pyOpenMS_10SourceFile_15setChecksum, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SourceFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SourceFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SourceFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SourceFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_SourceFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.SourceFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_SourceFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_SourceFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SourceFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_SourceFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SourceFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SourceFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_SourceFile, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_SourceFile, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_SourceFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_10SourceFile_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_SourceFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9_pyOpenMS_ChecksumType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_ChecksumType(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_ChecksumType[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ChecksumType = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ChecksumType = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ChecksumType = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_ChecksumType = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_ChecksumType = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.ChecksumType"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_ChecksumType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_ChecksumType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ChecksumType, /*tp_as_number*/
  &__pyx_tp_as_sequence_ChecksumType, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ChecksumType, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_ChecksumType, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_ChecksumType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_ChecksumType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_DataValue __pyx_vtable_9_pyOpenMS_DataValue;

static PyObject *__pyx_tp_new_9_pyOpenMS_DataValue(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_DataValue *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_DataValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_DataValue;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_9DataValue___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_DataValue(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_DataValue *p = (struct __pyx_obj_9_pyOpenMS_DataValue *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_9DataValue_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_DataValue(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_DataValue *p = (struct __pyx_obj_9_pyOpenMS_DataValue *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_DataValue(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_DataValue *p = (struct __pyx_obj_9_pyOpenMS_DataValue *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_DataValue[] = {
  {__Pyx_NAMESTR("intValue"), (PyCFunction)__pyx_pf_9_pyOpenMS_9DataValue_3intValue, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stringValue"), (PyCFunction)__pyx_pf_9_pyOpenMS_9DataValue_4stringValue, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("floatValue"), (PyCFunction)__pyx_pf_9_pyOpenMS_9DataValue_5floatValue, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("stringList"), (PyCFunction)__pyx_pf_9_pyOpenMS_9DataValue_6stringList, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_DataValue = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_DataValue = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_DataValue = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_DataValue = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_DataValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.DataValue"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_DataValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_DataValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_DataValue, /*tp_as_number*/
  &__pyx_tp_as_sequence_DataValue, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_DataValue, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_DataValue, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_DataValue, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_DataValue, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_DataValue, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_9DataValue_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_DataValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_SavitzkyGolayFilter __pyx_vtable_9_pyOpenMS_SavitzkyGolayFilter;

static PyObject *__pyx_tp_new_9_pyOpenMS_SavitzkyGolayFilter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_SavitzkyGolayFilter;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_SavitzkyGolayFilter(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *p = (struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_SavitzkyGolayFilter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *p = (struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_SavitzkyGolayFilter(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *p = (struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_SavitzkyGolayFilter[] = {
  {__Pyx_NAMESTR("filter"), (PyCFunction)__pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_3filter, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("filterExperiment"), (PyCFunction)__pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_4filterExperiment, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SavitzkyGolayFilter = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SavitzkyGolayFilter = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SavitzkyGolayFilter = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SavitzkyGolayFilter = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_SavitzkyGolayFilter = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.SavitzkyGolayFilter"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_SavitzkyGolayFilter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SavitzkyGolayFilter, /*tp_as_number*/
  &__pyx_tp_as_sequence_SavitzkyGolayFilter, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SavitzkyGolayFilter, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SavitzkyGolayFilter, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_SavitzkyGolayFilter, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_SavitzkyGolayFilter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_SavitzkyGolayFilter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_19SavitzkyGolayFilter_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_SavitzkyGolayFilter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum __pyx_vtable_9_pyOpenMS_MSSpectrum;

static PyObject *__pyx_tp_new_9_pyOpenMS_MSSpectrum(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MSSpectrum *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MSSpectrum;
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_9_pyOpenMS_10MSSpectrum___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MSSpectrum(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MSSpectrum *p = (struct __pyx_obj_9_pyOpenMS_MSSpectrum *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_10MSSpectrum_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->_cons_sig));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9_pyOpenMS_MSSpectrum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9_pyOpenMS_MSSpectrum *p = (struct __pyx_obj_9_pyOpenMS_MSSpectrum *)o;
  if (p->_cons_sig) {
    e = (*v)(p->_cons_sig, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9_pyOpenMS_MSSpectrum(PyObject *o) {
  struct __pyx_obj_9_pyOpenMS_MSSpectrum *p = (struct __pyx_obj_9_pyOpenMS_MSSpectrum *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_cons_sig);
  p->_cons_sig = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_9_pyOpenMS_MSSpectrum(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MSSpectrum[] = {
  {__Pyx_NAMESTR("getRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_3getRT, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setSourceFile"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_4setSourceFile, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("updateRanges"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_5updateRanges, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("push_back"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_6push_back, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMSLevel"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_7getMSLevel, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMSLevel"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_8setMSLevel, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findNearest"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_9findNearest, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_10size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_11setRT, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_12getName, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getNativeID"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_13getNativeID, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getSourceFile"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_14getSourceFile, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setName"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_15setName, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setNativeID"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_17setNativeID, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("clear"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_18clear, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getInstrumentSettings"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_19getInstrumentSettings, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getPrecursors"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_20getPrecursors, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setPrecursors"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_21setPrecursors, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_peaks"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_22get_peaks, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_peaks"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_23set_peaks, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("intensityInRange"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_24intensityInRange, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MSSpectrum = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MSSpectrum = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9_pyOpenMS_MSSpectrum, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MSSpectrum = {
  0, /*mp_length*/
  __pyx_pf_9_pyOpenMS_10MSSpectrum_16__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MSSpectrum = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MSSpectrum = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MSSpectrum"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MSSpectrum), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MSSpectrum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MSSpectrum, /*tp_as_number*/
  &__pyx_tp_as_sequence_MSSpectrum, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MSSpectrum, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MSSpectrum, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9_pyOpenMS_MSSpectrum, /*tp_traverse*/
  __pyx_tp_clear_9_pyOpenMS_MSSpectrum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MSSpectrum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_10MSSpectrum_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MSSpectrum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br__String_Br_;

static PyObject *__pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br__String_Br_(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br__String_Br_;
  if (__pyx_pf_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br____cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br__String_Br_(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br__1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br__String_Br_[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___Py_list_to_vector_Br__String_Br_ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___Py_list_to_vector_Br__String_Br_ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Py_list_to_vector_Br__String_Br_ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___Py_list_to_vector_Br__String_Br_ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.__Py_list_to_vector_Br__String_Br_"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br__String_Br_, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___Py_list_to_vector_Br__String_Br_, /*tp_as_number*/
  &__pyx_tp_as_sequence___Py_list_to_vector_Br__String_Br_, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Py_list_to_vector_Br__String_Br_, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___Py_list_to_vector_Br__String_Br_, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br__String_Br_, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br__2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br__String_Br_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_;

static PyObject *__pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_;
  if (__pyx_pf_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br____cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br__1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___Py_list_to_vector_Br__Precursor_Br_ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___Py_list_to_vector_Br__Precursor_Br_ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Py_list_to_vector_Br__Precursor_Br_ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___Py_list_to_vector_Br__Precursor_Br_ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.__Py_list_to_vector_Br__Precursor_Br_"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___Py_list_to_vector_Br__Precursor_Br_, /*tp_as_number*/
  &__pyx_tp_as_sequence___Py_list_to_vector_Br__Precursor_Br_, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Py_list_to_vector_Br__Precursor_Br_, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___Py_list_to_vector_Br__Precursor_Br_, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br__2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br_double_Br_;

static PyObject *__pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br_double_Br_(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_double_Br_;
  if (__pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br____cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br_double_Br_(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br__1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br_double_Br_[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___Py_list_to_vector_Br_double_Br_ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___Py_list_to_vector_Br_double_Br_ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Py_list_to_vector_Br_double_Br_ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___Py_list_to_vector_Br_double_Br_ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.__Py_list_to_vector_Br_double_Br_"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br_double_Br_, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___Py_list_to_vector_Br_double_Br_, /*tp_as_number*/
  &__pyx_tp_as_sequence___Py_list_to_vector_Br_double_Br_, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Py_list_to_vector_Br_double_Br_, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___Py_list_to_vector_Br_double_Br_, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br_double_Br_, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br__2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br_double_Br_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br_string_Br_;

static PyObject *__pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br_string_Br_(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_string_Br_;
  if (__pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br____cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br_string_Br_(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br__1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br_string_Br_[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___Py_list_to_vector_Br_string_Br_ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___Py_list_to_vector_Br_string_Br_ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Py_list_to_vector_Br_string_Br_ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___Py_list_to_vector_Br_string_Br_ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.__Py_list_to_vector_Br_string_Br_"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br_string_Br_, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___Py_list_to_vector_Br_string_Br_, /*tp_as_number*/
  &__pyx_tp_as_sequence___Py_list_to_vector_Br_string_Br_, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Py_list_to_vector_Br_string_Br_, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___Py_list_to_vector_Br_string_Br_, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br_string_Br_, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br__2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br_string_Br_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br_int_Br_;

static PyObject *__pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br_int_Br_(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_int_Br_;
  if (__pyx_pf_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br____cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br_int_Br_(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br__1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br_int_Br_[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___Py_list_to_vector_Br_int_Br_ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___Py_list_to_vector_Br_int_Br_ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Py_list_to_vector_Br_int_Br_ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___Py_list_to_vector_Br_int_Br_ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.__Py_list_to_vector_Br_int_Br_"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS___Py_list_to_vector_Br_int_Br_, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___Py_list_to_vector_Br_int_Br_, /*tp_as_number*/
  &__pyx_tp_as_sequence___Py_list_to_vector_Br_int_Br_, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Py_list_to_vector_Br_int_Br_, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___Py_list_to_vector_Br_int_Br_, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS___Py_list_to_vector_Br_int_Br_, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br__2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS___Py_list_to_vector_Br_int_Br_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_string __pyx_vtable_9_pyOpenMS___Py_str_to_string;

static PyObject *__pyx_tp_new_9_pyOpenMS___Py_str_to_string(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_string *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_string *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS___Py_str_to_string;
  if (__pyx_pf_9_pyOpenMS_18__Py_str_to_string___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS___Py_str_to_string(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_18__Py_str_to_string_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS___Py_str_to_string[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___Py_str_to_string = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___Py_str_to_string = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Py_str_to_string = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___Py_str_to_string = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS___Py_str_to_string = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.__Py_str_to_string"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS___Py_str_to_string), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS___Py_str_to_string, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___Py_str_to_string, /*tp_as_number*/
  &__pyx_tp_as_sequence___Py_str_to_string, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Py_str_to_string, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___Py_str_to_string, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS___Py_str_to_string, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_18__Py_str_to_string_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS___Py_str_to_string, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS___Py_str_to_char__ptr__ __pyx_vtable_9_pyOpenMS___Py_str_to_char__ptr__;

static PyObject *__pyx_tp_new_9_pyOpenMS___Py_str_to_char__ptr__(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS___Py_str_to_char__ptr__;
  if (__pyx_pf_9_pyOpenMS_23__Py_str_to_char__ptr_____cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS___Py_str_to_char__ptr__(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_23__Py_str_to_char__ptr___1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS___Py_str_to_char__ptr__[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number___Py_str_to_char__ptr__ = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence___Py_str_to_char__ptr__ = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Py_str_to_char__ptr__ = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer___Py_str_to_char__ptr__ = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS___Py_str_to_char__ptr__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.__Py_str_to_char__ptr__"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS___Py_str_to_char__ptr__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number___Py_str_to_char__ptr__, /*tp_as_number*/
  &__pyx_tp_as_sequence___Py_str_to_char__ptr__, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Py_str_to_char__ptr__, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer___Py_str_to_char__ptr__, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS___Py_str_to_char__ptr__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_23__Py_str_to_char__ptr___2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS___Py_str_to_char__ptr__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("_pyOpenMS"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_kp_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 0},
  {&__pyx_kp_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 0},
  {&__pyx_kp_u_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 1, 0, 0},
  {&__pyx_kp_u_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 1, 0, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_u_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 1, 0, 0},
  {&__pyx_kp_u_32, __pyx_k_32, sizeof(__pyx_k_32), 0, 1, 0, 0},
  {&__pyx_kp_u_33, __pyx_k_33, sizeof(__pyx_k_33), 0, 1, 0, 0},
  {&__pyx_kp_u_36, __pyx_k_36, sizeof(__pyx_k_36), 0, 1, 0, 0},
  {&__pyx_n_s_38, __pyx_k_38, sizeof(__pyx_k_38), 0, 0, 1, 1},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__MD5, __pyx_k__MD5, sizeof(__pyx_k__MD5), 0, 0, 1, 1},
  {&__pyx_n_s__NEGATIVE, __pyx_k__NEGATIVE, sizeof(__pyx_k__NEGATIVE), 0, 0, 1, 1},
  {&__pyx_n_s__POLNULL, __pyx_k__POLNULL, sizeof(__pyx_k__POLNULL), 0, 0, 1, 1},
  {&__pyx_n_s__POSITIVE, __pyx_k__POSITIVE, sizeof(__pyx_k__POSITIVE), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__SHA1, __pyx_k__SHA1, sizeof(__pyx_k__SHA1), 0, 0, 1, 1},
  {&__pyx_n_s__SIZE_OF_POLARITY, __pyx_k__SIZE_OF_POLARITY, sizeof(__pyx_k__SIZE_OF_POLARITY), 0, 0, 1, 1},
  {&__pyx_n_s__StringList, __pyx_k__StringList, sizeof(__pyx_k__StringList), 0, 0, 1, 1},
  {&__pyx_n_s__UNKNOWN_CHECKSUM, __pyx_k__UNKNOWN_CHECKSUM, sizeof(__pyx_k__UNKNOWN_CHECKSUM), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___new_inst, __pyx_k___new_inst, sizeof(__pyx_k___new_inst), 0, 0, 1, 1},
  {&__pyx_n_s___pyOpenMS, __pyx_k___pyOpenMS, sizeof(__pyx_k___pyOpenMS), 0, 0, 1, 1},
  {&__pyx_n_s___sig, __pyx_k___sig, sizeof(__pyx_k___sig), 0, 0, 1, 1},
  {&__pyx_n_s__arg, __pyx_k__arg, sizeof(__pyx_k__arg), 0, 0, 1, 1},
  {&__pyx_n_s__arg0, __pyx_k__arg0, sizeof(__pyx_k__arg0), 0, 0, 1, 1},
  {&__pyx_n_s__arg1, __pyx_k__arg1, sizeof(__pyx_k__arg1), 0, 0, 1, 1},
  {&__pyx_n_s__desc, __pyx_k__desc, sizeof(__pyx_k__desc), 0, 0, 1, 1},
  {&__pyx_n_s__dtype, __pyx_k__dtype, sizeof(__pyx_k__dtype), 0, 0, 1, 1},
  {&__pyx_n_s__epx, __pyx_k__epx, sizeof(__pyx_k__epx), 0, 0, 1, 1},
  {&__pyx_n_s__float, __pyx_k__float, sizeof(__pyx_k__float), 0, 0, 1, 1},
  {&__pyx_n_s__float32, __pyx_k__float32, sizeof(__pyx_k__float32), 0, 0, 1, 1},
  {&__pyx_n_s__groups, __pyx_k__groups, sizeof(__pyx_k__groups), 0, 0, 1, 1},
  {&__pyx_n_s__int, __pyx_k__int, sizeof(__pyx_k__int), 0, 0, 1, 1},
  {&__pyx_n_s__key, __pyx_k__key, sizeof(__pyx_k__key), 0, 0, 1, 1},
  {&__pyx_n_s__map, __pyx_k__map, sizeof(__pyx_k__map), 0, 0, 1, 1},
  {&__pyx_n_s__match, __pyx_k__match, sizeof(__pyx_k__match), 0, 0, 1, 1},
  {&__pyx_n_s__max, __pyx_k__max, sizeof(__pyx_k__max), 0, 0, 1, 1},
  {&__pyx_n_s__min, __pyx_k__min, sizeof(__pyx_k__min), 0, 0, 1, 1},
  {&__pyx_n_s__mzmax, __pyx_k__mzmax, sizeof(__pyx_k__mzmax), 0, 0, 1, 1},
  {&__pyx_n_s__mzmin, __pyx_k__mzmin, sizeof(__pyx_k__mzmin), 0, 0, 1, 1},
  {&__pyx_n_s__np, __pyx_k__np, sizeof(__pyx_k__np), 0, 0, 1, 1},
  {&__pyx_n_s__numpy, __pyx_k__numpy, sizeof(__pyx_k__numpy), 0, 0, 1, 1},
  {&__pyx_n_s__param, __pyx_k__param, sizeof(__pyx_k__param), 0, 0, 1, 1},
  {&__pyx_n_s__prefix, __pyx_k__prefix, sizeof(__pyx_k__prefix), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__re, __pyx_k__re, sizeof(__pyx_k__re), 0, 0, 1, 1},
  {&__pyx_n_s__remove_prefix, __pyx_k__remove_prefix, sizeof(__pyx_k__remove_prefix), 0, 0, 1, 1},
  {&__pyx_n_s__remove_spectra, __pyx_k__remove_spectra, sizeof(__pyx_k__remove_spectra), 0, 0, 1, 1},
  {&__pyx_n_s__str, __pyx_k__str, sizeof(__pyx_k__str), 0, 0, 1, 1},
  {&__pyx_n_s__strings, __pyx_k__strings, sizeof(__pyx_k__strings), 0, 0, 1, 1},
  {&__pyx_n_s__tag, __pyx_k__tag, sizeof(__pyx_k__tag), 0, 0, 1, 1},
  {&__pyx_n_s__tags, __pyx_k__tags, sizeof(__pyx_k__tags), 0, 0, 1, 1},
  {&__pyx_n_s__val, __pyx_k__val, sizeof(__pyx_k__val), 0, 0, 1, 1},
  {&__pyx_n_s__zeros, __pyx_k__zeros, sizeof(__pyx_k__zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_map = __Pyx_GetName(__pyx_b, __pyx_n_s__map); if (!__pyx_builtin_map) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "_pyOpenMS.pyx":77
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Peak1D()
 */
  __pyx_k_tuple_5 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_5));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "_pyOpenMS.pyx":121
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Precursor()
 */
  __pyx_k_tuple_6 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "_pyOpenMS.pyx":165
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()
 */
  __pyx_k_tuple_7 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));

  /* "_pyOpenMS.pyx":224
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _InstrumentSettings()
 */
  __pyx_k_tuple_8 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_8));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_8, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "_pyOpenMS.pyx":262
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _ChromatogramTools()
 */
  __pyx_k_tuple_9 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_9));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_9, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_9));

  /* "_pyOpenMS.pyx":305
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzXMLFile()
 */
  __pyx_k_tuple_10 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_10));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_10, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));

  /* "_pyOpenMS.pyx":347
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzMLFile()
 */
  __pyx_k_tuple_11 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_11));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_11, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_11));

  /* "_pyOpenMS.pyx":389
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MzDataFile()
 */
  __pyx_k_tuple_12 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "_pyOpenMS.pyx":436
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _StringList()
 */
  __pyx_k_tuple_14 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_14));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_14, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "_pyOpenMS.pyx":483
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _IntList()
 */
  __pyx_k_tuple_16 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_16));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_16, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "_pyOpenMS.pyx":530
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _DoubleList()
 */
  __pyx_k_tuple_18 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_18));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_18, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_18));

  /* "_pyOpenMS.pyx":572
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _Param()
 */
  __pyx_k_tuple_19 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_19));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_19, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_19));

  /* "_pyOpenMS.pyx":690
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _String()
 */
  __pyx_k_tuple_20 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_20));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_20, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_20));

  /* "_pyOpenMS.pyx":729
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _SourceFile()
 */
  __pyx_k_tuple_21 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_21));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_21, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));

  /* "_pyOpenMS.pyx":835
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _DataValue()
 */
  __pyx_k_tuple_22 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_22));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_22, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_22));

  /* "_pyOpenMS.pyx":893
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _SavitzkyGolayFilter()
 */
  __pyx_k_tuple_24 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_24));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_24, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));

  /* "_pyOpenMS.pyx":931
 *             return
 * 
 *         raise Exception("input args do not match declaration")             # <<<<<<<<<<<<<<
 *     cdef __subcons_for_nonarg(self, ):
 *         self.inst = new _MSSpectrum[_Peak1D]()
 */
  __pyx_k_tuple_25 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_25));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_25, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_25));

  /* "numpy.pxd":211
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_k_tuple_27 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_27));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_26));
  PyTuple_SET_ITEM(__pyx_k_tuple_27, 0, ((PyObject *)__pyx_kp_u_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));

  /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_k_tuple_29 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_29)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_29));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_28));
  PyTuple_SET_ITEM(__pyx_k_tuple_29, 0, ((PyObject *)__pyx_kp_u_28));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_28));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_29));

  /* "numpy.pxd":253
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_k_tuple_31 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_31)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_31));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_30));
  PyTuple_SET_ITEM(__pyx_k_tuple_31, 0, ((PyObject *)__pyx_kp_u_30));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_30));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_31));

  /* "numpy.pxd":795
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 */
  __pyx_k_tuple_34 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_34)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_34));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_33));
  PyTuple_SET_ITEM(__pyx_k_tuple_34, 0, ((PyObject *)__pyx_kp_u_33));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_33));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_34));

  /* "numpy.pxd":799
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_k_tuple_35 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_35)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_35));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_30));
  PyTuple_SET_ITEM(__pyx_k_tuple_35, 0, ((PyObject *)__pyx_kp_u_30));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_30));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_35));

  /* "numpy.pxd":819
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_k_tuple_37 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_37)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_37));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_36));
  PyTuple_SET_ITEM(__pyx_k_tuple_37, 0, ((PyObject *)__pyx_kp_u_36));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_36));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_37));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_pyOpenMS(void); /*proto*/
PyMODINIT_FUNC init_pyOpenMS(void)
#else
PyMODINIT_FUNC PyInit__pyOpenMS(void); /*proto*/
PyMODINIT_FUNC PyInit__pyOpenMS(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__pyOpenMS(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_pyOpenMS"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main__pyOpenMS) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_9_pyOpenMS_Peak1D = &__pyx_vtable_9_pyOpenMS_Peak1D;
  __pyx_vtable_9_pyOpenMS_Peak1D._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Peak1D *, OpenMS::Peak1D *))__pyx_f_9_pyOpenMS_6Peak1D__set_inst;
  __pyx_vtable_9_pyOpenMS_Peak1D.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Peak1D *))__pyx_f_9_pyOpenMS_6Peak1D___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_Peak1D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_Peak1D.tp_dict, __pyx_vtabptr_9_pyOpenMS_Peak1D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Peak1D", (PyObject *)&__pyx_type_9_pyOpenMS_Peak1D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_Peak1D = &__pyx_type_9_pyOpenMS_Peak1D;
  __pyx_vtabptr_9_pyOpenMS_Precursor = &__pyx_vtable_9_pyOpenMS_Precursor;
  __pyx_vtable_9_pyOpenMS_Precursor._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Precursor *, OpenMS::Precursor *))__pyx_f_9_pyOpenMS_9Precursor__set_inst;
  __pyx_vtable_9_pyOpenMS_Precursor.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Precursor *))__pyx_f_9_pyOpenMS_9Precursor___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_Precursor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_Precursor.tp_dict, __pyx_vtabptr_9_pyOpenMS_Precursor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Precursor", (PyObject *)&__pyx_type_9_pyOpenMS_Precursor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_Precursor = &__pyx_type_9_pyOpenMS_Precursor;
  __pyx_vtabptr_9_pyOpenMS_MSExperiment = &__pyx_vtable_9_pyOpenMS_MSExperiment;
  __pyx_vtable_9_pyOpenMS_MSExperiment._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MSExperiment *, OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak> *))__pyx_f_9_pyOpenMS_12MSExperiment__set_inst;
  __pyx_vtable_9_pyOpenMS_MSExperiment.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MSExperiment *))__pyx_f_9_pyOpenMS_12MSExperiment___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MSExperiment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MSExperiment.tp_dict, __pyx_vtabptr_9_pyOpenMS_MSExperiment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MSExperiment", (PyObject *)&__pyx_type_9_pyOpenMS_MSExperiment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MSExperiment = &__pyx_type_9_pyOpenMS_MSExperiment;
  __pyx_vtabptr_9_pyOpenMS_InstrumentSettings = &__pyx_vtable_9_pyOpenMS_InstrumentSettings;
  __pyx_vtable_9_pyOpenMS_InstrumentSettings._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *, OpenMS::InstrumentSettings *))__pyx_f_9_pyOpenMS_18InstrumentSettings__set_inst;
  __pyx_vtable_9_pyOpenMS_InstrumentSettings.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *))__pyx_f_9_pyOpenMS_18InstrumentSettings___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_InstrumentSettings) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_InstrumentSettings.tp_dict, __pyx_vtabptr_9_pyOpenMS_InstrumentSettings) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "InstrumentSettings", (PyObject *)&__pyx_type_9_pyOpenMS_InstrumentSettings) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_InstrumentSettings = &__pyx_type_9_pyOpenMS_InstrumentSettings;
  __pyx_vtabptr_9_pyOpenMS_ChromatogramTools = &__pyx_vtable_9_pyOpenMS_ChromatogramTools;
  __pyx_vtable_9_pyOpenMS_ChromatogramTools._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *, OpenMS::ChromatogramTools *))__pyx_f_9_pyOpenMS_17ChromatogramTools__set_inst;
  __pyx_vtable_9_pyOpenMS_ChromatogramTools.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *))__pyx_f_9_pyOpenMS_17ChromatogramTools___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_ChromatogramTools) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_ChromatogramTools.tp_dict, __pyx_vtabptr_9_pyOpenMS_ChromatogramTools) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ChromatogramTools", (PyObject *)&__pyx_type_9_pyOpenMS_ChromatogramTools) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_ChromatogramTools = &__pyx_type_9_pyOpenMS_ChromatogramTools;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_Polarity) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Polarity", (PyObject *)&__pyx_type_9_pyOpenMS_Polarity) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_Polarity = &__pyx_type_9_pyOpenMS_Polarity;
  __pyx_vtabptr_9_pyOpenMS_MzXMLFile = &__pyx_vtable_9_pyOpenMS_MzXMLFile;
  __pyx_vtable_9_pyOpenMS_MzXMLFile._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzXMLFile *, OpenMS::MzXMLFile *))__pyx_f_9_pyOpenMS_9MzXMLFile__set_inst;
  __pyx_vtable_9_pyOpenMS_MzXMLFile.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzXMLFile *))__pyx_f_9_pyOpenMS_9MzXMLFile___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MzXMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MzXMLFile.tp_dict, __pyx_vtabptr_9_pyOpenMS_MzXMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MzXMLFile", (PyObject *)&__pyx_type_9_pyOpenMS_MzXMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MzXMLFile = &__pyx_type_9_pyOpenMS_MzXMLFile;
  __pyx_vtabptr_9_pyOpenMS_MzMLFile = &__pyx_vtable_9_pyOpenMS_MzMLFile;
  __pyx_vtable_9_pyOpenMS_MzMLFile._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzMLFile *, OpenMS::MzMLFile *))__pyx_f_9_pyOpenMS_8MzMLFile__set_inst;
  __pyx_vtable_9_pyOpenMS_MzMLFile.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzMLFile *))__pyx_f_9_pyOpenMS_8MzMLFile___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MzMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MzMLFile.tp_dict, __pyx_vtabptr_9_pyOpenMS_MzMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MzMLFile", (PyObject *)&__pyx_type_9_pyOpenMS_MzMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MzMLFile = &__pyx_type_9_pyOpenMS_MzMLFile;
  __pyx_vtabptr_9_pyOpenMS_MzDataFile = &__pyx_vtable_9_pyOpenMS_MzDataFile;
  __pyx_vtable_9_pyOpenMS_MzDataFile._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzDataFile *, OpenMS::MzDataFile *))__pyx_f_9_pyOpenMS_10MzDataFile__set_inst;
  __pyx_vtable_9_pyOpenMS_MzDataFile.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzDataFile *))__pyx_f_9_pyOpenMS_10MzDataFile___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MzDataFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MzDataFile.tp_dict, __pyx_vtabptr_9_pyOpenMS_MzDataFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MzDataFile", (PyObject *)&__pyx_type_9_pyOpenMS_MzDataFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MzDataFile = &__pyx_type_9_pyOpenMS_MzDataFile;
  __pyx_vtabptr_9_pyOpenMS_StringList = &__pyx_vtable_9_pyOpenMS_StringList;
  __pyx_vtable_9_pyOpenMS_StringList._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_StringList *, OpenMS::StringList *))__pyx_f_9_pyOpenMS_10StringList__set_inst;
  __pyx_vtable_9_pyOpenMS_StringList.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_StringList *))__pyx_f_9_pyOpenMS_10StringList___subcons_for_nonarg;
  __pyx_vtable_9_pyOpenMS_StringList.__subcons_for_list_Br_str_Br_ = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_StringList *, PyObject *))__pyx_f_9_pyOpenMS_10StringList___subcons_for_list_Br_str_Br_;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_StringList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_StringList.tp_dict, __pyx_vtabptr_9_pyOpenMS_StringList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "StringList", (PyObject *)&__pyx_type_9_pyOpenMS_StringList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_StringList = &__pyx_type_9_pyOpenMS_StringList;
  __pyx_vtabptr_9_pyOpenMS_IntList = &__pyx_vtable_9_pyOpenMS_IntList;
  __pyx_vtable_9_pyOpenMS_IntList._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_IntList *, OpenMS::IntList *))__pyx_f_9_pyOpenMS_7IntList__set_inst;
  __pyx_vtable_9_pyOpenMS_IntList.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_IntList *))__pyx_f_9_pyOpenMS_7IntList___subcons_for_nonarg;
  __pyx_vtable_9_pyOpenMS_IntList.__subcons_for_list_Br_int_Br_ = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_IntList *, PyObject *))__pyx_f_9_pyOpenMS_7IntList___subcons_for_list_Br_int_Br_;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_IntList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_IntList.tp_dict, __pyx_vtabptr_9_pyOpenMS_IntList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "IntList", (PyObject *)&__pyx_type_9_pyOpenMS_IntList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_IntList = &__pyx_type_9_pyOpenMS_IntList;
  __pyx_vtabptr_9_pyOpenMS_DoubleList = &__pyx_vtable_9_pyOpenMS_DoubleList;
  __pyx_vtable_9_pyOpenMS_DoubleList._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_DoubleList *, OpenMS::DoubleList *))__pyx_f_9_pyOpenMS_10DoubleList__set_inst;
  __pyx_vtable_9_pyOpenMS_DoubleList.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_DoubleList *))__pyx_f_9_pyOpenMS_10DoubleList___subcons_for_nonarg;
  __pyx_vtable_9_pyOpenMS_DoubleList.__subcons_for_list_Br_float_Br_ = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_DoubleList *, PyObject *))__pyx_f_9_pyOpenMS_10DoubleList___subcons_for_list_Br_float_Br_;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_DoubleList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_DoubleList.tp_dict, __pyx_vtabptr_9_pyOpenMS_DoubleList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "DoubleList", (PyObject *)&__pyx_type_9_pyOpenMS_DoubleList) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_DoubleList = &__pyx_type_9_pyOpenMS_DoubleList;
  __pyx_vtabptr_9_pyOpenMS_Param = &__pyx_vtable_9_pyOpenMS_Param;
  __pyx_vtable_9_pyOpenMS_Param._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Param *, OpenMS::Param *))__pyx_f_9_pyOpenMS_5Param__set_inst;
  __pyx_vtable_9_pyOpenMS_Param.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Param *))__pyx_f_9_pyOpenMS_5Param___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_Param) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_Param.tp_dict, __pyx_vtabptr_9_pyOpenMS_Param) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Param", (PyObject *)&__pyx_type_9_pyOpenMS_Param) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_Param = &__pyx_type_9_pyOpenMS_Param;
  __pyx_vtabptr_9_pyOpenMS_String = &__pyx_vtable_9_pyOpenMS_String;
  __pyx_vtable_9_pyOpenMS_String._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_String *, OpenMS::String *))__pyx_f_9_pyOpenMS_6String__set_inst;
  __pyx_vtable_9_pyOpenMS_String.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_String *))__pyx_f_9_pyOpenMS_6String___subcons_for_nonarg;
  __pyx_vtable_9_pyOpenMS_String.__subcons_for_str = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_String *, PyObject *))__pyx_f_9_pyOpenMS_6String___subcons_for_str;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_String) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_String.tp_dict, __pyx_vtabptr_9_pyOpenMS_String) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "String", (PyObject *)&__pyx_type_9_pyOpenMS_String) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_String = &__pyx_type_9_pyOpenMS_String;
  __pyx_vtabptr_9_pyOpenMS_SourceFile = &__pyx_vtable_9_pyOpenMS_SourceFile;
  __pyx_vtable_9_pyOpenMS_SourceFile._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_SourceFile *, OpenMS::SourceFile *))__pyx_f_9_pyOpenMS_10SourceFile__set_inst;
  __pyx_vtable_9_pyOpenMS_SourceFile.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_SourceFile *))__pyx_f_9_pyOpenMS_10SourceFile___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_SourceFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_SourceFile.tp_dict, __pyx_vtabptr_9_pyOpenMS_SourceFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SourceFile", (PyObject *)&__pyx_type_9_pyOpenMS_SourceFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_SourceFile = &__pyx_type_9_pyOpenMS_SourceFile;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_ChecksumType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ChecksumType", (PyObject *)&__pyx_type_9_pyOpenMS_ChecksumType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_ChecksumType = &__pyx_type_9_pyOpenMS_ChecksumType;
  __pyx_vtabptr_9_pyOpenMS_DataValue = &__pyx_vtable_9_pyOpenMS_DataValue;
  __pyx_vtable_9_pyOpenMS_DataValue._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_DataValue *, OpenMS::DataValue *))__pyx_f_9_pyOpenMS_9DataValue__set_inst;
  __pyx_vtable_9_pyOpenMS_DataValue.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_DataValue *))__pyx_f_9_pyOpenMS_9DataValue___subcons_for_nonarg;
  __pyx_vtable_9_pyOpenMS_DataValue.__subcons_for_str = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_DataValue *, PyObject *))__pyx_f_9_pyOpenMS_9DataValue___subcons_for_str;
  __pyx_vtable_9_pyOpenMS_DataValue.__subcons_for_int = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_DataValue *, int))__pyx_f_9_pyOpenMS_9DataValue___subcons_for_int;
  __pyx_vtable_9_pyOpenMS_DataValue.__subcons_for_float = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_DataValue *, float))__pyx_f_9_pyOpenMS_9DataValue___subcons_for_float;
  __pyx_vtable_9_pyOpenMS_DataValue.__subcons_for_StringList = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_DataValue *, struct __pyx_obj_9_pyOpenMS_StringList *))__pyx_f_9_pyOpenMS_9DataValue___subcons_for_StringList;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_DataValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_DataValue.tp_dict, __pyx_vtabptr_9_pyOpenMS_DataValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "DataValue", (PyObject *)&__pyx_type_9_pyOpenMS_DataValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_DataValue = &__pyx_type_9_pyOpenMS_DataValue;
  __pyx_vtabptr_9_pyOpenMS_SavitzkyGolayFilter = &__pyx_vtable_9_pyOpenMS_SavitzkyGolayFilter;
  __pyx_vtable_9_pyOpenMS_SavitzkyGolayFilter._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *, OpenMS::SavitzkyGolayFilter *))__pyx_f_9_pyOpenMS_19SavitzkyGolayFilter__set_inst;
  __pyx_vtable_9_pyOpenMS_SavitzkyGolayFilter.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_SavitzkyGolayFilter *))__pyx_f_9_pyOpenMS_19SavitzkyGolayFilter___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_SavitzkyGolayFilter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_SavitzkyGolayFilter.tp_dict, __pyx_vtabptr_9_pyOpenMS_SavitzkyGolayFilter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SavitzkyGolayFilter", (PyObject *)&__pyx_type_9_pyOpenMS_SavitzkyGolayFilter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_SavitzkyGolayFilter = &__pyx_type_9_pyOpenMS_SavitzkyGolayFilter;
  __pyx_vtabptr_9_pyOpenMS_MSSpectrum = &__pyx_vtable_9_pyOpenMS_MSSpectrum;
  __pyx_vtable_9_pyOpenMS_MSSpectrum._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MSSpectrum *, OpenMS::MSSpectrum<OpenMS::Peak1D> *))__pyx_f_9_pyOpenMS_10MSSpectrum__set_inst;
  __pyx_vtable_9_pyOpenMS_MSSpectrum.__subcons_for_nonarg = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MSSpectrum *))__pyx_f_9_pyOpenMS_10MSSpectrum___subcons_for_nonarg;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MSSpectrum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MSSpectrum.tp_dict, __pyx_vtabptr_9_pyOpenMS_MSSpectrum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MSSpectrum", (PyObject *)&__pyx_type_9_pyOpenMS_MSSpectrum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MSSpectrum = &__pyx_type_9_pyOpenMS_MSSpectrum;
  __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ = &__pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br__String_Br_;
  __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br__String_Br_.conv = (std::vector<OpenMS::String> *(*)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ *))__pyx_f_9_pyOpenMS_34__Py_list_to_vector_Br__String_Br__conv;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br__String_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS___Py_list_to_vector_Br__String_Br_.tp_dict, __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br__String_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "__Py_list_to_vector_Br__String_Br_", (PyObject *)&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br__String_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br__String_Br_ = &__pyx_type_9_pyOpenMS___Py_list_to_vector_Br__String_Br_;
  __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ = &__pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_;
  __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_.conv = (std::vector<OpenMS::Precursor> *(*)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ *))__pyx_f_9_pyOpenMS_37__Py_list_to_vector_Br__Precursor_Br__conv;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_.tp_dict, __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "__Py_list_to_vector_Br__Precursor_Br_", (PyObject *)&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_ = &__pyx_type_9_pyOpenMS___Py_list_to_vector_Br__Precursor_Br_;
  __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ = &__pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br_double_Br_;
  __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br_double_Br_.conv = (std::vector<double> *(*)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ *))__pyx_f_9_pyOpenMS_33__Py_list_to_vector_Br_double_Br__conv;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_double_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_double_Br_.tp_dict, __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_double_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "__Py_list_to_vector_Br_double_Br_", (PyObject *)&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_double_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br_double_Br_ = &__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_double_Br_;
  __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ = &__pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br_string_Br_;
  __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br_string_Br_.conv = (std::vector<std::string> *(*)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ *))__pyx_f_9_pyOpenMS_33__Py_list_to_vector_Br_string_Br__conv;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_string_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_string_Br_.tp_dict, __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_string_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "__Py_list_to_vector_Br_string_Br_", (PyObject *)&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_string_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br_string_Br_ = &__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_string_Br_;
  __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ = &__pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br_int_Br_;
  __pyx_vtable_9_pyOpenMS___Py_list_to_vector_Br_int_Br_.conv = (std::vector<int> *(*)(struct __pyx_obj_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ *))__pyx_f_9_pyOpenMS_30__Py_list_to_vector_Br_int_Br__conv;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_int_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_int_Br_.tp_dict, __pyx_vtabptr_9_pyOpenMS___Py_list_to_vector_Br_int_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "__Py_list_to_vector_Br_int_Br_", (PyObject *)&__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_int_Br_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS___Py_list_to_vector_Br_int_Br_ = &__pyx_type_9_pyOpenMS___Py_list_to_vector_Br_int_Br_;
  __pyx_vtabptr_9_pyOpenMS___Py_str_to_string = &__pyx_vtable_9_pyOpenMS___Py_str_to_string;
  __pyx_vtable_9_pyOpenMS___Py_str_to_string.conv = (std::string *(*)(struct __pyx_obj_9_pyOpenMS___Py_str_to_string *))__pyx_f_9_pyOpenMS_18__Py_str_to_string_conv;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS___Py_str_to_string) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS___Py_str_to_string.tp_dict, __pyx_vtabptr_9_pyOpenMS___Py_str_to_string) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "__Py_str_to_string", (PyObject *)&__pyx_type_9_pyOpenMS___Py_str_to_string) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS___Py_str_to_string = &__pyx_type_9_pyOpenMS___Py_str_to_string;
  __pyx_vtabptr_9_pyOpenMS___Py_str_to_char__ptr__ = &__pyx_vtable_9_pyOpenMS___Py_str_to_char__ptr__;
  __pyx_vtable_9_pyOpenMS___Py_str_to_char__ptr__.conv = (char *(*)(struct __pyx_obj_9_pyOpenMS___Py_str_to_char__ptr__ *))__pyx_f_9_pyOpenMS_23__Py_str_to_char__ptr___conv;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS___Py_str_to_char__ptr__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS___Py_str_to_char__ptr__.tp_dict, __pyx_vtabptr_9_pyOpenMS___Py_str_to_char__ptr__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "__Py_str_to_char__ptr__", (PyObject *)&__pyx_type_9_pyOpenMS___Py_str_to_char__ptr__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS___Py_str_to_char__ptr__ = &__pyx_type_9_pyOpenMS___Py_str_to_char__ptr__;
  /*--- Type import code ---*/
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "_pyOpenMS.pyx":31
 * from pxd.String cimport String as _String
 * from pxd.StringList cimport StringList as _StringList
 * import re             # <<<<<<<<<<<<<<
 * 
 * def _sig(a):
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__re), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__re, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":33
 * import re
 * 
 * def _sig(a):             # <<<<<<<<<<<<<<
 *     t = type(a)
 *     m = re.match("<type '[^.]*\.(\w+)'>", str(t))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9_pyOpenMS__sig, NULL, __pyx_n_s___pyOpenMS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___sig, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":47
 *             }.get(t,t)
 * cimport numpy as np
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cdef class Peak1D:
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":272
 *         return self
 * cdef class Polarity:
 *     POLNULL=0             # <<<<<<<<<<<<<<
 *     POSITIVE=1
 *     NEGATIVE=2
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_Polarity->tp_dict, __pyx_n_s__POLNULL, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_Polarity);

  /* "_pyOpenMS.pyx":273
 * cdef class Polarity:
 *     POLNULL=0
 *     POSITIVE=1             # <<<<<<<<<<<<<<
 *     NEGATIVE=2
 *     SIZE_OF_POLARITY=3
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_Polarity->tp_dict, __pyx_n_s__POSITIVE, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_Polarity);

  /* "_pyOpenMS.pyx":274
 *     POLNULL=0
 *     POSITIVE=1
 *     NEGATIVE=2             # <<<<<<<<<<<<<<
 *     SIZE_OF_POLARITY=3
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_Polarity->tp_dict, __pyx_n_s__NEGATIVE, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_Polarity);

  /* "_pyOpenMS.pyx":275
 *     POSITIVE=1
 *     NEGATIVE=2
 *     SIZE_OF_POLARITY=3             # <<<<<<<<<<<<<<
 * 
 * cdef class MzXMLFile:
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_Polarity->tp_dict, __pyx_n_s__SIZE_OF_POLARITY, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_Polarity);

  /* "_pyOpenMS.pyx":782
 *         return self
 * cdef class ChecksumType:
 *     UNKNOWN_CHECKSUM=0             # <<<<<<<<<<<<<<
 *     SHA1=1
 *     MD5=2
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_ChecksumType->tp_dict, __pyx_n_s__UNKNOWN_CHECKSUM, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 782; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_ChecksumType);

  /* "_pyOpenMS.pyx":783
 * cdef class ChecksumType:
 *     UNKNOWN_CHECKSUM=0
 *     SHA1=1             # <<<<<<<<<<<<<<
 *     MD5=2
 *     SIZE_OF_CHECKSUMTYPE=3
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_ChecksumType->tp_dict, __pyx_n_s__SHA1, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_ChecksumType);

  /* "_pyOpenMS.pyx":784
 *     UNKNOWN_CHECKSUM=0
 *     SHA1=1
 *     MD5=2             # <<<<<<<<<<<<<<
 *     SIZE_OF_CHECKSUMTYPE=3
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_ChecksumType->tp_dict, __pyx_n_s__MD5, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_ChecksumType);

  /* "_pyOpenMS.pyx":785
 *     SHA1=1
 *     MD5=2
 *     SIZE_OF_CHECKSUMTYPE=3             # <<<<<<<<<<<<<<
 * 
 * cdef class DataValue:
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_ChecksumType->tp_dict, __pyx_n_s_38, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_ChecksumType);

  /* "_pyOpenMS.pyx":2
 * 
 * from cython.operator cimport dereference  as deref             # <<<<<<<<<<<<<<
 * from cython.operator cimport address      as address
 * from cython.operator cimport preincrement as preincrement
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "numpy.pxd":971
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init _pyOpenMS", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _pyOpenMS");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}


static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    /* cause is unused */
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}

typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
} __Pyx_BufFmt_Context;

static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}

static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}

static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}

static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'b': return "'char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 0: return "end";
    default: return "unparseable format string";
  }
}

static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}

static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}

typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif

static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}

static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'h': case 'i': case 'l': case 'q': return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q': return 'U';
    case 'f': case 'd': case 'g': return (is_complex ? 'C' : 'R');
    case 'O': return 'O';
    case 'P': return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}

static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}

static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset;
  if (ctx->enc_type == 0) return 0;
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;

    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
    }

    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        /* special case -- treat as struct rather than complex number */
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }

      __Pyx_BufFmt_RaiseExpected(ctx);
      return -1;
    }

    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %"PY_FORMAT_SIZE_T"d but %"PY_FORMAT_SIZE_T"d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }

    ctx->fmt_offset += size;

    --ctx->enc_count; /* Consume from buffer string */

    /* Done checking, move to next field, pushing or popping struct stack if needed */
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break; /* breaks both loops as ctx->enc_count == 0 */
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue; /* empty struct */
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}

static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case 10:
      case 13:
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T': /* substruct */
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
        }
        break;
      case '}': /* end of substruct; either repeat or move on */
        ++ts;
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }        /* fall through */
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          /* Continue pooling same type */
          ctx->enc_count += ctx->new_count;
        } else {
          /* New type */
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_count = ctx->new_count;
          ctx->enc_packmode = ctx->new_packmode;
          ctx->enc_type = *ts;
          ctx->is_complex = got_Z;
        }
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ParseNumber(&ts);
          if (number == -1) { /* First char was not a digit */
            PyErr_Format(PyExc_ValueError,
                         "Does not understand character buffer dtype format string ('%c')", *ts);
            return NULL;
          }
          ctx->new_count = (size_t)number; 
        }
    }
  }
}

static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}

static CYTHON_INLINE int __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj, __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack) {
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%"PY_FORMAT_SIZE_T"d byte%s) does not match size of '%s' (%"PY_FORMAT_SIZE_T"d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}

static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_Format(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}


static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %"PY_FORMAT_SIZE_T"d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %"PY_FORMAT_SIZE_T"d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
  #if PY_VERSION_HEX >= 0x02060000
  if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
  #endif
  if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pf_5numpy_7ndarray___getbuffer__(obj, view, flags);
  else {
  PyErr_Format(PyExc_TypeError, "'%100s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
  return -1;
    }
}

static void __Pyx_ReleaseBuffer(Py_buffer *view) {
  PyObject* obj = view->obj;
  if (obj) {
    #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) {PyBuffer_Release(view); return;}
    #endif
    if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pf_5numpy_7ndarray_1__releasebuffer__(obj, view);
    Py_DECREF(obj);
    view->obj = NULL;
  }
}

#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        PyObject *py_level = PyInt_FromLong(level);
        if (!py_level)
            goto bad;
        module = PyObject_CallFunctionObjArgs(py_import,
            name, global_dict, empty_dict, list, py_level, NULL);
        Py_DECREF(py_level);
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && ((PyTypeObject *)result)->tp_basicsize > (Py_ssize_t)size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if (((PyTypeObject *)result)->tp_basicsize != (Py_ssize_t)size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
