/* Generated by Cython 0.15 on Fri Sep 30 14:15:43 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___pyOpenMS
#define __PYX_HAVE_API___pyOpenMS
#include <vector>
#include <string>
#include <OpenMS/KERNEL/ChromatogramPeak.h>
#include <OpenMS/KERNEL/Peak1D.h>
#include <OpenMS/METADATA/Ionsource.h>
#include <OpenMS/METADATA/InstrumentSettings.h>
#include <OpenMS/METADATA/Precursor.h>
#include <OpenMS/KERNEL/MSSpectrum.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <OpenMS/KERNEL/MSExperiment.h>
#include <OpenMS/KERNEL/ChromatogramTools.h>
#include <OpenMS/FORMAT/MzDataFile.h>
#include <OpenMS/FORMAT/MzMLFile.h>
#include <OpenMS/FORMAT/MzXMLFile.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_pyOpenMS.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_9_pyOpenMS_Polarity;
struct __pyx_obj_9_pyOpenMS_MzDataFile;
struct __pyx_obj_9_pyOpenMS_Peak1D;
struct __pyx_obj_9_pyOpenMS_MzMLFile;
struct __pyx_obj_9_pyOpenMS_InstrumentSettings;
struct __pyx_obj_9_pyOpenMS_MzXMLFile;
struct __pyx_obj_9_pyOpenMS_Precursor;
struct __pyx_obj_9_pyOpenMS_ChromatogramTools;
struct __pyx_obj_9_pyOpenMS_MSExperiment;
struct __pyx_obj_9_pyOpenMS_MSSpectrum;

/* "_pyOpenMS.pyx":228
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)
 *         return self
 * cdef class Polarity:             # <<<<<<<<<<<<<<
 *     POSNULL=0
 *     POSITIVE=1
 */
struct __pyx_obj_9_pyOpenMS_Polarity {
  PyObject_HEAD
};


/* "_pyOpenMS.pyx":281
 *         del _a_as_str
 *         return self
 * cdef class MzDataFile:             # <<<<<<<<<<<<<<
 *     cdef _MzDataFile * inst
 *     cdef _new_inst(self):
 */
struct __pyx_obj_9_pyOpenMS_MzDataFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile *__pyx_vtab;
  OpenMS::MzDataFile *inst;
};


/* "_pyOpenMS.pyx":16
 * from pxd.Polarity cimport Polarity as _Polarity
 * from pxd.Precursor cimport Precursor as _Precursor
 * cdef class Peak1D:             # <<<<<<<<<<<<<<
 *     cdef _Peak1D * inst
 *     cdef _new_inst(self):
 */
struct __pyx_obj_9_pyOpenMS_Peak1D {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_Peak1D *__pyx_vtab;
  OpenMS::Peak1D *inst;
};


/* "_pyOpenMS.pyx":257
 *         del _a_as_str
 *         return self
 * cdef class MzMLFile:             # <<<<<<<<<<<<<<
 *     cdef _MzMLFile * inst
 *     cdef _new_inst(self):
 */
struct __pyx_obj_9_pyOpenMS_MzMLFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile *__pyx_vtab;
  OpenMS::MzMLFile *inst;
};


/* "_pyOpenMS.pyx":188
 *         self.inst.push_back(deref(a.inst))
 *         return self
 * cdef class InstrumentSettings:             # <<<<<<<<<<<<<<
 *     cdef _InstrumentSettings * inst
 *     cdef _new_inst(self):
 */
struct __pyx_obj_9_pyOpenMS_InstrumentSettings {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings *__pyx_vtab;
  OpenMS::InstrumentSettings *inst;
};


/* "_pyOpenMS.pyx":233
 *     NEGATIVE=2
 *     SIZE_OF_POLARITY=3
 * cdef class MzXMLFile:             # <<<<<<<<<<<<<<
 *     cdef _MzXMLFile * inst
 *     cdef _new_inst(self):
 */
struct __pyx_obj_9_pyOpenMS_MzXMLFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile *__pyx_vtab;
  OpenMS::MzXMLFile *inst;
};


/* "_pyOpenMS.pyx":42
 *         self.inst.setIntensity(a)
 *         return self
 * cdef class Precursor:             # <<<<<<<<<<<<<<
 *     cdef _Precursor * inst
 *     cdef _new_inst(self):
 */
struct __pyx_obj_9_pyOpenMS_Precursor {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_Precursor *__pyx_vtab;
  OpenMS::Precursor *inst;
};


/* "_pyOpenMS.pyx":208
 *         self.inst.setPolarity(<_Polarity>a)
 *         return self
 * cdef class ChromatogramTools:             # <<<<<<<<<<<<<<
 *     cdef _ChromatogramTools * inst
 *     cdef _new_inst(self):
 */
struct __pyx_obj_9_pyOpenMS_ChromatogramTools {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools *__pyx_vtab;
  OpenMS::ChromatogramTools *inst;
};


/* "_pyOpenMS.pyx":145
 *         del _a_as_str
 *         return self
 * cdef class MSExperiment:             # <<<<<<<<<<<<<<
 *     cdef _MSExperiment[_Peak1D,_ChromatogramPeak] * inst
 *     cdef _new_inst(self):
 */
struct __pyx_obj_9_pyOpenMS_MSExperiment {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment *__pyx_vtab;
  OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak> *inst;
};


/* "_pyOpenMS.pyx":68
 *         self.inst.setIntensity(a)
 *         return self
 * cdef class MSSpectrum:             # <<<<<<<<<<<<<<
 *     cdef _MSSpectrum[_Peak1D] * inst
 *     cdef _new_inst(self):
 */
struct __pyx_obj_9_pyOpenMS_MSSpectrum {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum *__pyx_vtab;
  OpenMS::MSSpectrum<OpenMS::Peak1D> *inst;
};



/* "_pyOpenMS.pyx":233
 *     NEGATIVE=2
 *     SIZE_OF_POLARITY=3
 * cdef class MzXMLFile:             # <<<<<<<<<<<<<<
 *     cdef _MzXMLFile * inst
 *     cdef _new_inst(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile {
  PyObject *(*_new_inst)(struct __pyx_obj_9_pyOpenMS_MzXMLFile *);
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MzXMLFile *, OpenMS::MzXMLFile *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile *__pyx_vtabptr_9_pyOpenMS_MzXMLFile;


/* "_pyOpenMS.pyx":208
 *         self.inst.setPolarity(<_Polarity>a)
 *         return self
 * cdef class ChromatogramTools:             # <<<<<<<<<<<<<<
 *     cdef _ChromatogramTools * inst
 *     cdef _new_inst(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools {
  PyObject *(*_new_inst)(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *);
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *, OpenMS::ChromatogramTools *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools *__pyx_vtabptr_9_pyOpenMS_ChromatogramTools;


/* "_pyOpenMS.pyx":188
 *         self.inst.push_back(deref(a.inst))
 *         return self
 * cdef class InstrumentSettings:             # <<<<<<<<<<<<<<
 *     cdef _InstrumentSettings * inst
 *     cdef _new_inst(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings {
  PyObject *(*_new_inst)(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *);
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *, OpenMS::InstrumentSettings *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings *__pyx_vtabptr_9_pyOpenMS_InstrumentSettings;


/* "_pyOpenMS.pyx":257
 *         del _a_as_str
 *         return self
 * cdef class MzMLFile:             # <<<<<<<<<<<<<<
 *     cdef _MzMLFile * inst
 *     cdef _new_inst(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile {
  PyObject *(*_new_inst)(struct __pyx_obj_9_pyOpenMS_MzMLFile *);
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MzMLFile *, OpenMS::MzMLFile *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile *__pyx_vtabptr_9_pyOpenMS_MzMLFile;


/* "_pyOpenMS.pyx":68
 *         self.inst.setIntensity(a)
 *         return self
 * cdef class MSSpectrum:             # <<<<<<<<<<<<<<
 *     cdef _MSSpectrum[_Peak1D] * inst
 *     cdef _new_inst(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum {
  PyObject *(*_new_inst)(struct __pyx_obj_9_pyOpenMS_MSSpectrum *);
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MSSpectrum *, OpenMS::MSSpectrum<OpenMS::Peak1D> *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum *__pyx_vtabptr_9_pyOpenMS_MSSpectrum;


/* "_pyOpenMS.pyx":281
 *         del _a_as_str
 *         return self
 * cdef class MzDataFile:             # <<<<<<<<<<<<<<
 *     cdef _MzDataFile * inst
 *     cdef _new_inst(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile {
  PyObject *(*_new_inst)(struct __pyx_obj_9_pyOpenMS_MzDataFile *);
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MzDataFile *, OpenMS::MzDataFile *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile *__pyx_vtabptr_9_pyOpenMS_MzDataFile;


/* "_pyOpenMS.pyx":42
 *         self.inst.setIntensity(a)
 *         return self
 * cdef class Precursor:             # <<<<<<<<<<<<<<
 *     cdef _Precursor * inst
 *     cdef _new_inst(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS_Precursor {
  PyObject *(*_new_inst)(struct __pyx_obj_9_pyOpenMS_Precursor *);
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_Precursor *, OpenMS::Precursor *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_Precursor *__pyx_vtabptr_9_pyOpenMS_Precursor;


/* "_pyOpenMS.pyx":145
 *         del _a_as_str
 *         return self
 * cdef class MSExperiment:             # <<<<<<<<<<<<<<
 *     cdef _MSExperiment[_Peak1D,_ChromatogramPeak] * inst
 *     cdef _new_inst(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment {
  PyObject *(*_new_inst)(struct __pyx_obj_9_pyOpenMS_MSExperiment *);
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_MSExperiment *, OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak> *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment *__pyx_vtabptr_9_pyOpenMS_MSExperiment;


/* "_pyOpenMS.pyx":16
 * from pxd.Polarity cimport Polarity as _Polarity
 * from pxd.Precursor cimport Precursor as _Precursor
 * cdef class Peak1D:             # <<<<<<<<<<<<<<
 *     cdef _Peak1D * inst
 *     cdef _new_inst(self):
 */

struct __pyx_vtabstruct_9_pyOpenMS_Peak1D {
  PyObject *(*_new_inst)(struct __pyx_obj_9_pyOpenMS_Peak1D *);
  PyObject *(*_set_inst)(struct __pyx_obj_9_pyOpenMS_Peak1D *, OpenMS::Peak1D *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_Peak1D *__pyx_vtabptr_9_pyOpenMS_Peak1D;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  // Catch a handful of different errors here and turn them into the
  // equivalent Python errors.
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    // Unfortunately, in standard C++ we have no way of distinguishing EOF
    // from other errors here; be careful with the exception mask
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'pxd.ChromatogramPeak' */

/* Module declarations from 'pxd.Peak1D' */

/* Module declarations from 'pxd.IonSource' */

/* Module declarations from 'pxd.Polarity' */

/* Module declarations from 'pxd.InstrumentSettings' */

/* Module declarations from 'pxd.Precursor' */

/* Module declarations from 'pxd.MSSpectrum' */

/* Module declarations from 'pxd.MSExperiment' */

/* Module declarations from 'pxd.ChromatogramTools' */

/* Module declarations from 'pxd.MzDataFile' */

/* Module declarations from 'pxd.MzMLFile' */

/* Module declarations from 'pxd.MzXMLFile' */

/* Module declarations from '_pyOpenMS' */
static PyTypeObject *__pyx_ptype_9_pyOpenMS_Peak1D = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_Precursor = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MSSpectrum = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MSExperiment = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_InstrumentSettings = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_ChromatogramTools = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_Polarity = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MzXMLFile = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MzMLFile = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_MzDataFile = 0;
#define __Pyx_MODULE_NAME "_pyOpenMS"
int __pyx_module_is_main__pyOpenMS = 0;

/* Implementation of '_pyOpenMS' */
static PyObject *__pyx_builtin_range;
static char __pyx_k__a[] = "a";
static char __pyx_k__b[] = "b";
static char __pyx_k__epx[] = "epx";
static char __pyx_k__range[] = "range";
static char __pyx_k__POSNULL[] = "POSNULL";
static char __pyx_k__NEGATIVE[] = "NEGATIVE";
static char __pyx_k__POSITIVE[] = "POSITIVE";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k___new_inst[] = "_new_inst";
static char __pyx_k__remove_spectra[] = "remove_spectra";
static char __pyx_k__SIZE_OF_POLARITY[] = "SIZE_OF_POLARITY";
static PyObject *__pyx_n_s__NEGATIVE;
static PyObject *__pyx_n_s__POSITIVE;
static PyObject *__pyx_n_s__POSNULL;
static PyObject *__pyx_n_s__SIZE_OF_POLARITY;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___new_inst;
static PyObject *__pyx_n_s__a;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__epx;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__remove_spectra;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_k_1;
static PyObject *__pyx_k_2;
static PyObject *__pyx_k_3;
static PyObject *__pyx_k_4;
static PyObject *__pyx_k_5;
static PyObject *__pyx_k_6;
static PyObject *__pyx_k_7;
static PyObject *__pyx_k_8;
static PyObject *__pyx_k_9;

/* "_pyOpenMS.pyx":18
 * cdef class Peak1D:
 *     cdef _Peak1D * inst
 *     cdef _new_inst(self):             # <<<<<<<<<<<<<<
 *        self.inst = new _Peak1D()
 *     cdef _set_inst(self, _Peak1D * inst):
 */

static PyObject *__pyx_f_9_pyOpenMS_6Peak1D__new_inst(struct __pyx_obj_9_pyOpenMS_Peak1D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_new_inst");

  /* "_pyOpenMS.pyx":19
 *     cdef _Peak1D * inst
 *     cdef _new_inst(self):
 *        self.inst = new _Peak1D()             # <<<<<<<<<<<<<<
 *     cdef _set_inst(self, _Peak1D * inst):
 *         if self.inst != NULL:
 */
  __pyx_v_self->inst = new OpenMS::Peak1D();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":20
 *     cdef _new_inst(self):
 *        self.inst = new _Peak1D()
 *     cdef _set_inst(self, _Peak1D * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_6Peak1D__set_inst(struct __pyx_obj_9_pyOpenMS_Peak1D *__pyx_v_self, OpenMS::Peak1D *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":21
 *        self.inst = new _Peak1D()
 *     cdef _set_inst(self, _Peak1D * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":22
 *     cdef _set_inst(self, _Peak1D * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":23
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":24
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */

static int __pyx_pf_9_pyOpenMS_6Peak1D___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_6Peak1D___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__new_inst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___new_inst,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s___new_inst);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v__new_inst = values[0];
  } else {
    __pyx_v__new_inst = __pyx_k_1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v__new_inst = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":25
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:             # <<<<<<<<<<<<<<
 *            self._new_inst()
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v__new_inst); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":26
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 *            self._new_inst()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_Peak1D *)((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->__pyx_vtab)->_new_inst(((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":27
 *         if _new_inst:
 *            self._new_inst()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_6Peak1D_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_6Peak1D_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":28
 *            self._new_inst()
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *     def getMZ (self):
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":29
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *     def getMZ (self):
 *         _result = self.inst.getMZ()
 */
    delete ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":30
 *         if self.inst != NULL:
 *             del self.inst
 *     def getMZ (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getMZ()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_2getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_2getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMZ");

  /* "_pyOpenMS.pyx":31
 *             del self.inst
 *     def getMZ (self):
 *         _result = self.inst.getMZ()             # <<<<<<<<<<<<<<
 *         return _result
 *     def getIntensity (self):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst->getMZ();

  /* "_pyOpenMS.pyx":32
 *     def getMZ (self):
 *         _result = self.inst.getMZ()
 *         return _result             # <<<<<<<<<<<<<<
 *     def getIntensity (self):
 *         _result = self.inst.getIntensity()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.getMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":33
 *         _result = self.inst.getMZ()
 *         return _result
 *     def getIntensity (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getIntensity()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_3getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_3getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntensity");

  /* "_pyOpenMS.pyx":34
 *         return _result
 *     def getIntensity (self):
 *         _result = self.inst.getIntensity()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setMZ (self, double a):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst->getIntensity();

  /* "_pyOpenMS.pyx":35
 *     def getIntensity (self):
 *         _result = self.inst.getIntensity()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setMZ (self, double a):
 *         self.inst.setMZ(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.getIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":36
 *         _result = self.inst.getIntensity()
 *         return _result
 *     def setMZ (self, double a):             # <<<<<<<<<<<<<<
 *         self.inst.setMZ(a)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_4setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_4setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMZ");
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":37
 *         return _result
 *     def setMZ (self, double a):
 *         self.inst.setMZ(a)             # <<<<<<<<<<<<<<
 *         return self
 *     def setIntensity (self, double a):
 */
  ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst->setMZ(__pyx_v_a);

  /* "_pyOpenMS.pyx":38
 *     def setMZ (self, double a):
 *         self.inst.setMZ(a)
 *         return self             # <<<<<<<<<<<<<<
 *     def setIntensity (self, double a):
 *         self.inst.setIntensity(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":39
 *         self.inst.setMZ(a)
 *         return self
 *     def setIntensity (self, double a):             # <<<<<<<<<<<<<<
 *         self.inst.setIntensity(a)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_5setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_6Peak1D_5setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setIntensity");
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Peak1D.setIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":40
 *         return self
 *     def setIntensity (self, double a):
 *         self.inst.setIntensity(a)             # <<<<<<<<<<<<<<
 *         return self
 * cdef class Precursor:
 */
  ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_v_self)->inst->setIntensity(__pyx_v_a);

  /* "_pyOpenMS.pyx":41
 *     def setIntensity (self, double a):
 *         self.inst.setIntensity(a)
 *         return self             # <<<<<<<<<<<<<<
 * cdef class Precursor:
 *     cdef _Precursor * inst
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":44
 * cdef class Precursor:
 *     cdef _Precursor * inst
 *     cdef _new_inst(self):             # <<<<<<<<<<<<<<
 *        self.inst = new _Precursor()
 *     cdef _set_inst(self, _Precursor * inst):
 */

static PyObject *__pyx_f_9_pyOpenMS_9Precursor__new_inst(struct __pyx_obj_9_pyOpenMS_Precursor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_new_inst");

  /* "_pyOpenMS.pyx":45
 *     cdef _Precursor * inst
 *     cdef _new_inst(self):
 *        self.inst = new _Precursor()             # <<<<<<<<<<<<<<
 *     cdef _set_inst(self, _Precursor * inst):
 *         if self.inst != NULL:
 */
  __pyx_v_self->inst = new OpenMS::Precursor();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":46
 *     cdef _new_inst(self):
 *        self.inst = new _Precursor()
 *     cdef _set_inst(self, _Precursor * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_9Precursor__set_inst(struct __pyx_obj_9_pyOpenMS_Precursor *__pyx_v_self, OpenMS::Precursor *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":47
 *        self.inst = new _Precursor()
 *     cdef _set_inst(self, _Precursor * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":48
 *     cdef _set_inst(self, _Precursor * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":49
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":50
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */

static int __pyx_pf_9_pyOpenMS_9Precursor___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_9Precursor___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__new_inst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___new_inst,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_2;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s___new_inst);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v__new_inst = values[0];
  } else {
    __pyx_v__new_inst = __pyx_k_2;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v__new_inst = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Precursor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":51
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:             # <<<<<<<<<<<<<<
 *            self._new_inst()
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v__new_inst); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":52
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 *            self._new_inst()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_Precursor *)((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->__pyx_vtab)->_new_inst(((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.Precursor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":53
 *         if _new_inst:
 *            self._new_inst()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_9Precursor_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_9Precursor_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":54
 *            self._new_inst()
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *     def getMZ (self):
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":55
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *     def getMZ (self):
 *         _result = self.inst.getMZ()
 */
    delete ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":56
 *         if self.inst != NULL:
 *             del self.inst
 *     def getMZ (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getMZ()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_2getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_2getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMZ");

  /* "_pyOpenMS.pyx":57
 *             del self.inst
 *     def getMZ (self):
 *         _result = self.inst.getMZ()             # <<<<<<<<<<<<<<
 *         return _result
 *     def getIntensity (self):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst->getMZ();

  /* "_pyOpenMS.pyx":58
 *     def getMZ (self):
 *         _result = self.inst.getMZ()
 *         return _result             # <<<<<<<<<<<<<<
 *     def getIntensity (self):
 *         _result = self.inst.getIntensity()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Precursor.getMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":59
 *         _result = self.inst.getMZ()
 *         return _result
 *     def getIntensity (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getIntensity()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_3getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_3getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntensity");

  /* "_pyOpenMS.pyx":60
 *         return _result
 *     def getIntensity (self):
 *         _result = self.inst.getIntensity()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setMZ (self, double a):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst->getIntensity();

  /* "_pyOpenMS.pyx":61
 *     def getIntensity (self):
 *         _result = self.inst.getIntensity()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setMZ (self, double a):
 *         self.inst.setMZ(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.Precursor.getIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":62
 *         _result = self.inst.getIntensity()
 *         return _result
 *     def setMZ (self, double a):             # <<<<<<<<<<<<<<
 *         self.inst.setMZ(a)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_4setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_4setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMZ");
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Precursor.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":63
 *         return _result
 *     def setMZ (self, double a):
 *         self.inst.setMZ(a)             # <<<<<<<<<<<<<<
 *         return self
 *     def setIntensity (self, double a):
 */
  ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst->setMZ(__pyx_v_a);

  /* "_pyOpenMS.pyx":64
 *     def setMZ (self, double a):
 *         self.inst.setMZ(a)
 *         return self             # <<<<<<<<<<<<<<
 *     def setIntensity (self, double a):
 *         self.inst.setIntensity(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":65
 *         self.inst.setMZ(a)
 *         return self
 *     def setIntensity (self, double a):             # <<<<<<<<<<<<<<
 *         self.inst.setIntensity(a)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_5setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9Precursor_5setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setIntensity");
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.Precursor.setIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":66
 *         return self
 *     def setIntensity (self, double a):
 *         self.inst.setIntensity(a)             # <<<<<<<<<<<<<<
 *         return self
 * cdef class MSSpectrum:
 */
  ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_v_self)->inst->setIntensity(__pyx_v_a);

  /* "_pyOpenMS.pyx":67
 *     def setIntensity (self, double a):
 *         self.inst.setIntensity(a)
 *         return self             # <<<<<<<<<<<<<<
 * cdef class MSSpectrum:
 *     cdef _MSSpectrum[_Peak1D] * inst
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":70
 * cdef class MSSpectrum:
 *     cdef _MSSpectrum[_Peak1D] * inst
 *     cdef _new_inst(self):             # <<<<<<<<<<<<<<
 *        self.inst = new _MSSpectrum[_Peak1D]()
 *     cdef _set_inst(self, _MSSpectrum[_Peak1D] * inst):
 */

static PyObject *__pyx_f_9_pyOpenMS_10MSSpectrum__new_inst(struct __pyx_obj_9_pyOpenMS_MSSpectrum *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_new_inst");

  /* "_pyOpenMS.pyx":71
 *     cdef _MSSpectrum[_Peak1D] * inst
 *     cdef _new_inst(self):
 *        self.inst = new _MSSpectrum[_Peak1D]()             # <<<<<<<<<<<<<<
 *     cdef _set_inst(self, _MSSpectrum[_Peak1D] * inst):
 *         if self.inst != NULL:
 */
  __pyx_v_self->inst = new OpenMS::MSSpectrum<OpenMS::Peak1D>();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":72
 *     cdef _new_inst(self):
 *        self.inst = new _MSSpectrum[_Peak1D]()
 *     cdef _set_inst(self, _MSSpectrum[_Peak1D] * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_10MSSpectrum__set_inst(struct __pyx_obj_9_pyOpenMS_MSSpectrum *__pyx_v_self, OpenMS::MSSpectrum<OpenMS::Peak1D> *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":73
 *        self.inst = new _MSSpectrum[_Peak1D]()
 *     cdef _set_inst(self, _MSSpectrum[_Peak1D] * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":74
 *     cdef _set_inst(self, _MSSpectrum[_Peak1D] * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":75
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":76
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */

static int __pyx_pf_9_pyOpenMS_10MSSpectrum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10MSSpectrum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__new_inst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___new_inst,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_3;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s___new_inst);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v__new_inst = values[0];
  } else {
    __pyx_v__new_inst = __pyx_k_3;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v__new_inst = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":77
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:             # <<<<<<<<<<<<<<
 *            self._new_inst()
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v__new_inst); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":78
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 *            self._new_inst()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum *)((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->__pyx_vtab)->_new_inst(((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":79
 *         if _new_inst:
 *            self._new_inst()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_10MSSpectrum_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_10MSSpectrum_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":80
 *            self._new_inst()
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *     def getRT (self):
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":81
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *     def getRT (self):
 *         _result = self.inst.getRT()
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":82
 *         if self.inst != NULL:
 *             del self.inst
 *     def getRT (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getRT()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_2getRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_2getRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRT");

  /* "_pyOpenMS.pyx":83
 *             del self.inst
 *     def getRT (self):
 *         _result = self.inst.getRT()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setRT (self, double a):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getRT();

  /* "_pyOpenMS.pyx":84
 *     def getRT (self):
 *         _result = self.inst.getRT()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setRT (self, double a):
 *         self.inst.setRT(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":85
 *         _result = self.inst.getRT()
 *         return _result
 *     def setRT (self, double a):             # <<<<<<<<<<<<<<
 *         self.inst.setRT(a)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_3setRT(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_3setRT(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setRT");
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":86
 *         return _result
 *     def setRT (self, double a):
 *         self.inst.setRT(a)             # <<<<<<<<<<<<<<
 *         return self
 *     def getMSLevel (self):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setRT(__pyx_v_a);

  /* "_pyOpenMS.pyx":87
 *     def setRT (self, double a):
 *         self.inst.setRT(a)
 *         return self             # <<<<<<<<<<<<<<
 *     def getMSLevel (self):
 *         _result = self.inst.getMSLevel()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":88
 *         self.inst.setRT(a)
 *         return self
 *     def getMSLevel (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getMSLevel()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_4getMSLevel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_4getMSLevel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  unsigned int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMSLevel");

  /* "_pyOpenMS.pyx":89
 *         return self
 *     def getMSLevel (self):
 *         _result = self.inst.getMSLevel()             # <<<<<<<<<<<<<<
 *         return _result
 *     def setMSLevel (self, int a):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getMSLevel();

  /* "_pyOpenMS.pyx":90
 *     def getMSLevel (self):
 *         _result = self.inst.getMSLevel()
 *         return _result             # <<<<<<<<<<<<<<
 *     def setMSLevel (self, int a):
 *         self.inst.setMSLevel(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getMSLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":91
 *         _result = self.inst.getMSLevel()
 *         return _result
 *     def setMSLevel (self, int a):             # <<<<<<<<<<<<<<
 *         self.inst.setMSLevel(a)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_5setMSLevel(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_5setMSLevel(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  int __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMSLevel");
  assert(__pyx_arg_a); {
    __pyx_v_a = __Pyx_PyInt_AsInt(__pyx_arg_a); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setMSLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":92
 *         return _result
 *     def setMSLevel (self, int a):
 *         self.inst.setMSLevel(a)             # <<<<<<<<<<<<<<
 *         return self
 *     def getName (self):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setMSLevel(__pyx_v_a);

  /* "_pyOpenMS.pyx":93
 *     def setMSLevel (self, int a):
 *         self.inst.setMSLevel(a)
 *         return self             # <<<<<<<<<<<<<<
 *     def getName (self):
 *         _result = self.inst.getName()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":94
 *         self.inst.setMSLevel(a)
 *         return self
 *     def getName (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getName()
 *         return _result.c_str()
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_6getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_6getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");

  /* "_pyOpenMS.pyx":95
 *         return self
 *     def getName (self):
 *         _result = self.inst.getName()             # <<<<<<<<<<<<<<
 *         return _result.c_str()
 *     def setName (self, char * a):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getName();

  /* "_pyOpenMS.pyx":96
 *     def getName (self):
 *         _result = self.inst.getName()
 *         return _result.c_str()             # <<<<<<<<<<<<<<
 *     def setName (self, char * a):
 *         cdef string * _a_as_str = new string(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v__result.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":97
 *         _result = self.inst.getName()
 *         return _result.c_str()
 *     def setName (self, char * a):             # <<<<<<<<<<<<<<
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.setName(deref(_a_as_str))
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_7setName(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_7setName(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  char *__pyx_v_a;
  std::string *__pyx_v__a_as_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setName");
  assert(__pyx_arg_a); {
    __pyx_v_a = PyBytes_AsString(__pyx_arg_a); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":98
 *         return _result.c_str()
 *     def setName (self, char * a):
 *         cdef string * _a_as_str = new string(a)             # <<<<<<<<<<<<<<
 *         self.inst.setName(deref(_a_as_str))
 *         del _a_as_str
 */
  __pyx_v__a_as_str = new std::string(__pyx_v_a);

  /* "_pyOpenMS.pyx":99
 *     def setName (self, char * a):
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.setName(deref(_a_as_str))             # <<<<<<<<<<<<<<
 *         del _a_as_str
 *         return self
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setName((*__pyx_v__a_as_str));

  /* "_pyOpenMS.pyx":100
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.setName(deref(_a_as_str))
 *         del _a_as_str             # <<<<<<<<<<<<<<
 *         return self
 *     def size (self):
 */
  delete __pyx_v__a_as_str;

  /* "_pyOpenMS.pyx":101
 *         self.inst.setName(deref(_a_as_str))
 *         del _a_as_str
 *         return self             # <<<<<<<<<<<<<<
 *     def size (self):
 *         _result = self.inst.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":102
 *         del _a_as_str
 *         return self
 *     def size (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.size()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_8size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_8size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "_pyOpenMS.pyx":103
 *         return self
 *     def size (self):
 *         _result = self.inst.size()             # <<<<<<<<<<<<<<
 *         return _result
 *     def __getitem__(self, int idx):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->size();

  /* "_pyOpenMS.pyx":104
 *     def size (self):
 *         _result = self.inst.size()
 *         return _result             # <<<<<<<<<<<<<<
 *     def __getitem__(self, int idx):
 *         cdef _Peak1D _res = deref(self.inst)[idx]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":105
 *         _result = self.inst.size()
 *         return _result
 *     def __getitem__(self, int idx):             # <<<<<<<<<<<<<<
 *         cdef _Peak1D _res = deref(self.inst)[idx]
 *         __res_py = Peak1D(False)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx) {
  int __pyx_v_idx;
  OpenMS::Peak1D __pyx_v__res;
  struct __pyx_obj_9_pyOpenMS_Peak1D *__pyx_v___res_py = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_AsInt(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":106
 *         return _result
 *     def __getitem__(self, int idx):
 *         cdef _Peak1D _res = deref(self.inst)[idx]             # <<<<<<<<<<<<<<
 *         __res_py = Peak1D(False)
 *         __res_py._set_inst(new _Peak1D(_res))
 */
  __pyx_v__res = ((*((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst)[__pyx_v_idx]);

  /* "_pyOpenMS.pyx":107
 *     def __getitem__(self, int idx):
 *         cdef _Peak1D _res = deref(self.inst)[idx]
 *         __res_py = Peak1D(False)             # <<<<<<<<<<<<<<
 *         __res_py._set_inst(new _Peak1D(_res))
 *         return __res_py
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_Peak1D)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v___res_py = ((struct __pyx_obj_9_pyOpenMS_Peak1D *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":108
 *         cdef _Peak1D _res = deref(self.inst)[idx]
 *         __res_py = Peak1D(False)
 *         __res_py._set_inst(new _Peak1D(_res))             # <<<<<<<<<<<<<<
 *         return __res_py
 *     def updateRanges (self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_Peak1D *)__pyx_v___res_py->__pyx_vtab)->_set_inst(__pyx_v___res_py, new OpenMS::Peak1D(__pyx_v__res)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":109
 *         __res_py = Peak1D(False)
 *         __res_py._set_inst(new _Peak1D(_res))
 *         return __res_py             # <<<<<<<<<<<<<<
 *     def updateRanges (self):
 *         self.inst.updateRanges()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___res_py));
  __pyx_r = ((PyObject *)__pyx_v___res_py);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___res_py);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":110
 *         __res_py._set_inst(new _Peak1D(_res))
 *         return __res_py
 *     def updateRanges (self):             # <<<<<<<<<<<<<<
 *         self.inst.updateRanges()
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_10updateRanges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_10updateRanges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateRanges");

  /* "_pyOpenMS.pyx":111
 *         return __res_py
 *     def updateRanges (self):
 *         self.inst.updateRanges()             # <<<<<<<<<<<<<<
 *         return self
 *     def getInstrumentSettings (self):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->updateRanges();

  /* "_pyOpenMS.pyx":112
 *     def updateRanges (self):
 *         self.inst.updateRanges()
 *         return self             # <<<<<<<<<<<<<<
 *     def getInstrumentSettings (self):
 *         _result = self.inst.getInstrumentSettings()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":113
 *         self.inst.updateRanges()
 *         return self
 *     def getInstrumentSettings (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getInstrumentSettings()
 *         __result_py = InstrumentSettings(False)
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_11getInstrumentSettings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_11getInstrumentSettings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  OpenMS::InstrumentSettings __pyx_v__result;
  struct __pyx_obj_9_pyOpenMS_InstrumentSettings *__pyx_v___result_py = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getInstrumentSettings");

  /* "_pyOpenMS.pyx":114
 *         return self
 *     def getInstrumentSettings (self):
 *         _result = self.inst.getInstrumentSettings()             # <<<<<<<<<<<<<<
 *         __result_py = InstrumentSettings(False)
 *         __result_py._set_inst(new _InstrumentSettings(_result))
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getInstrumentSettings();

  /* "_pyOpenMS.pyx":115
 *     def getInstrumentSettings (self):
 *         _result = self.inst.getInstrumentSettings()
 *         __result_py = InstrumentSettings(False)             # <<<<<<<<<<<<<<
 *         __result_py._set_inst(new _InstrumentSettings(_result))
 *         return __result_py
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_InstrumentSettings)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v___result_py = ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":116
 *         _result = self.inst.getInstrumentSettings()
 *         __result_py = InstrumentSettings(False)
 *         __result_py._set_inst(new _InstrumentSettings(_result))             # <<<<<<<<<<<<<<
 *         return __result_py
 *     def findNearest (self, double a):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings *)__pyx_v___result_py->__pyx_vtab)->_set_inst(__pyx_v___result_py, new OpenMS::InstrumentSettings(__pyx_v__result)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":117
 *         __result_py = InstrumentSettings(False)
 *         __result_py._set_inst(new _InstrumentSettings(_result))
 *         return __result_py             # <<<<<<<<<<<<<<
 *     def findNearest (self, double a):
 *         _result = self.inst.findNearest(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___result_py));
  __pyx_r = ((PyObject *)__pyx_v___result_py);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getInstrumentSettings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___result_py);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":118
 *         __result_py._set_inst(new _InstrumentSettings(_result))
 *         return __result_py
 *     def findNearest (self, double a):             # <<<<<<<<<<<<<<
 *         _result = self.inst.findNearest(a)
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_12findNearest(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_12findNearest(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a;
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findNearest");
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.findNearest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":119
 *         return __result_py
 *     def findNearest (self, double a):
 *         _result = self.inst.findNearest(a)             # <<<<<<<<<<<<<<
 *         return _result
 *     def getPrecursors (self):
 */
  try {__pyx_t_1 = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->findNearest(__pyx_v_a);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v__result = __pyx_t_1;

  /* "_pyOpenMS.pyx":120
 *     def findNearest (self, double a):
 *         _result = self.inst.findNearest(a)
 *         return _result             # <<<<<<<<<<<<<<
 *     def getPrecursors (self):
 *         _result = self.inst.getPrecursors()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.findNearest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":121
 *         _result = self.inst.findNearest(a)
 *         return _result
 *     def getPrecursors (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getPrecursors()
 *         _rv = list()
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_13getPrecursors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_13getPrecursors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::vector<OpenMS::Precursor> __pyx_v__result;
  PyObject *__pyx_v__rv = NULL;
  size_t __pyx_v__i;
  struct __pyx_obj_9_pyOpenMS_Precursor *__pyx_v__res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPrecursors");

  /* "_pyOpenMS.pyx":122
 *         return _result
 *     def getPrecursors (self):
 *         _result = self.inst.getPrecursors()             # <<<<<<<<<<<<<<
 *         _rv = list()
 *         for _i in range(_result.size()):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getPrecursors();

  /* "_pyOpenMS.pyx":123
 *     def getPrecursors (self):
 *         _result = self.inst.getPrecursors()
 *         _rv = list()             # <<<<<<<<<<<<<<
 *         for _i in range(_result.size()):
 *             _res = Precursor(False)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v__rv = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":124
 *         _result = self.inst.getPrecursors()
 *         _rv = list()
 *         for _i in range(_result.size()):             # <<<<<<<<<<<<<<
 *             _res = Precursor(False)
 *             _res._set_inst(new _Precursor(_result.at(_i)))
 */
  __pyx_t_2 = __pyx_v__result.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v__i = __pyx_t_3;

    /* "_pyOpenMS.pyx":125
 *         _rv = list()
 *         for _i in range(_result.size()):
 *             _res = Precursor(False)             # <<<<<<<<<<<<<<
 *             _res._set_inst(new _Precursor(_result.at(_i)))
 *             _rv.append(_res)
 */
    __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_Precursor)), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_XDECREF(((PyObject *)__pyx_v__res));
    __pyx_v__res = ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":126
 *         for _i in range(_result.size()):
 *             _res = Precursor(False)
 *             _res._set_inst(new _Precursor(_result.at(_i)))             # <<<<<<<<<<<<<<
 *             _rv.append(_res)
 *         return _rv
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_Precursor *)__pyx_v__res->__pyx_vtab)->_set_inst(__pyx_v__res, new OpenMS::Precursor(__pyx_v__result.at(__pyx_v__i))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_pyOpenMS.pyx":127
 *             _res = Precursor(False)
 *             _res._set_inst(new _Precursor(_result.at(_i)))
 *             _rv.append(_res)             # <<<<<<<<<<<<<<
 *         return _rv
 *     def setPrecursors (self,  a):
 */
    if (unlikely(((PyObject *)__pyx_v__rv) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_5 = PyList_Append(__pyx_v__rv, ((PyObject *)__pyx_v__res)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "_pyOpenMS.pyx":128
 *             _res._set_inst(new _Precursor(_result.at(_i)))
 *             _rv.append(_res)
 *         return _rv             # <<<<<<<<<<<<<<
 *     def setPrecursors (self,  a):
 *         cdef vector[_Precursor] * _a_as_vec = new vector[_Precursor]()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v__rv));
  __pyx_r = ((PyObject *)__pyx_v__rv);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getPrecursors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__rv);
  __Pyx_XDECREF((PyObject *)__pyx_v__res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":129
 *             _rv.append(_res)
 *         return _rv
 *     def setPrecursors (self,  a):             # <<<<<<<<<<<<<<
 *         cdef vector[_Precursor] * _a_as_vec = new vector[_Precursor]()
 *         cdef Precursor _v000
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_14setPrecursors(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_14setPrecursors(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {
  std::vector<OpenMS::Precursor> *__pyx_v__a_as_vec;
  struct __pyx_obj_9_pyOpenMS_Precursor *__pyx_v__v000 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPrecursors");

  /* "_pyOpenMS.pyx":130
 *         return _rv
 *     def setPrecursors (self,  a):
 *         cdef vector[_Precursor] * _a_as_vec = new vector[_Precursor]()             # <<<<<<<<<<<<<<
 *         cdef Precursor _v000
 *         for _v000 in a:
 */
  __pyx_v__a_as_vec = new std::vector<OpenMS::Precursor>();

  /* "_pyOpenMS.pyx":132
 *         cdef vector[_Precursor] * _a_as_vec = new vector[_Precursor]()
 *         cdef Precursor _v000
 *         for _v000 in a:             # <<<<<<<<<<<<<<
 *             deref(_a_as_vec).push_back(deref(_v000.inst))
 *         self.inst.setPrecursors(deref(_a_as_vec))
 */
  if (PyList_CheckExact(__pyx_v_a) || PyTuple_CheckExact(__pyx_v_a)) {
    __pyx_t_1 = __pyx_v_a; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_a); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_9_pyOpenMS_Precursor))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v__v000));
    __pyx_v__v000 = ((struct __pyx_obj_9_pyOpenMS_Precursor *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "_pyOpenMS.pyx":133
 *         cdef Precursor _v000
 *         for _v000 in a:
 *             deref(_a_as_vec).push_back(deref(_v000.inst))             # <<<<<<<<<<<<<<
 *         self.inst.setPrecursors(deref(_a_as_vec))
 *         del _a_as_vec
 */
    (*__pyx_v__a_as_vec).push_back((*__pyx_v__v000->inst));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":134
 *         for _v000 in a:
 *             deref(_a_as_vec).push_back(deref(_v000.inst))
 *         self.inst.setPrecursors(deref(_a_as_vec))             # <<<<<<<<<<<<<<
 *         del _a_as_vec
 *         return self
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setPrecursors(((std::vector<OpenMS::Precursor>)(*__pyx_v__a_as_vec)));

  /* "_pyOpenMS.pyx":135
 *             deref(_a_as_vec).push_back(deref(_v000.inst))
 *         self.inst.setPrecursors(deref(_a_as_vec))
 *         del _a_as_vec             # <<<<<<<<<<<<<<
 *         return self
 *     def getNativeID (self):
 */
  delete __pyx_v__a_as_vec;

  /* "_pyOpenMS.pyx":136
 *         self.inst.setPrecursors(deref(_a_as_vec))
 *         del _a_as_vec
 *         return self             # <<<<<<<<<<<<<<
 *     def getNativeID (self):
 *         _result = self.inst.getNativeID()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setPrecursors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v__v000);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":137
 *         del _a_as_vec
 *         return self
 *     def getNativeID (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getNativeID()
 *         return _result.c_str()
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_15getNativeID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_15getNativeID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNativeID");

  /* "_pyOpenMS.pyx":138
 *         return self
 *     def getNativeID (self):
 *         _result = self.inst.getNativeID()             # <<<<<<<<<<<<<<
 *         return _result.c_str()
 *     def setNativeID (self, char * a):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->getNativeID();

  /* "_pyOpenMS.pyx":139
 *     def getNativeID (self):
 *         _result = self.inst.getNativeID()
 *         return _result.c_str()             # <<<<<<<<<<<<<<
 *     def setNativeID (self, char * a):
 *         cdef string * _a_as_str = new string(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v__result.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.getNativeID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":140
 *         _result = self.inst.getNativeID()
 *         return _result.c_str()
 *     def setNativeID (self, char * a):             # <<<<<<<<<<<<<<
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.setNativeID(deref(_a_as_str))
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_16setNativeID(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MSSpectrum_16setNativeID(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  char *__pyx_v_a;
  std::string *__pyx_v__a_as_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNativeID");
  assert(__pyx_arg_a); {
    __pyx_v_a = PyBytes_AsString(__pyx_arg_a); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSSpectrum.setNativeID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":141
 *         return _result.c_str()
 *     def setNativeID (self, char * a):
 *         cdef string * _a_as_str = new string(a)             # <<<<<<<<<<<<<<
 *         self.inst.setNativeID(deref(_a_as_str))
 *         del _a_as_str
 */
  __pyx_v__a_as_str = new std::string(__pyx_v_a);

  /* "_pyOpenMS.pyx":142
 *     def setNativeID (self, char * a):
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.setNativeID(deref(_a_as_str))             # <<<<<<<<<<<<<<
 *         del _a_as_str
 *         return self
 */
  ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_self)->inst->setNativeID((*__pyx_v__a_as_str));

  /* "_pyOpenMS.pyx":143
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.setNativeID(deref(_a_as_str))
 *         del _a_as_str             # <<<<<<<<<<<<<<
 *         return self
 * cdef class MSExperiment:
 */
  delete __pyx_v__a_as_str;

  /* "_pyOpenMS.pyx":144
 *         self.inst.setNativeID(deref(_a_as_str))
 *         del _a_as_str
 *         return self             # <<<<<<<<<<<<<<
 * cdef class MSExperiment:
 *     cdef _MSExperiment[_Peak1D,_ChromatogramPeak] * inst
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":147
 * cdef class MSExperiment:
 *     cdef _MSExperiment[_Peak1D,_ChromatogramPeak] * inst
 *     cdef _new_inst(self):             # <<<<<<<<<<<<<<
 *        self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()
 *     cdef _set_inst(self, _MSExperiment[_Peak1D,_ChromatogramPeak] * inst):
 */

static PyObject *__pyx_f_9_pyOpenMS_12MSExperiment__new_inst(struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_new_inst");

  /* "_pyOpenMS.pyx":148
 *     cdef _MSExperiment[_Peak1D,_ChromatogramPeak] * inst
 *     cdef _new_inst(self):
 *        self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()             # <<<<<<<<<<<<<<
 *     cdef _set_inst(self, _MSExperiment[_Peak1D,_ChromatogramPeak] * inst):
 *         if self.inst != NULL:
 */
  __pyx_v_self->inst = new OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak>();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":149
 *     cdef _new_inst(self):
 *        self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()
 *     cdef _set_inst(self, _MSExperiment[_Peak1D,_ChromatogramPeak] * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_12MSExperiment__set_inst(struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_self, OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak> *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":150
 *        self.inst = new _MSExperiment[_Peak1D,_ChromatogramPeak]()
 *     cdef _set_inst(self, _MSExperiment[_Peak1D,_ChromatogramPeak] * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":151
 *     cdef _set_inst(self, _MSExperiment[_Peak1D,_ChromatogramPeak] * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":152
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":153
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */

static int __pyx_pf_9_pyOpenMS_12MSExperiment___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_12MSExperiment___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__new_inst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___new_inst,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_4;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s___new_inst);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v__new_inst = values[0];
  } else {
    __pyx_v__new_inst = __pyx_k_4;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v__new_inst = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":154
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:             # <<<<<<<<<<<<<<
 *            self._new_inst()
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v__new_inst); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":155
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 *            self._new_inst()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment *)((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->__pyx_vtab)->_new_inst(((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":156
 *         if _new_inst:
 *            self._new_inst()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_12MSExperiment_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_12MSExperiment_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":157
 *            self._new_inst()
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *     def getMinMZ (self):
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":158
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *     def getMinMZ (self):
 *         _result = self.inst.getMinMZ()
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":159
 *         if self.inst != NULL:
 *             del self.inst
 *     def getMinMZ (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getMinMZ()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_2getMinMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_2getMinMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMinMZ");

  /* "_pyOpenMS.pyx":160
 *             del self.inst
 *     def getMinMZ (self):
 *         _result = self.inst.getMinMZ()             # <<<<<<<<<<<<<<
 *         return _result
 *     def getMaxMZ (self):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->getMinMZ();

  /* "_pyOpenMS.pyx":161
 *     def getMinMZ (self):
 *         _result = self.inst.getMinMZ()
 *         return _result             # <<<<<<<<<<<<<<
 *     def getMaxMZ (self):
 *         _result = self.inst.getMaxMZ()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.getMinMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":162
 *         _result = self.inst.getMinMZ()
 *         return _result
 *     def getMaxMZ (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getMaxMZ()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_3getMaxMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_3getMaxMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMaxMZ");

  /* "_pyOpenMS.pyx":163
 *         return _result
 *     def getMaxMZ (self):
 *         _result = self.inst.getMaxMZ()             # <<<<<<<<<<<<<<
 *         return _result
 *     def getMinRT (self):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->getMaxMZ();

  /* "_pyOpenMS.pyx":164
 *     def getMaxMZ (self):
 *         _result = self.inst.getMaxMZ()
 *         return _result             # <<<<<<<<<<<<<<
 *     def getMinRT (self):
 *         _result = self.inst.getMinRT()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.getMaxMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":165
 *         _result = self.inst.getMaxMZ()
 *         return _result
 *     def getMinRT (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getMinRT()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_4getMinRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_4getMinRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMinRT");

  /* "_pyOpenMS.pyx":166
 *         return _result
 *     def getMinRT (self):
 *         _result = self.inst.getMinRT()             # <<<<<<<<<<<<<<
 *         return _result
 *     def getMaxRT (self):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->getMinRT();

  /* "_pyOpenMS.pyx":167
 *     def getMinRT (self):
 *         _result = self.inst.getMinRT()
 *         return _result             # <<<<<<<<<<<<<<
 *     def getMaxRT (self):
 *         _result = self.inst.getMaxRT()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.getMinRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":168
 *         _result = self.inst.getMinRT()
 *         return _result
 *     def getMaxRT (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getMaxRT()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_5getMaxRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_5getMaxRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  double __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMaxRT");

  /* "_pyOpenMS.pyx":169
 *         return _result
 *     def getMaxRT (self):
 *         _result = self.inst.getMaxRT()             # <<<<<<<<<<<<<<
 *         return _result
 *     def sortSpectra (self, int a):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->getMaxRT();

  /* "_pyOpenMS.pyx":170
 *     def getMaxRT (self):
 *         _result = self.inst.getMaxRT()
 *         return _result             # <<<<<<<<<<<<<<
 *     def sortSpectra (self, int a):
 *         self.inst.sortSpectra(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.getMaxRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":171
 *         _result = self.inst.getMaxRT()
 *         return _result
 *     def sortSpectra (self, int a):             # <<<<<<<<<<<<<<
 *         self.inst.sortSpectra(a)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_6sortSpectra(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_6sortSpectra(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  int __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sortSpectra");
  assert(__pyx_arg_a); {
    __pyx_v_a = __Pyx_PyInt_AsInt(__pyx_arg_a); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.sortSpectra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":172
 *         return _result
 *     def sortSpectra (self, int a):
 *         self.inst.sortSpectra(a)             # <<<<<<<<<<<<<<
 *         return self
 *     def size (self):
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_a); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->sortSpectra(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":173
 *     def sortSpectra (self, int a):
 *         self.inst.sortSpectra(a)
 *         return self             # <<<<<<<<<<<<<<
 *     def size (self):
 *         _result = self.inst.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.sortSpectra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":174
 *         self.inst.sortSpectra(a)
 *         return self
 *     def size (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.size()
 *         return _result
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_7size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_7size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  int __pyx_v__result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "_pyOpenMS.pyx":175
 *         return self
 *     def size (self):
 *         _result = self.inst.size()             # <<<<<<<<<<<<<<
 *         return _result
 *     def __getitem__(self, int idx):
 */
  __pyx_v__result = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->size();

  /* "_pyOpenMS.pyx":176
 *     def size (self):
 *         _result = self.inst.size()
 *         return _result             # <<<<<<<<<<<<<<
 *     def __getitem__(self, int idx):
 *         cdef _MSSpectrum[_Peak1D] _res = deref(self.inst)[idx]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v__result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":177
 *         _result = self.inst.size()
 *         return _result
 *     def __getitem__(self, int idx):             # <<<<<<<<<<<<<<
 *         cdef _MSSpectrum[_Peak1D] _res = deref(self.inst)[idx]
 *         __res_py = MSSpectrum(False)
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_8__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_8__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx) {
  int __pyx_v_idx;
  OpenMS::MSSpectrum<OpenMS::Peak1D> __pyx_v__res;
  struct __pyx_obj_9_pyOpenMS_MSSpectrum *__pyx_v___res_py = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_AsInt(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":178
 *         return _result
 *     def __getitem__(self, int idx):
 *         cdef _MSSpectrum[_Peak1D] _res = deref(self.inst)[idx]             # <<<<<<<<<<<<<<
 *         __res_py = MSSpectrum(False)
 *         __res_py._set_inst(new _MSSpectrum[_Peak1D](_res))
 */
  __pyx_v__res = ((OpenMS::MSSpectrum<OpenMS::Peak1D>)((*((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst)[__pyx_v_idx]));

  /* "_pyOpenMS.pyx":179
 *     def __getitem__(self, int idx):
 *         cdef _MSSpectrum[_Peak1D] _res = deref(self.inst)[idx]
 *         __res_py = MSSpectrum(False)             # <<<<<<<<<<<<<<
 *         __res_py._set_inst(new _MSSpectrum[_Peak1D](_res))
 *         return __res_py
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_MSSpectrum)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v___res_py = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":180
 *         cdef _MSSpectrum[_Peak1D] _res = deref(self.inst)[idx]
 *         __res_py = MSSpectrum(False)
 *         __res_py._set_inst(new _MSSpectrum[_Peak1D](_res))             # <<<<<<<<<<<<<<
 *         return __res_py
 *     def updateRanges (self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum *)__pyx_v___res_py->__pyx_vtab)->_set_inst(__pyx_v___res_py, new OpenMS::MSSpectrum<OpenMS::Peak1D>(__pyx_v__res)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":181
 *         __res_py = MSSpectrum(False)
 *         __res_py._set_inst(new _MSSpectrum[_Peak1D](_res))
 *         return __res_py             # <<<<<<<<<<<<<<
 *     def updateRanges (self):
 *         self.inst.updateRanges()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___res_py));
  __pyx_r = ((PyObject *)__pyx_v___res_py);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___res_py);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":182
 *         __res_py._set_inst(new _MSSpectrum[_Peak1D](_res))
 *         return __res_py
 *     def updateRanges (self):             # <<<<<<<<<<<<<<
 *         self.inst.updateRanges()
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_9updateRanges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_9updateRanges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateRanges");

  /* "_pyOpenMS.pyx":183
 *         return __res_py
 *     def updateRanges (self):
 *         self.inst.updateRanges()             # <<<<<<<<<<<<<<
 *         return self
 *     def push_back (self, MSSpectrum a):
 */
  ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->updateRanges();

  /* "_pyOpenMS.pyx":184
 *     def updateRanges (self):
 *         self.inst.updateRanges()
 *         return self             # <<<<<<<<<<<<<<
 *     def push_back (self, MSSpectrum a):
 *         self.inst.push_back(deref(a.inst))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":185
 *         self.inst.updateRanges()
 *         return self
 *     def push_back (self, MSSpectrum a):             # <<<<<<<<<<<<<<
 *         self.inst.push_back(deref(a.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_10push_back(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12MSExperiment_10push_back(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("push_back");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_9_pyOpenMS_MSSpectrum, 1, "a", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":186
 *         return self
 *     def push_back (self, MSSpectrum a):
 *         self.inst.push_back(deref(a.inst))             # <<<<<<<<<<<<<<
 *         return self
 * cdef class InstrumentSettings:
 */
  ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_self)->inst->push_back(((OpenMS::MSSpectrum<OpenMS::Peak1D>)(*((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)__pyx_v_a)->inst)));

  /* "_pyOpenMS.pyx":187
 *     def push_back (self, MSSpectrum a):
 *         self.inst.push_back(deref(a.inst))
 *         return self             # <<<<<<<<<<<<<<
 * cdef class InstrumentSettings:
 *     cdef _InstrumentSettings * inst
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MSExperiment.push_back", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":190
 * cdef class InstrumentSettings:
 *     cdef _InstrumentSettings * inst
 *     cdef _new_inst(self):             # <<<<<<<<<<<<<<
 *        self.inst = new _InstrumentSettings()
 *     cdef _set_inst(self, _InstrumentSettings * inst):
 */

static PyObject *__pyx_f_9_pyOpenMS_18InstrumentSettings__new_inst(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_new_inst");

  /* "_pyOpenMS.pyx":191
 *     cdef _InstrumentSettings * inst
 *     cdef _new_inst(self):
 *        self.inst = new _InstrumentSettings()             # <<<<<<<<<<<<<<
 *     cdef _set_inst(self, _InstrumentSettings * inst):
 *         if self.inst != NULL:
 */
  __pyx_v_self->inst = new OpenMS::InstrumentSettings();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":192
 *     cdef _new_inst(self):
 *        self.inst = new _InstrumentSettings()
 *     cdef _set_inst(self, _InstrumentSettings * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_18InstrumentSettings__set_inst(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *__pyx_v_self, OpenMS::InstrumentSettings *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":193
 *        self.inst = new _InstrumentSettings()
 *     cdef _set_inst(self, _InstrumentSettings * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":194
 *     cdef _set_inst(self, _InstrumentSettings * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":195
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":196
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */

static int __pyx_pf_9_pyOpenMS_18InstrumentSettings___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_18InstrumentSettings___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__new_inst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___new_inst,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_5;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s___new_inst);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v__new_inst = values[0];
  } else {
    __pyx_v__new_inst = __pyx_k_5;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v__new_inst = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.InstrumentSettings.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":197
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:             # <<<<<<<<<<<<<<
 *            self._new_inst()
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v__new_inst); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":198
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 *            self._new_inst()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings *)((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->__pyx_vtab)->_new_inst(((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.InstrumentSettings.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":199
 *         if _new_inst:
 *            self._new_inst()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_18InstrumentSettings_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_18InstrumentSettings_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":200
 *            self._new_inst()
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *     def getPolarity (self):
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":201
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *     def getPolarity (self):
 *         _result = self.inst.getPolarity()
 */
    delete ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":202
 *         if self.inst != NULL:
 *             del self.inst
 *     def getPolarity (self):             # <<<<<<<<<<<<<<
 *         _result = self.inst.getPolarity()
 *         return <int>_result
 */

static PyObject *__pyx_pf_9_pyOpenMS_18InstrumentSettings_2getPolarity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_18InstrumentSettings_2getPolarity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v__result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPolarity");

  /* "_pyOpenMS.pyx":203
 *             del self.inst
 *     def getPolarity (self):
 *         _result = self.inst.getPolarity()             # <<<<<<<<<<<<<<
 *         return <int>_result
 *     def setPolarity (self, int a):
 */
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->inst->getPolarity()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":204
 *     def getPolarity (self):
 *         _result = self.inst.getPolarity()
 *         return <int>_result             # <<<<<<<<<<<<<<
 *     def setPolarity (self, int a):
 *         self.inst.setPolarity(<_Polarity>a)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v__result); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = PyInt_FromLong(((int)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.InstrumentSettings.getPolarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":205
 *         _result = self.inst.getPolarity()
 *         return <int>_result
 *     def setPolarity (self, int a):             # <<<<<<<<<<<<<<
 *         self.inst.setPolarity(<_Polarity>a)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_18InstrumentSettings_3setPolarity(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_18InstrumentSettings_3setPolarity(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  int __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPolarity");
  assert(__pyx_arg_a); {
    __pyx_v_a = __Pyx_PyInt_AsInt(__pyx_arg_a); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.InstrumentSettings.setPolarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":206
 *         return <int>_result
 *     def setPolarity (self, int a):
 *         self.inst.setPolarity(<_Polarity>a)             # <<<<<<<<<<<<<<
 *         return self
 * cdef class ChromatogramTools:
 */
  ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)__pyx_v_self)->inst->setPolarity(((enum OpenMS::IonSource::Polarity)__pyx_v_a));

  /* "_pyOpenMS.pyx":207
 *     def setPolarity (self, int a):
 *         self.inst.setPolarity(<_Polarity>a)
 *         return self             # <<<<<<<<<<<<<<
 * cdef class ChromatogramTools:
 *     cdef _ChromatogramTools * inst
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":210
 * cdef class ChromatogramTools:
 *     cdef _ChromatogramTools * inst
 *     cdef _new_inst(self):             # <<<<<<<<<<<<<<
 *        self.inst = new _ChromatogramTools()
 *     cdef _set_inst(self, _ChromatogramTools * inst):
 */

static PyObject *__pyx_f_9_pyOpenMS_17ChromatogramTools__new_inst(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_new_inst");

  /* "_pyOpenMS.pyx":211
 *     cdef _ChromatogramTools * inst
 *     cdef _new_inst(self):
 *        self.inst = new _ChromatogramTools()             # <<<<<<<<<<<<<<
 *     cdef _set_inst(self, _ChromatogramTools * inst):
 *         if self.inst != NULL:
 */
  __pyx_v_self->inst = new OpenMS::ChromatogramTools();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":212
 *     cdef _new_inst(self):
 *        self.inst = new _ChromatogramTools()
 *     cdef _set_inst(self, _ChromatogramTools * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_17ChromatogramTools__set_inst(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *__pyx_v_self, OpenMS::ChromatogramTools *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":213
 *        self.inst = new _ChromatogramTools()
 *     cdef _set_inst(self, _ChromatogramTools * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":214
 *     cdef _set_inst(self, _ChromatogramTools * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":215
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":216
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */

static int __pyx_pf_9_pyOpenMS_17ChromatogramTools___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_17ChromatogramTools___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__new_inst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___new_inst,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_6;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s___new_inst);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v__new_inst = values[0];
  } else {
    __pyx_v__new_inst = __pyx_k_6;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v__new_inst = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.ChromatogramTools.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":217
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:             # <<<<<<<<<<<<<<
 *            self._new_inst()
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v__new_inst); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":218
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 *            self._new_inst()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools *)((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->__pyx_vtab)->_new_inst(((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.ChromatogramTools.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":219
 *         if _new_inst:
 *            self._new_inst()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_17ChromatogramTools_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_17ChromatogramTools_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":220
 *            self._new_inst()
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":221
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))
 */
    delete ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":222
 *         if self.inst != NULL:
 *             del self.inst
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):             # <<<<<<<<<<<<<<
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_17ChromatogramTools_2convertChromatogramsToSpectra(PyObject *__pyx_v_self, PyObject *__pyx_v_epx); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_17ChromatogramTools_2convertChromatogramsToSpectra(PyObject *__pyx_v_self, PyObject *__pyx_v_epx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convertChromatogramsToSpectra");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_epx), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "epx", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":223
 *             del self.inst
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))             # <<<<<<<<<<<<<<
 *         return self
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):
 */
  ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->inst->convertChromatogramsToSpectra((*((struct __pyx_obj_9_pyOpenMS_MSExperiment *)__pyx_v_epx)->inst));

  /* "_pyOpenMS.pyx":224
 *     def convertChromatogramsToSpectra (self, MSExperiment epx):
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))
 *         return self             # <<<<<<<<<<<<<<
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.ChromatogramTools.convertChromatogramsToSpectra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":225
 *         self.inst.convertChromatogramsToSpectra(deref(epx.inst))
 *         return self
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):             # <<<<<<<<<<<<<<
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)
 *         return self
 */

static PyObject *__pyx_pf_9_pyOpenMS_17ChromatogramTools_3convertSpectraToChromatograms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_17ChromatogramTools_3convertSpectraToChromatograms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_epx = 0;
  int __pyx_v_remove_spectra;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__epx,&__pyx_n_s__remove_spectra,0};
  __Pyx_RefNannySetupContext("convertSpectraToChromatograms");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__epx);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__remove_spectra);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("convertSpectraToChromatograms", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "convertSpectraToChromatograms") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_epx = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[0]);
    __pyx_v_remove_spectra = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_remove_spectra == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_epx = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_remove_spectra = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_remove_spectra == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convertSpectraToChromatograms", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.ChromatogramTools.convertSpectraToChromatograms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_epx), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "epx", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":226
 *         return self
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)             # <<<<<<<<<<<<<<
 *         return self
 * cdef class Polarity:
 */
  ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)__pyx_v_self)->inst->convertSpectraToChromatograms((*__pyx_v_epx->inst), __pyx_v_remove_spectra);

  /* "_pyOpenMS.pyx":227
 *     def convertSpectraToChromatograms (self, MSExperiment epx, int remove_spectra):
 *         self.inst.convertSpectraToChromatograms(deref(epx.inst), remove_spectra)
 *         return self             # <<<<<<<<<<<<<<
 * cdef class Polarity:
 *     POSNULL=0
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.ChromatogramTools.convertSpectraToChromatograms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":235
 * cdef class MzXMLFile:
 *     cdef _MzXMLFile * inst
 *     cdef _new_inst(self):             # <<<<<<<<<<<<<<
 *        self.inst = new _MzXMLFile()
 *     cdef _set_inst(self, _MzXMLFile * inst):
 */

static PyObject *__pyx_f_9_pyOpenMS_9MzXMLFile__new_inst(struct __pyx_obj_9_pyOpenMS_MzXMLFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_new_inst");

  /* "_pyOpenMS.pyx":236
 *     cdef _MzXMLFile * inst
 *     cdef _new_inst(self):
 *        self.inst = new _MzXMLFile()             # <<<<<<<<<<<<<<
 *     cdef _set_inst(self, _MzXMLFile * inst):
 *         if self.inst != NULL:
 */
  __pyx_v_self->inst = new OpenMS::MzXMLFile();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":237
 *     cdef _new_inst(self):
 *        self.inst = new _MzXMLFile()
 *     cdef _set_inst(self, _MzXMLFile * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_9MzXMLFile__set_inst(struct __pyx_obj_9_pyOpenMS_MzXMLFile *__pyx_v_self, OpenMS::MzXMLFile *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":238
 *        self.inst = new _MzXMLFile()
 *     cdef _set_inst(self, _MzXMLFile * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":239
 *     cdef _set_inst(self, _MzXMLFile * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":240
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":241
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */

static int __pyx_pf_9_pyOpenMS_9MzXMLFile___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_9MzXMLFile___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__new_inst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___new_inst,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_7;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s___new_inst);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v__new_inst = values[0];
  } else {
    __pyx_v__new_inst = __pyx_k_7;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v__new_inst = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":242
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:             # <<<<<<<<<<<<<<
 *            self._new_inst()
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v__new_inst); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":243
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 *            self._new_inst()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile *)((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->__pyx_vtab)->_new_inst(((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":244
 *         if _new_inst:
 *            self._new_inst()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_9MzXMLFile_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_9MzXMLFile_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":245
 *            self._new_inst()
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *     def load (self, char * a, MSExperiment b):
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":246
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *     def load (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":247
 *         if self.inst != NULL:
 *             del self.inst
 *     def load (self, char * a, MSExperiment b):             # <<<<<<<<<<<<<<
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_9MzXMLFile_2load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9MzXMLFile_2load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_b = 0;
  std::string *__pyx_v__a_as_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,0};
  __Pyx_RefNannySetupContext("load");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_a = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_a = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":248
 *             del self.inst
 *     def load (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 */
  __pyx_v__a_as_str = new std::string(__pyx_v_a);

  /* "_pyOpenMS.pyx":249
 *     def load (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.load(deref(_a_as_str), deref(b.inst))             # <<<<<<<<<<<<<<
 *         del _a_as_str
 *         return self
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->inst->load((*__pyx_v__a_as_str), (*__pyx_v_b->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":250
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str             # <<<<<<<<<<<<<<
 *         return self
 *     def store (self, char * a, MSExperiment b):
 */
  delete __pyx_v__a_as_str;

  /* "_pyOpenMS.pyx":251
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 *         return self             # <<<<<<<<<<<<<<
 *     def store (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":252
 *         del _a_as_str
 *         return self
 *     def store (self, char * a, MSExperiment b):             # <<<<<<<<<<<<<<
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_9MzXMLFile_3store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_9MzXMLFile_3store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_b = 0;
  std::string *__pyx_v__a_as_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,0};
  __Pyx_RefNannySetupContext("store");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "store") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_a = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_a = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":253
 *         return self
 *     def store (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 */
  __pyx_v__a_as_str = new std::string(__pyx_v_a);

  /* "_pyOpenMS.pyx":254
 *     def store (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.store(deref(_a_as_str), deref(b.inst))             # <<<<<<<<<<<<<<
 *         del _a_as_str
 *         return self
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)__pyx_v_self)->inst->store((*__pyx_v__a_as_str), (*__pyx_v_b->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":255
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str             # <<<<<<<<<<<<<<
 *         return self
 * cdef class MzMLFile:
 */
  delete __pyx_v__a_as_str;

  /* "_pyOpenMS.pyx":256
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 *         return self             # <<<<<<<<<<<<<<
 * cdef class MzMLFile:
 *     cdef _MzMLFile * inst
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzXMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":259
 * cdef class MzMLFile:
 *     cdef _MzMLFile * inst
 *     cdef _new_inst(self):             # <<<<<<<<<<<<<<
 *        self.inst = new _MzMLFile()
 *     cdef _set_inst(self, _MzMLFile * inst):
 */

static PyObject *__pyx_f_9_pyOpenMS_8MzMLFile__new_inst(struct __pyx_obj_9_pyOpenMS_MzMLFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_new_inst");

  /* "_pyOpenMS.pyx":260
 *     cdef _MzMLFile * inst
 *     cdef _new_inst(self):
 *        self.inst = new _MzMLFile()             # <<<<<<<<<<<<<<
 *     cdef _set_inst(self, _MzMLFile * inst):
 *         if self.inst != NULL:
 */
  __pyx_v_self->inst = new OpenMS::MzMLFile();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":261
 *     cdef _new_inst(self):
 *        self.inst = new _MzMLFile()
 *     cdef _set_inst(self, _MzMLFile * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_8MzMLFile__set_inst(struct __pyx_obj_9_pyOpenMS_MzMLFile *__pyx_v_self, OpenMS::MzMLFile *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":262
 *        self.inst = new _MzMLFile()
 *     cdef _set_inst(self, _MzMLFile * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":263
 *     cdef _set_inst(self, _MzMLFile * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":264
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":265
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */

static int __pyx_pf_9_pyOpenMS_8MzMLFile___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_8MzMLFile___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__new_inst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___new_inst,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_8;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s___new_inst);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v__new_inst = values[0];
  } else {
    __pyx_v__new_inst = __pyx_k_8;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v__new_inst = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":266
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:             # <<<<<<<<<<<<<<
 *            self._new_inst()
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v__new_inst); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":267
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 *            self._new_inst()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile *)((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->__pyx_vtab)->_new_inst(((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":268
 *         if _new_inst:
 *            self._new_inst()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_8MzMLFile_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_8MzMLFile_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":269
 *            self._new_inst()
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *     def load (self, char * a, MSExperiment b):
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":270
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *     def load (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":271
 *         if self.inst != NULL:
 *             del self.inst
 *     def load (self, char * a, MSExperiment b):             # <<<<<<<<<<<<<<
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_8MzMLFile_2load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_8MzMLFile_2load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_b = 0;
  std::string *__pyx_v__a_as_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,0};
  __Pyx_RefNannySetupContext("load");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_a = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_a = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":272
 *             del self.inst
 *     def load (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 */
  __pyx_v__a_as_str = new std::string(__pyx_v_a);

  /* "_pyOpenMS.pyx":273
 *     def load (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.load(deref(_a_as_str), deref(b.inst))             # <<<<<<<<<<<<<<
 *         del _a_as_str
 *         return self
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->inst->load((*__pyx_v__a_as_str), (*__pyx_v_b->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":274
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str             # <<<<<<<<<<<<<<
 *         return self
 *     def store (self, char * a, MSExperiment b):
 */
  delete __pyx_v__a_as_str;

  /* "_pyOpenMS.pyx":275
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 *         return self             # <<<<<<<<<<<<<<
 *     def store (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":276
 *         del _a_as_str
 *         return self
 *     def store (self, char * a, MSExperiment b):             # <<<<<<<<<<<<<<
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_8MzMLFile_3store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_8MzMLFile_3store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_b = 0;
  std::string *__pyx_v__a_as_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,0};
  __Pyx_RefNannySetupContext("store");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "store") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_a = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_a = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":277
 *         return self
 *     def store (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 */
  __pyx_v__a_as_str = new std::string(__pyx_v_a);

  /* "_pyOpenMS.pyx":278
 *     def store (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.store(deref(_a_as_str), deref(b.inst))             # <<<<<<<<<<<<<<
 *         del _a_as_str
 *         return self
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzMLFile *)__pyx_v_self)->inst->store((*__pyx_v__a_as_str), (*__pyx_v_b->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":279
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str             # <<<<<<<<<<<<<<
 *         return self
 * cdef class MzDataFile:
 */
  delete __pyx_v__a_as_str;

  /* "_pyOpenMS.pyx":280
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 *         return self             # <<<<<<<<<<<<<<
 * cdef class MzDataFile:
 *     cdef _MzDataFile * inst
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":283
 * cdef class MzDataFile:
 *     cdef _MzDataFile * inst
 *     cdef _new_inst(self):             # <<<<<<<<<<<<<<
 *        self.inst = new _MzDataFile()
 *     cdef _set_inst(self, _MzDataFile * inst):
 */

static PyObject *__pyx_f_9_pyOpenMS_10MzDataFile__new_inst(struct __pyx_obj_9_pyOpenMS_MzDataFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_new_inst");

  /* "_pyOpenMS.pyx":284
 *     cdef _MzDataFile * inst
 *     cdef _new_inst(self):
 *        self.inst = new _MzDataFile()             # <<<<<<<<<<<<<<
 *     cdef _set_inst(self, _MzDataFile * inst):
 *         if self.inst != NULL:
 */
  __pyx_v_self->inst = new OpenMS::MzDataFile();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":285
 *     cdef _new_inst(self):
 *        self.inst = new _MzDataFile()
 *     cdef _set_inst(self, _MzDataFile * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_10MzDataFile__set_inst(struct __pyx_obj_9_pyOpenMS_MzDataFile *__pyx_v_self, OpenMS::MzDataFile *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_set_inst");

  /* "_pyOpenMS.pyx":286
 *        self.inst = new _MzDataFile()
 *     cdef _set_inst(self, _MzDataFile * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":287
 *     cdef _set_inst(self, _MzDataFile * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_pyOpenMS.pyx":288
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":289
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */

static int __pyx_pf_9_pyOpenMS_10MzDataFile___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10MzDataFile___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__new_inst = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___new_inst,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_9;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s___new_inst);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v__new_inst = values[0];
  } else {
    __pyx_v__new_inst = __pyx_k_9;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v__new_inst = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_pyOpenMS.pyx":290
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:             # <<<<<<<<<<<<<<
 *            self._new_inst()
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v__new_inst); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":291
 *     def __init__(self, _new_inst = True):
 *         if _new_inst:
 *            self._new_inst()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile *)((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->__pyx_vtab)->_new_inst(((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":292
 *         if _new_inst:
 *            self._new_inst()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_10MzDataFile_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_10MzDataFile_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "_pyOpenMS.pyx":293
 *            self._new_inst()
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *     def load (self, char * a, MSExperiment b):
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "_pyOpenMS.pyx":294
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *     def load (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 */
    delete ((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "_pyOpenMS.pyx":295
 *         if self.inst != NULL:
 *             del self.inst
 *     def load (self, char * a, MSExperiment b):             # <<<<<<<<<<<<<<
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MzDataFile_2load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MzDataFile_2load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_b = 0;
  std::string *__pyx_v__a_as_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,0};
  __Pyx_RefNannySetupContext("load");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_a = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_a = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":296
 *             del self.inst
 *     def load (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 */
  __pyx_v__a_as_str = new std::string(__pyx_v_a);

  /* "_pyOpenMS.pyx":297
 *     def load (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.load(deref(_a_as_str), deref(b.inst))             # <<<<<<<<<<<<<<
 *         del _a_as_str
 *         return self
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->inst->load((*__pyx_v__a_as_str), (*__pyx_v_b->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":298
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str             # <<<<<<<<<<<<<<
 *         return self
 *     def store (self, char * a, MSExperiment b):
 */
  delete __pyx_v__a_as_str;

  /* "_pyOpenMS.pyx":299
 *         self.inst.load(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 *         return self             # <<<<<<<<<<<<<<
 *     def store (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_pyOpenMS.pyx":300
 *         del _a_as_str
 *         return self
 *     def store (self, char * a, MSExperiment b):             # <<<<<<<<<<<<<<
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_10MzDataFile_3store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10MzDataFile_3store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  struct __pyx_obj_9_pyOpenMS_MSExperiment *__pyx_v_b = 0;
  std::string *__pyx_v__a_as_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,0};
  __Pyx_RefNannySetupContext("store");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "store") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_a = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_a = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_9_pyOpenMS_MSExperiment, 1, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_pyOpenMS.pyx":301
 *         return self
 *     def store (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 */
  __pyx_v__a_as_str = new std::string(__pyx_v_a);

  /* "_pyOpenMS.pyx":302
 *     def store (self, char * a, MSExperiment b):
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.store(deref(_a_as_str), deref(b.inst))             # <<<<<<<<<<<<<<
 *         del _a_as_str
 *         return self
 */
  try {((struct __pyx_obj_9_pyOpenMS_MzDataFile *)__pyx_v_self)->inst->store((*__pyx_v__a_as_str), (*__pyx_v_b->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "_pyOpenMS.pyx":303
 *         cdef string * _a_as_str = new string(a)
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str             # <<<<<<<<<<<<<<
 *         return self
 */
  delete __pyx_v__a_as_str;

  /* "_pyOpenMS.pyx":304
 *         self.inst.store(deref(_a_as_str), deref(b.inst))
 *         del _a_as_str
 *         return self             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.MzDataFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9_pyOpenMS_Peak1D __pyx_vtable_9_pyOpenMS_Peak1D;

static PyObject *__pyx_tp_new_9_pyOpenMS_Peak1D(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_Peak1D *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_Peak1D *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_Peak1D;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_Peak1D(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_6Peak1D_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_Peak1D[] = {
  {__Pyx_NAMESTR("getMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_6Peak1D_2getMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_6Peak1D_3getIntensity, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_6Peak1D_4setMZ, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_6Peak1D_5setIntensity, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Peak1D = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Peak1D = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Peak1D = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Peak1D = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_Peak1D = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.Peak1D"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_Peak1D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_Peak1D, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Peak1D, /*tp_as_number*/
  &__pyx_tp_as_sequence_Peak1D, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Peak1D, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Peak1D, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_Peak1D, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_6Peak1D___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_Peak1D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_Precursor __pyx_vtable_9_pyOpenMS_Precursor;

static PyObject *__pyx_tp_new_9_pyOpenMS_Precursor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_Precursor *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_Precursor *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_Precursor;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_Precursor(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_9Precursor_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_Precursor[] = {
  {__Pyx_NAMESTR("getMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_9Precursor_2getMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_9Precursor_3getIntensity, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_9Precursor_4setMZ, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_9Precursor_5setIntensity, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Precursor = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Precursor = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Precursor = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Precursor = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_Precursor = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.Precursor"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_Precursor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_Precursor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Precursor, /*tp_as_number*/
  &__pyx_tp_as_sequence_Precursor, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Precursor, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Precursor, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_Precursor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_9Precursor___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_Precursor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MSSpectrum __pyx_vtable_9_pyOpenMS_MSSpectrum;

static PyObject *__pyx_tp_new_9_pyOpenMS_MSSpectrum(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MSSpectrum *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MSSpectrum *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MSSpectrum;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MSSpectrum(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_10MSSpectrum_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_9_pyOpenMS_MSSpectrum(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MSSpectrum[] = {
  {__Pyx_NAMESTR("getRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_2getRT, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_3setRT, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMSLevel"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_4getMSLevel, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMSLevel"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_5setMSLevel, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_6getName, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setName"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_7setName, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_8size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("updateRanges"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_10updateRanges, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getInstrumentSettings"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_11getInstrumentSettings, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findNearest"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_12findNearest, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getPrecursors"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_13getPrecursors, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setPrecursors"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_14setPrecursors, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getNativeID"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_15getNativeID, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setNativeID"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MSSpectrum_16setNativeID, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MSSpectrum = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MSSpectrum = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9_pyOpenMS_MSSpectrum, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MSSpectrum = {
  0, /*mp_length*/
  __pyx_pf_9_pyOpenMS_10MSSpectrum_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MSSpectrum = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MSSpectrum = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MSSpectrum"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MSSpectrum), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MSSpectrum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MSSpectrum, /*tp_as_number*/
  &__pyx_tp_as_sequence_MSSpectrum, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MSSpectrum, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MSSpectrum, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MSSpectrum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_10MSSpectrum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MSSpectrum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MSExperiment __pyx_vtable_9_pyOpenMS_MSExperiment;

static PyObject *__pyx_tp_new_9_pyOpenMS_MSExperiment(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MSExperiment *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MSExperiment *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MSExperiment;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MSExperiment(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_12MSExperiment_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_9_pyOpenMS_MSExperiment(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MSExperiment[] = {
  {__Pyx_NAMESTR("getMinMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_2getMinMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMaxMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_3getMaxMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMinRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_4getMinRT, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMaxRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_5getMaxRT, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("sortSpectra"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_6sortSpectra, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_7size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("updateRanges"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_9updateRanges, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("push_back"), (PyCFunction)__pyx_pf_9_pyOpenMS_12MSExperiment_10push_back, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MSExperiment = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MSExperiment = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9_pyOpenMS_MSExperiment, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MSExperiment = {
  0, /*mp_length*/
  __pyx_pf_9_pyOpenMS_12MSExperiment_8__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MSExperiment = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MSExperiment = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MSExperiment"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MSExperiment), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MSExperiment, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MSExperiment, /*tp_as_number*/
  &__pyx_tp_as_sequence_MSExperiment, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MSExperiment, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MSExperiment, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MSExperiment, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_12MSExperiment___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MSExperiment, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_InstrumentSettings __pyx_vtable_9_pyOpenMS_InstrumentSettings;

static PyObject *__pyx_tp_new_9_pyOpenMS_InstrumentSettings(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_InstrumentSettings *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_InstrumentSettings *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_InstrumentSettings;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_InstrumentSettings(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_18InstrumentSettings_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_InstrumentSettings[] = {
  {__Pyx_NAMESTR("getPolarity"), (PyCFunction)__pyx_pf_9_pyOpenMS_18InstrumentSettings_2getPolarity, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setPolarity"), (PyCFunction)__pyx_pf_9_pyOpenMS_18InstrumentSettings_3setPolarity, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_InstrumentSettings = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_InstrumentSettings = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_InstrumentSettings = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_InstrumentSettings = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_InstrumentSettings = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.InstrumentSettings"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_InstrumentSettings), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_InstrumentSettings, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_InstrumentSettings, /*tp_as_number*/
  &__pyx_tp_as_sequence_InstrumentSettings, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_InstrumentSettings, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_InstrumentSettings, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_InstrumentSettings, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_18InstrumentSettings___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_InstrumentSettings, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_ChromatogramTools __pyx_vtable_9_pyOpenMS_ChromatogramTools;

static PyObject *__pyx_tp_new_9_pyOpenMS_ChromatogramTools(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_ChromatogramTools *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_ChromatogramTools *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_ChromatogramTools;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_ChromatogramTools(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_17ChromatogramTools_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_ChromatogramTools[] = {
  {__Pyx_NAMESTR("convertChromatogramsToSpectra"), (PyCFunction)__pyx_pf_9_pyOpenMS_17ChromatogramTools_2convertChromatogramsToSpectra, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("convertSpectraToChromatograms"), (PyCFunction)__pyx_pf_9_pyOpenMS_17ChromatogramTools_3convertSpectraToChromatograms, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ChromatogramTools = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ChromatogramTools = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ChromatogramTools = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_ChromatogramTools = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_ChromatogramTools = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.ChromatogramTools"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_ChromatogramTools), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_ChromatogramTools, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ChromatogramTools, /*tp_as_number*/
  &__pyx_tp_as_sequence_ChromatogramTools, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ChromatogramTools, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_ChromatogramTools, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_ChromatogramTools, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_17ChromatogramTools___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_ChromatogramTools, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9_pyOpenMS_Polarity(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_Polarity(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_Polarity[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Polarity = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Polarity = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Polarity = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Polarity = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_Polarity = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.Polarity"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_Polarity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_Polarity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Polarity, /*tp_as_number*/
  &__pyx_tp_as_sequence_Polarity, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Polarity, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Polarity, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_Polarity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_Polarity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzXMLFile __pyx_vtable_9_pyOpenMS_MzXMLFile;

static PyObject *__pyx_tp_new_9_pyOpenMS_MzXMLFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MzXMLFile *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MzXMLFile *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MzXMLFile;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MzXMLFile(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_9MzXMLFile_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MzXMLFile[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_9MzXMLFile_2load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_9MzXMLFile_3store, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MzXMLFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MzXMLFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MzXMLFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MzXMLFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MzXMLFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MzXMLFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MzXMLFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MzXMLFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MzXMLFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_MzXMLFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MzXMLFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MzXMLFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MzXMLFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_9MzXMLFile___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MzXMLFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzMLFile __pyx_vtable_9_pyOpenMS_MzMLFile;

static PyObject *__pyx_tp_new_9_pyOpenMS_MzMLFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MzMLFile *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MzMLFile *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MzMLFile;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MzMLFile(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_8MzMLFile_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MzMLFile[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_8MzMLFile_2load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_8MzMLFile_3store, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MzMLFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MzMLFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MzMLFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MzMLFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MzMLFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MzMLFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MzMLFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MzMLFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MzMLFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_MzMLFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MzMLFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MzMLFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MzMLFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_8MzMLFile___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MzMLFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_MzDataFile __pyx_vtable_9_pyOpenMS_MzDataFile;

static PyObject *__pyx_tp_new_9_pyOpenMS_MzDataFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_MzDataFile *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_MzDataFile *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_MzDataFile;
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_MzDataFile(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_10MzDataFile_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_MzDataFile[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MzDataFile_2load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_10MzDataFile_3store, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MzDataFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_MzDataFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MzDataFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_MzDataFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_MzDataFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.MzDataFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_MzDataFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_MzDataFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MzDataFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_MzDataFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MzDataFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_MzDataFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_MzDataFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_9_pyOpenMS_10MzDataFile___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_MzDataFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("_pyOpenMS"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s__NEGATIVE, __pyx_k__NEGATIVE, sizeof(__pyx_k__NEGATIVE), 0, 0, 1, 1},
  {&__pyx_n_s__POSITIVE, __pyx_k__POSITIVE, sizeof(__pyx_k__POSITIVE), 0, 0, 1, 1},
  {&__pyx_n_s__POSNULL, __pyx_k__POSNULL, sizeof(__pyx_k__POSNULL), 0, 0, 1, 1},
  {&__pyx_n_s__SIZE_OF_POLARITY, __pyx_k__SIZE_OF_POLARITY, sizeof(__pyx_k__SIZE_OF_POLARITY), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___new_inst, __pyx_k___new_inst, sizeof(__pyx_k___new_inst), 0, 0, 1, 1},
  {&__pyx_n_s__a, __pyx_k__a, sizeof(__pyx_k__a), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__epx, __pyx_k__epx, sizeof(__pyx_k__epx), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__remove_spectra, __pyx_k__remove_spectra, sizeof(__pyx_k__remove_spectra), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_pyOpenMS(void); /*proto*/
PyMODINIT_FUNC init_pyOpenMS(void)
#else
PyMODINIT_FUNC PyInit__pyOpenMS(void); /*proto*/
PyMODINIT_FUNC PyInit__pyOpenMS(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__pyOpenMS(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_pyOpenMS"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main__pyOpenMS) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_9_pyOpenMS_Peak1D = &__pyx_vtable_9_pyOpenMS_Peak1D;
  __pyx_vtable_9_pyOpenMS_Peak1D._new_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Peak1D *))__pyx_f_9_pyOpenMS_6Peak1D__new_inst;
  __pyx_vtable_9_pyOpenMS_Peak1D._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Peak1D *, OpenMS::Peak1D *))__pyx_f_9_pyOpenMS_6Peak1D__set_inst;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_Peak1D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_Peak1D.tp_dict, __pyx_vtabptr_9_pyOpenMS_Peak1D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Peak1D", (PyObject *)&__pyx_type_9_pyOpenMS_Peak1D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_Peak1D = &__pyx_type_9_pyOpenMS_Peak1D;
  __pyx_vtabptr_9_pyOpenMS_Precursor = &__pyx_vtable_9_pyOpenMS_Precursor;
  __pyx_vtable_9_pyOpenMS_Precursor._new_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Precursor *))__pyx_f_9_pyOpenMS_9Precursor__new_inst;
  __pyx_vtable_9_pyOpenMS_Precursor._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_Precursor *, OpenMS::Precursor *))__pyx_f_9_pyOpenMS_9Precursor__set_inst;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_Precursor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_Precursor.tp_dict, __pyx_vtabptr_9_pyOpenMS_Precursor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Precursor", (PyObject *)&__pyx_type_9_pyOpenMS_Precursor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_Precursor = &__pyx_type_9_pyOpenMS_Precursor;
  __pyx_vtabptr_9_pyOpenMS_MSSpectrum = &__pyx_vtable_9_pyOpenMS_MSSpectrum;
  __pyx_vtable_9_pyOpenMS_MSSpectrum._new_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MSSpectrum *))__pyx_f_9_pyOpenMS_10MSSpectrum__new_inst;
  __pyx_vtable_9_pyOpenMS_MSSpectrum._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MSSpectrum *, OpenMS::MSSpectrum<OpenMS::Peak1D> *))__pyx_f_9_pyOpenMS_10MSSpectrum__set_inst;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MSSpectrum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MSSpectrum.tp_dict, __pyx_vtabptr_9_pyOpenMS_MSSpectrum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MSSpectrum", (PyObject *)&__pyx_type_9_pyOpenMS_MSSpectrum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MSSpectrum = &__pyx_type_9_pyOpenMS_MSSpectrum;
  __pyx_vtabptr_9_pyOpenMS_MSExperiment = &__pyx_vtable_9_pyOpenMS_MSExperiment;
  __pyx_vtable_9_pyOpenMS_MSExperiment._new_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MSExperiment *))__pyx_f_9_pyOpenMS_12MSExperiment__new_inst;
  __pyx_vtable_9_pyOpenMS_MSExperiment._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MSExperiment *, OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak> *))__pyx_f_9_pyOpenMS_12MSExperiment__set_inst;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MSExperiment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MSExperiment.tp_dict, __pyx_vtabptr_9_pyOpenMS_MSExperiment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MSExperiment", (PyObject *)&__pyx_type_9_pyOpenMS_MSExperiment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MSExperiment = &__pyx_type_9_pyOpenMS_MSExperiment;
  __pyx_vtabptr_9_pyOpenMS_InstrumentSettings = &__pyx_vtable_9_pyOpenMS_InstrumentSettings;
  __pyx_vtable_9_pyOpenMS_InstrumentSettings._new_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *))__pyx_f_9_pyOpenMS_18InstrumentSettings__new_inst;
  __pyx_vtable_9_pyOpenMS_InstrumentSettings._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_InstrumentSettings *, OpenMS::InstrumentSettings *))__pyx_f_9_pyOpenMS_18InstrumentSettings__set_inst;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_InstrumentSettings) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_InstrumentSettings.tp_dict, __pyx_vtabptr_9_pyOpenMS_InstrumentSettings) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "InstrumentSettings", (PyObject *)&__pyx_type_9_pyOpenMS_InstrumentSettings) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_InstrumentSettings = &__pyx_type_9_pyOpenMS_InstrumentSettings;
  __pyx_vtabptr_9_pyOpenMS_ChromatogramTools = &__pyx_vtable_9_pyOpenMS_ChromatogramTools;
  __pyx_vtable_9_pyOpenMS_ChromatogramTools._new_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *))__pyx_f_9_pyOpenMS_17ChromatogramTools__new_inst;
  __pyx_vtable_9_pyOpenMS_ChromatogramTools._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_ChromatogramTools *, OpenMS::ChromatogramTools *))__pyx_f_9_pyOpenMS_17ChromatogramTools__set_inst;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_ChromatogramTools) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_ChromatogramTools.tp_dict, __pyx_vtabptr_9_pyOpenMS_ChromatogramTools) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ChromatogramTools", (PyObject *)&__pyx_type_9_pyOpenMS_ChromatogramTools) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_ChromatogramTools = &__pyx_type_9_pyOpenMS_ChromatogramTools;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_Polarity) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Polarity", (PyObject *)&__pyx_type_9_pyOpenMS_Polarity) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_Polarity = &__pyx_type_9_pyOpenMS_Polarity;
  __pyx_vtabptr_9_pyOpenMS_MzXMLFile = &__pyx_vtable_9_pyOpenMS_MzXMLFile;
  __pyx_vtable_9_pyOpenMS_MzXMLFile._new_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzXMLFile *))__pyx_f_9_pyOpenMS_9MzXMLFile__new_inst;
  __pyx_vtable_9_pyOpenMS_MzXMLFile._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzXMLFile *, OpenMS::MzXMLFile *))__pyx_f_9_pyOpenMS_9MzXMLFile__set_inst;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MzXMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MzXMLFile.tp_dict, __pyx_vtabptr_9_pyOpenMS_MzXMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MzXMLFile", (PyObject *)&__pyx_type_9_pyOpenMS_MzXMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MzXMLFile = &__pyx_type_9_pyOpenMS_MzXMLFile;
  __pyx_vtabptr_9_pyOpenMS_MzMLFile = &__pyx_vtable_9_pyOpenMS_MzMLFile;
  __pyx_vtable_9_pyOpenMS_MzMLFile._new_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzMLFile *))__pyx_f_9_pyOpenMS_8MzMLFile__new_inst;
  __pyx_vtable_9_pyOpenMS_MzMLFile._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzMLFile *, OpenMS::MzMLFile *))__pyx_f_9_pyOpenMS_8MzMLFile__set_inst;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MzMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MzMLFile.tp_dict, __pyx_vtabptr_9_pyOpenMS_MzMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MzMLFile", (PyObject *)&__pyx_type_9_pyOpenMS_MzMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MzMLFile = &__pyx_type_9_pyOpenMS_MzMLFile;
  __pyx_vtabptr_9_pyOpenMS_MzDataFile = &__pyx_vtable_9_pyOpenMS_MzDataFile;
  __pyx_vtable_9_pyOpenMS_MzDataFile._new_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzDataFile *))__pyx_f_9_pyOpenMS_10MzDataFile__new_inst;
  __pyx_vtable_9_pyOpenMS_MzDataFile._set_inst = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_MzDataFile *, OpenMS::MzDataFile *))__pyx_f_9_pyOpenMS_10MzDataFile__set_inst;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_MzDataFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_MzDataFile.tp_dict, __pyx_vtabptr_9_pyOpenMS_MzDataFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MzDataFile", (PyObject *)&__pyx_type_9_pyOpenMS_MzDataFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_MzDataFile = &__pyx_type_9_pyOpenMS_MzDataFile;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "_pyOpenMS.pyx":24
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_1 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":50
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_2 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":76
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_3 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":153
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_4 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":196
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_5 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":216
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_6 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":229
 *         return self
 * cdef class Polarity:
 *     POSNULL=0             # <<<<<<<<<<<<<<
 *     POSITIVE=1
 *     NEGATIVE=2
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_Polarity->tp_dict, __pyx_n_s__POSNULL, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_Polarity);

  /* "_pyOpenMS.pyx":230
 * cdef class Polarity:
 *     POSNULL=0
 *     POSITIVE=1             # <<<<<<<<<<<<<<
 *     NEGATIVE=2
 *     SIZE_OF_POLARITY=3
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_Polarity->tp_dict, __pyx_n_s__POSITIVE, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_Polarity);

  /* "_pyOpenMS.pyx":231
 *     POSNULL=0
 *     POSITIVE=1
 *     NEGATIVE=2             # <<<<<<<<<<<<<<
 *     SIZE_OF_POLARITY=3
 * cdef class MzXMLFile:
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_Polarity->tp_dict, __pyx_n_s__NEGATIVE, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_Polarity);

  /* "_pyOpenMS.pyx":232
 *     POSITIVE=1
 *     NEGATIVE=2
 *     SIZE_OF_POLARITY=3             # <<<<<<<<<<<<<<
 * cdef class MzXMLFile:
 *     cdef _MzXMLFile * inst
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9_pyOpenMS_Polarity->tp_dict, __pyx_n_s__SIZE_OF_POLARITY, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_9_pyOpenMS_Polarity);

  /* "_pyOpenMS.pyx":241
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_7 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":265
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_8 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":289
 *             del self.inst
 *         self.inst = inst
 *     def __init__(self, _new_inst = True):             # <<<<<<<<<<<<<<
 *         if _new_inst:
 *            self._new_inst()
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_9 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_pyOpenMS.pyx":1
 * from libcpp.vector cimport *             # <<<<<<<<<<<<<<
 * from libcpp.string cimport *
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init _pyOpenMS", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _pyOpenMS");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
