/* Generated by Cython 0.15 on Fri Sep 23 13:22:58 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___pyOpenMS
#define __PYX_HAVE_API___pyOpenMS
#include <OpenMS/KERNEL/Peak1D.h>
#include <string>
#include <vector>
#include <OpenMS/METADATA/Ionsource.h>
#include <OpenMS/METADATA/InstrumentSettings.h>
#include <OpenMS/METADATA/Precursor.h>
#include <OpenMS/KERNEL/MSSpectrum.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <OpenMS/KERNEL/ChromatogramPeak.h>
#include <OpenMS/KERNEL/MSExperiment.h>
#include <OpenMS/FORMAT/MzXMLFile.h>
#include <OpenMS/FORMAT/MzMLFile.h>
#include <OpenMS/FORMAT/MzDataFile.h>
#include <OpenMS/KERNEL/ChromatogramTools.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "all.pyx",
  "_pyOpenMS.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_9_pyOpenMS_PyChromatogramTools;
struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings;
struct __pyx_obj_9_pyOpenMS_PyPeak1D;
struct __pyx_obj_9_pyOpenMS_PyMSExperiment;
struct __pyx_obj_9_pyOpenMS_PyMzDataFile;
struct __pyx_obj_9_pyOpenMS_PyMzMLFile;
struct __pyx_obj_9_pyOpenMS_PyPrecursor;
struct __pyx_obj_9_pyOpenMS_PyMSSpectrum;
struct __pyx_obj_9_pyOpenMS_PyPolarity;
struct __pyx_obj_9_pyOpenMS_PyMzXMLFile;

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":164
 *         del s_path
 * 
 * cdef class PyChromatogramTools:             # <<<<<<<<<<<<<<
 * 
 *     cdef ChromatogramTools * inst
 */
struct __pyx_obj_9_pyOpenMS_PyChromatogramTools {
  PyObject_HEAD
  OpenMS::ChromatogramTools *inst;
};


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":249
 *         self.inst.setIntensity(I)
 * 
 * cdef class PyInstrumentSettings:             # <<<<<<<<<<<<<<
 * 
 *     cdef InstrumentSettings * inst
 */
struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_PyInstrumentSettings *__pyx_vtab;
  OpenMS::InstrumentSettings *inst;
};


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":222
 *         self.inst.setIntensity(I)
 * 
 * cdef class PyPeak1D:             # <<<<<<<<<<<<<<
 * 
 *     cdef Peak1D * inst
 */
struct __pyx_obj_9_pyOpenMS_PyPeak1D {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_PyPeak1D *__pyx_vtab;
  OpenMS::Peak1D *inst;
};


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":77
 * 
 * 
 * cdef class PyMSExperiment:             # <<<<<<<<<<<<<<
 * 
 *     cdef MSExperiment[Peak1D, ChromatogramPeak] * inst
 */
struct __pyx_obj_9_pyOpenMS_PyMSExperiment {
  PyObject_HEAD
  OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak> *inst;
};


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":147
 *         del s_path
 * 
 * cdef class PyMzDataFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef MzDataFile * inst
 */
struct __pyx_obj_9_pyOpenMS_PyMzDataFile {
  PyObject_HEAD
  OpenMS::MzDataFile *inst;
};


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":130
 * 
 * 
 * cdef class PyMzMLFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef MzMLFile * inst
 */
struct __pyx_obj_9_pyOpenMS_PyMzMLFile {
  PyObject_HEAD
  OpenMS::MzMLFile *inst;
};


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":195
 * 
 * 
 * cdef class PyPrecursor:             # <<<<<<<<<<<<<<
 * 
 *     cdef Precursor * inst
 */
struct __pyx_obj_9_pyOpenMS_PyPrecursor {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_PyPrecursor *__pyx_vtab;
  OpenMS::Precursor *inst;
};


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":14
 * 
 * 
 * cdef class PyMSSpectrum:             # <<<<<<<<<<<<<<
 * 
 *     cdef MSSpectrum[Peak1D] * inst
 */
struct __pyx_obj_9_pyOpenMS_PyMSSpectrum {
  PyObject_HEAD
  struct __pyx_vtabstruct_9_pyOpenMS_PyMSSpectrum *__pyx_vtab;
  OpenMS::MSSpectrum<OpenMS::Peak1D> *inst;
};


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":178
 * 
 * 
 * cdef class PyPolarity:             # <<<<<<<<<<<<<<
 * 
 *     cdef int p
 */
struct __pyx_obj_9_pyOpenMS_PyPolarity {
  PyObject_HEAD
  int p;
};


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":112
 * 
 * 
 * cdef class PyMzXMLFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef MzXMLFile * inst
 */
struct __pyx_obj_9_pyOpenMS_PyMzXMLFile {
  PyObject_HEAD
  OpenMS::MzXMLFile *inst;
};



/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":14
 * 
 * 
 * cdef class PyMSSpectrum:             # <<<<<<<<<<<<<<
 * 
 *     cdef MSSpectrum[Peak1D] * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_PyMSSpectrum {
  PyObject *(*replaceInstance)(struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *, OpenMS::MSSpectrum<OpenMS::Peak1D> *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_PyMSSpectrum *__pyx_vtabptr_9_pyOpenMS_PyMSSpectrum;


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":249
 *         self.inst.setIntensity(I)
 * 
 * cdef class PyInstrumentSettings:             # <<<<<<<<<<<<<<
 * 
 *     cdef InstrumentSettings * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_PyInstrumentSettings {
  PyObject *(*replaceInstance)(struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *, OpenMS::InstrumentSettings *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_PyInstrumentSettings *__pyx_vtabptr_9_pyOpenMS_PyInstrumentSettings;


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":222
 *         self.inst.setIntensity(I)
 * 
 * cdef class PyPeak1D:             # <<<<<<<<<<<<<<
 * 
 *     cdef Peak1D * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_PyPeak1D {
  PyObject *(*replaceInstance)(struct __pyx_obj_9_pyOpenMS_PyPeak1D *, OpenMS::Peak1D *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_PyPeak1D *__pyx_vtabptr_9_pyOpenMS_PyPeak1D;


/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":195
 * 
 * 
 * cdef class PyPrecursor:             # <<<<<<<<<<<<<<
 * 
 *     cdef Precursor * inst
 */

struct __pyx_vtabstruct_9_pyOpenMS_PyPrecursor {
  PyObject *(*replaceInstance)(struct __pyx_obj_9_pyOpenMS_PyPrecursor *, OpenMS::Precursor *);
};
static struct __pyx_vtabstruct_9_pyOpenMS_PyPrecursor *__pyx_vtabptr_9_pyOpenMS_PyPrecursor;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  // Catch a handful of different errors here and turn them into the
  // equivalent Python errors.
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    // Unfortunately, in standard C++ we have no way of distinguishing EOF
    // from other errors here; be careful with the exception mask
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    // Change out_of_range to IndexError
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'pxd.Peak1D' */

/* Module declarations from 'pxd.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'pxd.IonSource' */

/* Module declarations from 'pxd.Polarity' */

/* Module declarations from 'pxd.InstrumentSettings' */

/* Module declarations from 'pxd.Precursor' */

/* Module declarations from 'pxd.MSSpectrum' */

/* Module declarations from 'pxd.ChromatogramPeak' */

/* Module declarations from 'pxd.MSExperiment' */

/* Module declarations from 'pxd.MzXMLFile' */

/* Module declarations from 'pxd.MzMLFile' */

/* Module declarations from 'pxd.MzDataFile' */

/* Module declarations from 'pxd.ChromatogramTools' */

/* Module declarations from '_pyOpenMS' */
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyMSSpectrum = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyMSExperiment = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyMzXMLFile = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyMzMLFile = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyMzDataFile = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyChromatogramTools = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyPolarity = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyPrecursor = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyPeak1D = 0;
static PyTypeObject *__pyx_ptype_9_pyOpenMS_PyInstrumentSettings = 0;
#define __Pyx_MODULE_NAME "_pyOpenMS"
int __pyx_module_is_main__pyOpenMS = 0;

/* Implementation of '_pyOpenMS' */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_range;
static char __pyx_k_1[] = "invalid index";
static char __pyx_k__pp[] = "pp";
static char __pyx_k__exp[] = "exp";
static char __pyx_k__path[] = "path";
static char __pyx_k__size[] = "size";
static char __pyx_k__range[] = "range";
static char __pyx_k__remove[] = "remove";
static char __pyx_k__POLNULL[] = "POLNULL";
static char __pyx_k__NEGATIVE[] = "NEGATIVE";
static char __pyx_k__POSITIVE[] = "POSITIVE";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k__experiment[] = "experiment";
static char __pyx_k__SIZE_OF_POLARITY[] = "SIZE_OF_POLARITY";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__NEGATIVE;
static PyObject *__pyx_n_s__POLNULL;
static PyObject *__pyx_n_s__POSITIVE;
static PyObject *__pyx_n_s__SIZE_OF_POLARITY;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__exp;
static PyObject *__pyx_n_s__experiment;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__pp;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__remove;
static PyObject *__pyx_n_s__size;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_3;

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":18
 *     cdef MSSpectrum[Peak1D] * inst
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = new MSSpectrum[Peak1D]()
 * 
 */

static int __pyx_pf_9_pyOpenMS_12PyMSSpectrum___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_12PyMSSpectrum___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":19
 * 
 *     def __cinit__(self):
 *         self.inst = new MSSpectrum[Peak1D]()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst = new OpenMS::MSSpectrum<OpenMS::Peak1D>();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":21
 *         self.inst = new MSSpectrum[Peak1D]()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.inst
 * 
 */

static void __pyx_pf_9_pyOpenMS_12PyMSSpectrum_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_12PyMSSpectrum_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":22
 * 
 *     def __dealloc__(self):
 *         del self.inst             # <<<<<<<<<<<<<<
 * 
 *     cdef replaceInstance(self, MSSpectrum[Peak1D] * inst):
 */
  delete ((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst;

  __Pyx_RefNannyFinishContext();
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":24
 *         del self.inst
 * 
 *     cdef replaceInstance(self, MSSpectrum[Peak1D] * inst):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static PyObject *__pyx_f_9_pyOpenMS_12PyMSSpectrum_replaceInstance(struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *__pyx_v_self, OpenMS::MSSpectrum<OpenMS::Peak1D> *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("replaceInstance");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":25
 * 
 *     cdef replaceInstance(self, MSSpectrum[Peak1D] * inst):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 *         self.inst = inst
 */
  __pyx_t_1 = (__pyx_v_self->inst != NULL);
  if (__pyx_t_1) {

    /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":26
 *     cdef replaceInstance(self, MSSpectrum[Peak1D] * inst):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
    delete __pyx_v_self->inst;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":27
 *         if self.inst != NULL:
 *             del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":29
 *         self.inst = inst
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.inst.size()
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_2size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_2size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":30
 * 
 *     def size(self):
 *         return self.inst.size()             # <<<<<<<<<<<<<<
 * 
 *     def getRT(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst->size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":32
 *         return self.inst.size()
 * 
 *     def getRT(self):             # <<<<<<<<<<<<<<
 *         return self.inst.getRT()
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_3getRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_3getRT(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRT");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":33
 * 
 *     def getRT(self):
 *         return self.inst.getRT()             # <<<<<<<<<<<<<<
 * 
 *     def setRT(self, double rt):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst->getRT()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.getRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":35
 *         return self.inst.getRT()
 * 
 *     def setRT(self, double rt):             # <<<<<<<<<<<<<<
 *         self.inst.setRT(rt)
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_4setRT(PyObject *__pyx_v_self, PyObject *__pyx_arg_rt); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_4setRT(PyObject *__pyx_v_self, PyObject *__pyx_arg_rt) {
  double __pyx_v_rt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setRT");
  assert(__pyx_arg_rt); {
    __pyx_v_rt = __pyx_PyFloat_AsDouble(__pyx_arg_rt); if (unlikely((__pyx_v_rt == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.setRT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":36
 * 
 *     def setRT(self, double rt):
 *         self.inst.setRT(rt)             # <<<<<<<<<<<<<<
 * 
 *     def setMSLevel(self, unsigned int level):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst->setRT(__pyx_v_rt);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":38
 *         self.inst.setRT(rt)
 * 
 *     def setMSLevel(self, unsigned int level):             # <<<<<<<<<<<<<<
 *         self.inst.setMSLevel(level)
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_5setMSLevel(PyObject *__pyx_v_self, PyObject *__pyx_arg_level); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_5setMSLevel(PyObject *__pyx_v_self, PyObject *__pyx_arg_level) {
  unsigned int __pyx_v_level;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMSLevel");
  assert(__pyx_arg_level); {
    __pyx_v_level = __Pyx_PyInt_AsUnsignedInt(__pyx_arg_level); if (unlikely((__pyx_v_level == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.setMSLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":39
 * 
 *     def setMSLevel(self, unsigned int level):
 *         self.inst.setMSLevel(level)             # <<<<<<<<<<<<<<
 * 
 *     def getMSLevel(self):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst->setMSLevel(__pyx_v_level);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":41
 *         self.inst.setMSLevel(level)
 * 
 *     def getMSLevel(self):             # <<<<<<<<<<<<<<
 *         return self.inst.getMSLevel()
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_6getMSLevel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_6getMSLevel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMSLevel");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":42
 * 
 *     def getMSLevel(self):
 *         return self.inst.getMSLevel()             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst->getMSLevel()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.getMSLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":44
 *         return self.inst.getMSLevel()
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         cdef string name = self.inst.getName()
 *         return name.c_str()
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_7getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_7getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":45
 * 
 *     def getName(self):
 *         cdef string name = self.inst.getName()             # <<<<<<<<<<<<<<
 *         return name.c_str()
 * 
 */
  __pyx_v_name = ((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst->getName();

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":46
 *     def getName(self):
 *         cdef string name = self.inst.getName()
 *         return name.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, int i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_name.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":48
 *         return name.c_str()
 * 
 *     def __getitem__(self, int i):             # <<<<<<<<<<<<<<
 *         if i<0: i+= self.size()
 *         if i<0:
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_8__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_8__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  OpenMS::Peak1D __pyx_v_a;
  struct __pyx_obj_9_pyOpenMS_PyPeak1D *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_AsInt(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":49
 * 
 *     def __getitem__(self, int i):
 *         if i<0: i+= self.size()             # <<<<<<<<<<<<<<
 *         if i<0:
 *                 raise Exception("invalid index")
 */
  __pyx_t_1 = (__pyx_v_i < 0);
  if (__pyx_t_1) {
    __pyx_t_2 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_i = __pyx_t_5;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":50
 *     def __getitem__(self, int i):
 *         if i<0: i+= self.size()
 *         if i<0:             # <<<<<<<<<<<<<<
 *                 raise Exception("invalid index")
 *         cdef Peak1D a = deref(self.inst)[i]
 */
  __pyx_t_1 = (__pyx_v_i < 0);
  if (__pyx_t_1) {

    /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":51
 *         if i<0: i+= self.size()
 *         if i<0:
 *                 raise Exception("invalid index")             # <<<<<<<<<<<<<<
 *         cdef Peak1D a = deref(self.inst)[i]
 *         cdef PyPeak1D  res = PyPeak1D()
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":52
 *         if i<0:
 *                 raise Exception("invalid index")
 *         cdef Peak1D a = deref(self.inst)[i]             # <<<<<<<<<<<<<<
 *         cdef PyPeak1D  res = PyPeak1D()
 *         res.replaceInstance(new Peak1D(a))
 */
  __pyx_v_a = ((*((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst)[__pyx_v_i]);

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":53
 *                 raise Exception("invalid index")
 *         cdef Peak1D a = deref(self.inst)[i]
 *         cdef PyPeak1D  res = PyPeak1D()             # <<<<<<<<<<<<<<
 *         res.replaceInstance(new Peak1D(a))
 *         return res
 */
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_PyPeak1D)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_PyPeak1D *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":54
 *         cdef Peak1D a = deref(self.inst)[i]
 *         cdef PyPeak1D  res = PyPeak1D()
 *         res.replaceInstance(new Peak1D(a))             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_9_pyOpenMS_PyPeak1D *)__pyx_v_res->__pyx_vtab)->replaceInstance(__pyx_v_res, new OpenMS::Peak1D(__pyx_v_a)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":55
 *         cdef PyPeak1D  res = PyPeak1D()
 *         res.replaceInstance(new Peak1D(a))
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def getInstrumentSettings(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":57
 *         return res
 * 
 *     def getInstrumentSettings(self):             # <<<<<<<<<<<<<<
 *         cdef PyInstrumentSettings  res = PyInstrumentSettings()
 *         res.replaceInstance(new InstrumentSettings(self.inst.getInstrumentSettings()))
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_9getInstrumentSettings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_9getInstrumentSettings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getInstrumentSettings");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":58
 * 
 *     def getInstrumentSettings(self):
 *         cdef PyInstrumentSettings  res = PyInstrumentSettings()             # <<<<<<<<<<<<<<
 *         res.replaceInstance(new InstrumentSettings(self.inst.getInstrumentSettings()))
 *         return res
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_PyInstrumentSettings)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":59
 *     def getInstrumentSettings(self):
 *         cdef PyInstrumentSettings  res = PyInstrumentSettings()
 *         res.replaceInstance(new InstrumentSettings(self.inst.getInstrumentSettings()))             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_PyInstrumentSettings *)__pyx_v_res->__pyx_vtab)->replaceInstance(__pyx_v_res, new OpenMS::InstrumentSettings(((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst->getInstrumentSettings())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":60
 *         cdef PyInstrumentSettings  res = PyInstrumentSettings()
 *         res.replaceInstance(new InstrumentSettings(self.inst.getInstrumentSettings()))
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def getPrecursors(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.getInstrumentSettings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":62
 *         return res
 * 
 *     def getPrecursors(self):             # <<<<<<<<<<<<<<
 *         cdef vector[Precursor] precursors = self.inst.getPrecursors()
 *         cdef list rv = list()
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_10getPrecursors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMSSpectrum_10getPrecursors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::vector<OpenMS::Precursor> __pyx_v_precursors;
  PyObject *__pyx_v_rv = 0;
  OpenMS::Precursor *__pyx_v_pc;
  size_t __pyx_v_i;
  struct __pyx_obj_9_pyOpenMS_PyPrecursor *__pyx_v_pypc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPrecursors");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":63
 * 
 *     def getPrecursors(self):
 *         cdef vector[Precursor] precursors = self.inst.getPrecursors()             # <<<<<<<<<<<<<<
 *         cdef list rv = list()
 *         cdef Precursor * pc
 */
  __pyx_v_precursors = ((std::vector<OpenMS::Precursor>)((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_v_self)->inst->getPrecursors());

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":64
 *     def getPrecursors(self):
 *         cdef vector[Precursor] precursors = self.inst.getPrecursors()
 *         cdef list rv = list()             # <<<<<<<<<<<<<<
 *         cdef Precursor * pc
 *         for i in range(precursors.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_rv = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":66
 *         cdef list rv = list()
 *         cdef Precursor * pc
 *         for i in range(precursors.size()):             # <<<<<<<<<<<<<<
 *               pc = new Precursor(precursors.at(i))
 *               pypc = PyPrecursor()
 */
  __pyx_t_2 = __pyx_v_precursors.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":67
 *         cdef Precursor * pc
 *         for i in range(precursors.size()):
 *               pc = new Precursor(precursors.at(i))             # <<<<<<<<<<<<<<
 *               pypc = PyPrecursor()
 *               pypc.replaceInstance(pc)
 */
    __pyx_v_pc = new OpenMS::Precursor(__pyx_v_precursors.at(__pyx_v_i));

    /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":68
 *         for i in range(precursors.size()):
 *               pc = new Precursor(precursors.at(i))
 *               pypc = PyPrecursor()             # <<<<<<<<<<<<<<
 *               pypc.replaceInstance(pc)
 *               rv.append(pypc)
 */
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_PyPrecursor)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(((PyObject *)__pyx_v_pypc));
    __pyx_v_pypc = ((struct __pyx_obj_9_pyOpenMS_PyPrecursor *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":69
 *               pc = new Precursor(precursors.at(i))
 *               pypc = PyPrecursor()
 *               pypc.replaceInstance(pc)             # <<<<<<<<<<<<<<
 *               rv.append(pypc)
 *         return rv
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_9_pyOpenMS_PyPrecursor *)__pyx_v_pypc->__pyx_vtab)->replaceInstance(__pyx_v_pypc, __pyx_v_pc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":70
 *               pypc = PyPrecursor()
 *               pypc.replaceInstance(pc)
 *               rv.append(pypc)             # <<<<<<<<<<<<<<
 *         return rv
 * 
 */
    if (unlikely(((PyObject *)__pyx_v_rv) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_4 = PyList_Append(__pyx_v_rv, ((PyObject *)__pyx_v_pypc)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":71
 *               pypc.replaceInstance(pc)
 *               rv.append(pypc)
 *         return rv             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rv));
  __pyx_r = ((PyObject *)__pyx_v_rv);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyMSSpectrum.getPrecursors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rv);
  __Pyx_XDECREF((PyObject *)__pyx_v_pypc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":81
 *     cdef MSExperiment[Peak1D, ChromatogramPeak] * inst
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = new MSExperiment[Peak1D, ChromatogramPeak]()
 * 
 */

static int __pyx_pf_9_pyOpenMS_14PyMSExperiment___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_14PyMSExperiment___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":82
 * 
 *     def __cinit__(self):
 *         self.inst = new MSExperiment[Peak1D, ChromatogramPeak]()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)__pyx_v_self)->inst = new OpenMS::MSExperiment<OpenMS::Peak1D,OpenMS::ChromatogramPeak>();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":84
 *         self.inst = new MSExperiment[Peak1D, ChromatogramPeak]()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.inst != NULL:
 *             del self.inst
 */

static void __pyx_pf_9_pyOpenMS_14PyMSExperiment_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_14PyMSExperiment_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":85
 * 
 *     def __dealloc__(self):
 *         if self.inst != NULL:             # <<<<<<<<<<<<<<
 *             del self.inst
 * 
 */
  __pyx_t_1 = (((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)__pyx_v_self)->inst != NULL);
  if (__pyx_t_1) {

    /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":86
 *     def __dealloc__(self):
 *         if self.inst != NULL:
 *             del self.inst             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    delete ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)__pyx_v_self)->inst;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":88
 *             del self.inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.inst
 * 
 */

static void __pyx_pf_9_pyOpenMS_14PyMSExperiment_2__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_14PyMSExperiment_2__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":89
 * 
 *     def __dealloc__(self):
 *         del self.inst             # <<<<<<<<<<<<<<
 * 
 *     def getMinMZ(self):
 */
  delete ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)__pyx_v_self)->inst;

  __Pyx_RefNannyFinishContext();
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":91
 *         del self.inst
 * 
 *     def getMinMZ(self):             # <<<<<<<<<<<<<<
 *         return self.inst.getMinMZ()
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_14PyMSExperiment_3getMinMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_14PyMSExperiment_3getMinMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMinMZ");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":92
 * 
 *     def getMinMZ(self):
 *         return self.inst.getMinMZ()             # <<<<<<<<<<<<<<
 * 
 *     def sortSpectra(self, int b0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)__pyx_v_self)->inst->getMinMZ()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyMSExperiment.getMinMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":94
 *         return self.inst.getMinMZ()
 * 
 *     def sortSpectra(self, int b0):             # <<<<<<<<<<<<<<
 *         self.inst.sortSpectra(b0)
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_14PyMSExperiment_4sortSpectra(PyObject *__pyx_v_self, PyObject *__pyx_arg_b0); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_14PyMSExperiment_4sortSpectra(PyObject *__pyx_v_self, PyObject *__pyx_arg_b0) {
  int __pyx_v_b0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sortSpectra");
  assert(__pyx_arg_b0); {
    __pyx_v_b0 = __Pyx_PyInt_AsInt(__pyx_arg_b0); if (unlikely((__pyx_v_b0 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMSExperiment.sortSpectra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":95
 * 
 *     def sortSpectra(self, int b0):
 *         self.inst.sortSpectra(b0)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, int i):
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_b0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)__pyx_v_self)->inst->sortSpectra(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyMSExperiment.sortSpectra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":97
 *         self.inst.sortSpectra(b0)
 * 
 *     def __getitem__(self, int i):             # <<<<<<<<<<<<<<
 *         if i<0: i+= self.size()
 *         if i<0:
 */

static PyObject *__pyx_pf_9_pyOpenMS_14PyMSExperiment_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_14PyMSExperiment_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  OpenMS::MSSpectrum<OpenMS::Peak1D> __pyx_v_a;
  struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_AsInt(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMSExperiment.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":98
 * 
 *     def __getitem__(self, int i):
 *         if i<0: i+= self.size()             # <<<<<<<<<<<<<<
 *         if i<0:
 *                 raise Exception("invalid index")
 */
  __pyx_t_1 = (__pyx_v_i < 0);
  if (__pyx_t_1) {
    __pyx_t_2 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_i = __pyx_t_5;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":99
 *     def __getitem__(self, int i):
 *         if i<0: i+= self.size()
 *         if i<0:             # <<<<<<<<<<<<<<
 *                 raise Exception("invalid index")
 * 
 */
  __pyx_t_1 = (__pyx_v_i < 0);
  if (__pyx_t_1) {

    /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":100
 *         if i<0: i+= self.size()
 *         if i<0:
 *                 raise Exception("invalid index")             # <<<<<<<<<<<<<<
 * 
 *         cdef MSSpectrum[Peak1D] a= deref(self.inst)[i]
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_3), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":102
 *                 raise Exception("invalid index")
 * 
 *         cdef MSSpectrum[Peak1D] a= deref(self.inst)[i]             # <<<<<<<<<<<<<<
 *         cdef PyMSSpectrum  res = PyMSSpectrum()
 *         res.replaceInstance(new MSSpectrum[Peak1D](a))
 */
  __pyx_v_a = ((OpenMS::MSSpectrum<OpenMS::Peak1D>)((*((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)__pyx_v_self)->inst)[__pyx_v_i]));

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":103
 * 
 *         cdef MSSpectrum[Peak1D] a= deref(self.inst)[i]
 *         cdef PyMSSpectrum  res = PyMSSpectrum()             # <<<<<<<<<<<<<<
 *         res.replaceInstance(new MSSpectrum[Peak1D](a))
 *         return res
 */
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_PyMSSpectrum)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_res = ((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":104
 *         cdef MSSpectrum[Peak1D] a= deref(self.inst)[i]
 *         cdef PyMSSpectrum  res = PyMSSpectrum()
 *         res.replaceInstance(new MSSpectrum[Peak1D](a))             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_9_pyOpenMS_PyMSSpectrum *)__pyx_v_res->__pyx_vtab)->replaceInstance(__pyx_v_res, new OpenMS::MSSpectrum<OpenMS::Peak1D>(__pyx_v_a)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":105
 *         cdef PyMSSpectrum  res = PyMSSpectrum()
 *         res.replaceInstance(new MSSpectrum[Peak1D](a))
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_pyOpenMS.PyMSExperiment.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":107
 *         return res
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.inst.size()
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_14PyMSExperiment_6size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_14PyMSExperiment_6size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":108
 * 
 *     def size(self):
 *         return self.inst.size()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)__pyx_v_self)->inst->size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyMSExperiment.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":116
 *     cdef MzXMLFile * inst
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = new MzXMLFile()
 * 
 */

static int __pyx_pf_9_pyOpenMS_11PyMzXMLFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_11PyMzXMLFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":117
 * 
 *     def __cinit__(self):
 *         self.inst = new MzXMLFile()             # <<<<<<<<<<<<<<
 * 
 *     def load(self, char * path, PyMSExperiment experiment):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyMzXMLFile *)__pyx_v_self)->inst = new OpenMS::MzXMLFile();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":119
 *         self.inst = new MzXMLFile()
 * 
 *     def load(self, char * path, PyMSExperiment experiment):             # <<<<<<<<<<<<<<
 *         cdef string * s_path = new string(path)
 *         self.inst.load(deref(s_path), deref(experiment.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_11PyMzXMLFile_1load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_11PyMzXMLFile_1load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_path;
  struct __pyx_obj_9_pyOpenMS_PyMSExperiment *__pyx_v_experiment = 0;
  std::string *__pyx_v_s_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__path,&__pyx_n_s__experiment,0};
  __Pyx_RefNannySetupContext("load");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__path);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__experiment);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_path = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_path = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzXMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_experiment), __pyx_ptype_9_pyOpenMS_PyMSExperiment, 1, "experiment", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":120
 * 
 *     def load(self, char * path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(s_path), deref(experiment.inst))
 *         del s_path
 */
  __pyx_v_s_path = new std::string(__pyx_v_path);

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":121
 *     def load(self, char * path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)
 *         self.inst.load(deref(s_path), deref(experiment.inst))             # <<<<<<<<<<<<<<
 *         del s_path
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_PyMzXMLFile *)__pyx_v_self)->inst->load((*__pyx_v_s_path), (*__pyx_v_experiment->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":122
 *         cdef string * s_path = new string(path)
 *         self.inst.load(deref(s_path), deref(experiment.inst))
 *         del s_path             # <<<<<<<<<<<<<<
 * 
 *     def store(self, char* path, PyMSExperiment experiment):
 */
  delete __pyx_v_s_path;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzXMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":124
 *         del s_path
 * 
 *     def store(self, char* path, PyMSExperiment experiment):             # <<<<<<<<<<<<<<
 *         cdef string * s_path = new string(path)
 *         self.inst.store(deref(s_path), deref(experiment.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_11PyMzXMLFile_2store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_11PyMzXMLFile_2store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_path;
  struct __pyx_obj_9_pyOpenMS_PyMSExperiment *__pyx_v_experiment = 0;
  std::string *__pyx_v_s_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__path,&__pyx_n_s__experiment,0};
  __Pyx_RefNannySetupContext("store");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__path);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__experiment);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "store") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_path = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_path = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzXMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_experiment), __pyx_ptype_9_pyOpenMS_PyMSExperiment, 1, "experiment", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":125
 * 
 *     def store(self, char* path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(s_path), deref(experiment.inst))
 *         del s_path
 */
  __pyx_v_s_path = new std::string(__pyx_v_path);

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":126
 *     def store(self, char* path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)
 *         self.inst.store(deref(s_path), deref(experiment.inst))             # <<<<<<<<<<<<<<
 *         del s_path
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_PyMzXMLFile *)__pyx_v_self)->inst->store((*__pyx_v_s_path), (*__pyx_v_experiment->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":127
 *         cdef string * s_path = new string(path)
 *         self.inst.store(deref(s_path), deref(experiment.inst))
 *         del s_path             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_s_path;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzXMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":134
 *     cdef MzMLFile * inst
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = new MzMLFile()
 * 
 */

static int __pyx_pf_9_pyOpenMS_10PyMzMLFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10PyMzMLFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":135
 * 
 *     def __cinit__(self):
 *         self.inst = new MzMLFile()             # <<<<<<<<<<<<<<
 * 
 *     def load(self, char * path, PyMSExperiment experiment):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyMzMLFile *)__pyx_v_self)->inst = new OpenMS::MzMLFile();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":137
 *         self.inst = new MzMLFile()
 * 
 *     def load(self, char * path, PyMSExperiment experiment):             # <<<<<<<<<<<<<<
 *         cdef string * s_path = new string(path)
 *         self.inst.load(deref(s_path), deref(experiment.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_10PyMzMLFile_1load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10PyMzMLFile_1load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_path;
  struct __pyx_obj_9_pyOpenMS_PyMSExperiment *__pyx_v_experiment = 0;
  std::string *__pyx_v_s_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__path,&__pyx_n_s__experiment,0};
  __Pyx_RefNannySetupContext("load");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__path);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__experiment);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_path = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_path = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_experiment), __pyx_ptype_9_pyOpenMS_PyMSExperiment, 1, "experiment", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":138
 * 
 *     def load(self, char * path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(s_path), deref(experiment.inst))
 *         del s_path
 */
  __pyx_v_s_path = new std::string(__pyx_v_path);

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":139
 *     def load(self, char * path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)
 *         self.inst.load(deref(s_path), deref(experiment.inst))             # <<<<<<<<<<<<<<
 *         del s_path
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_PyMzMLFile *)__pyx_v_self)->inst->load((*__pyx_v_s_path), (*__pyx_v_experiment->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":140
 *         cdef string * s_path = new string(path)
 *         self.inst.load(deref(s_path), deref(experiment.inst))
 *         del s_path             # <<<<<<<<<<<<<<
 * 
 *     def store(self, char* path, PyMSExperiment experiment):
 */
  delete __pyx_v_s_path;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzMLFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":142
 *         del s_path
 * 
 *     def store(self, char* path, PyMSExperiment experiment):             # <<<<<<<<<<<<<<
 *         cdef string * s_path = new string(path)
 *         self.inst.store(deref(s_path), deref(experiment.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_10PyMzMLFile_2store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10PyMzMLFile_2store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_path;
  struct __pyx_obj_9_pyOpenMS_PyMSExperiment *__pyx_v_experiment = 0;
  std::string *__pyx_v_s_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__path,&__pyx_n_s__experiment,0};
  __Pyx_RefNannySetupContext("store");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__path);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__experiment);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "store") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_path = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_path = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_experiment), __pyx_ptype_9_pyOpenMS_PyMSExperiment, 1, "experiment", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":143
 * 
 *     def store(self, char* path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(s_path), deref(experiment.inst))
 *         del s_path
 */
  __pyx_v_s_path = new std::string(__pyx_v_path);

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":144
 *     def store(self, char* path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)
 *         self.inst.store(deref(s_path), deref(experiment.inst))             # <<<<<<<<<<<<<<
 *         del s_path
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_PyMzMLFile *)__pyx_v_self)->inst->store((*__pyx_v_s_path), (*__pyx_v_experiment->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":145
 *         cdef string * s_path = new string(path)
 *         self.inst.store(deref(s_path), deref(experiment.inst))
 *         del s_path             # <<<<<<<<<<<<<<
 * 
 * cdef class PyMzDataFile:
 */
  delete __pyx_v_s_path;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzMLFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":151
 *     cdef MzDataFile * inst
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = new MzDataFile()
 * 
 */

static int __pyx_pf_9_pyOpenMS_12PyMzDataFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_12PyMzDataFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":152
 * 
 *     def __cinit__(self):
 *         self.inst = new MzDataFile()             # <<<<<<<<<<<<<<
 * 
 *     def load(self, char * path, PyMSExperiment experiment):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyMzDataFile *)__pyx_v_self)->inst = new OpenMS::MzDataFile();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":154
 *         self.inst = new MzDataFile()
 * 
 *     def load(self, char * path, PyMSExperiment experiment):             # <<<<<<<<<<<<<<
 *         cdef string * s_path = new string(path)
 *         self.inst.load(deref(s_path), deref(experiment.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMzDataFile_1load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMzDataFile_1load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_path;
  struct __pyx_obj_9_pyOpenMS_PyMSExperiment *__pyx_v_experiment = 0;
  std::string *__pyx_v_s_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__path,&__pyx_n_s__experiment,0};
  __Pyx_RefNannySetupContext("load");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__path);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__experiment);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_path = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_path = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzDataFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_experiment), __pyx_ptype_9_pyOpenMS_PyMSExperiment, 1, "experiment", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":155
 * 
 *     def load(self, char * path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)             # <<<<<<<<<<<<<<
 *         self.inst.load(deref(s_path), deref(experiment.inst))
 *         del s_path
 */
  __pyx_v_s_path = new std::string(__pyx_v_path);

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":156
 *     def load(self, char * path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)
 *         self.inst.load(deref(s_path), deref(experiment.inst))             # <<<<<<<<<<<<<<
 *         del s_path
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_PyMzDataFile *)__pyx_v_self)->inst->load((*__pyx_v_s_path), (*__pyx_v_experiment->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":157
 *         cdef string * s_path = new string(path)
 *         self.inst.load(deref(s_path), deref(experiment.inst))
 *         del s_path             # <<<<<<<<<<<<<<
 * 
 *     def store(self, char* path, PyMSExperiment experiment):
 */
  delete __pyx_v_s_path;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzDataFile.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":159
 *         del s_path
 * 
 *     def store(self, char* path, PyMSExperiment experiment):             # <<<<<<<<<<<<<<
 *         cdef string * s_path = new string(path)
 *         self.inst.store(deref(s_path), deref(experiment.inst))
 */

static PyObject *__pyx_pf_9_pyOpenMS_12PyMzDataFile_2store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_12PyMzDataFile_2store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_path;
  struct __pyx_obj_9_pyOpenMS_PyMSExperiment *__pyx_v_experiment = 0;
  std::string *__pyx_v_s_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__path,&__pyx_n_s__experiment,0};
  __Pyx_RefNannySetupContext("store");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__path);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__experiment);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "store") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_path = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_path = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_experiment = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzDataFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_experiment), __pyx_ptype_9_pyOpenMS_PyMSExperiment, 1, "experiment", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":160
 * 
 *     def store(self, char* path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)             # <<<<<<<<<<<<<<
 *         self.inst.store(deref(s_path), deref(experiment.inst))
 *         del s_path
 */
  __pyx_v_s_path = new std::string(__pyx_v_path);

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":161
 *     def store(self, char* path, PyMSExperiment experiment):
 *         cdef string * s_path = new string(path)
 *         self.inst.store(deref(s_path), deref(experiment.inst))             # <<<<<<<<<<<<<<
 *         del s_path
 * 
 */
  try {((struct __pyx_obj_9_pyOpenMS_PyMzDataFile *)__pyx_v_self)->inst->store((*__pyx_v_s_path), (*__pyx_v_experiment->inst));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":162
 *         cdef string * s_path = new string(path)
 *         self.inst.store(deref(s_path), deref(experiment.inst))
 *         del s_path             # <<<<<<<<<<<<<<
 * 
 * cdef class PyChromatogramTools:
 */
  delete __pyx_v_s_path;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyMzDataFile.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":168
 *     cdef ChromatogramTools * inst
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = new ChromatogramTools()
 * 
 */

static int __pyx_pf_9_pyOpenMS_19PyChromatogramTools___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_19PyChromatogramTools___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":169
 * 
 *     def __cinit__(self):
 *         self.inst = new ChromatogramTools()             # <<<<<<<<<<<<<<
 * 
 *     def convertChromatogramsToSpectra(self, PyMSExperiment exp):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyChromatogramTools *)__pyx_v_self)->inst = new OpenMS::ChromatogramTools();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":171
 *         self.inst = new ChromatogramTools()
 * 
 *     def convertChromatogramsToSpectra(self, PyMSExperiment exp):             # <<<<<<<<<<<<<<
 *         self.inst.convertChromatogramsToSpectra(deref(exp.inst))
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_19PyChromatogramTools_1convertChromatogramsToSpectra(PyObject *__pyx_v_self, PyObject *__pyx_v_exp); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_19PyChromatogramTools_1convertChromatogramsToSpectra(PyObject *__pyx_v_self, PyObject *__pyx_v_exp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convertChromatogramsToSpectra");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exp), __pyx_ptype_9_pyOpenMS_PyMSExperiment, 1, "exp", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":172
 * 
 *     def convertChromatogramsToSpectra(self, PyMSExperiment exp):
 *         self.inst.convertChromatogramsToSpectra(deref(exp.inst))             # <<<<<<<<<<<<<<
 * 
 *     def convertSpectraToChromatograms(self, PyMSExperiment exp, int remove):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyChromatogramTools *)__pyx_v_self)->inst->convertChromatogramsToSpectra((*((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)__pyx_v_exp)->inst));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyChromatogramTools.convertChromatogramsToSpectra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":174
 *         self.inst.convertChromatogramsToSpectra(deref(exp.inst))
 * 
 *     def convertSpectraToChromatograms(self, PyMSExperiment exp, int remove):             # <<<<<<<<<<<<<<
 *         self.inst.convertSpectraToChromatograms(deref(exp.inst) , remove)
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_19PyChromatogramTools_2convertSpectraToChromatograms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_19PyChromatogramTools_2convertSpectraToChromatograms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9_pyOpenMS_PyMSExperiment *__pyx_v_exp = 0;
  int __pyx_v_remove;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__exp,&__pyx_n_s__remove,0};
  __Pyx_RefNannySetupContext("convertSpectraToChromatograms");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__exp);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__remove);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("convertSpectraToChromatograms", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "convertSpectraToChromatograms") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_exp = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)values[0]);
    __pyx_v_remove = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_remove == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_exp = ((struct __pyx_obj_9_pyOpenMS_PyMSExperiment *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_remove = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_remove == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convertSpectraToChromatograms", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyChromatogramTools.convertSpectraToChromatograms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exp), __pyx_ptype_9_pyOpenMS_PyMSExperiment, 1, "exp", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":175
 * 
 *     def convertSpectraToChromatograms(self, PyMSExperiment exp, int remove):
 *         self.inst.convertSpectraToChromatograms(deref(exp.inst) , remove)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_9_pyOpenMS_PyChromatogramTools *)__pyx_v_self)->inst->convertSpectraToChromatograms((*__pyx_v_exp->inst), __pyx_v_remove);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyChromatogramTools.convertSpectraToChromatograms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":182
 *     cdef int p
 * 
 *     def __cinit__(self, int pp):             # <<<<<<<<<<<<<<
 *         self.p = pp
 * 
 */

static int __pyx_pf_9_pyOpenMS_10PyPolarity___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_10PyPolarity___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_pp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__pp,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pp);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_pp = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_pp == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_pp = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_pp == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyPolarity.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":183
 * 
 *     def __cinit__(self, int pp):
 *         self.p = pp             # <<<<<<<<<<<<<<
 * 
 *     def toString(self):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyPolarity *)__pyx_v_self)->p = __pyx_v_pp;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":185
 *         self.p = pp
 * 
 *     def toString(self):             # <<<<<<<<<<<<<<
 *         return { 0 : "POLNULL",
 *                  1 : "POSITIVE",
 */

static PyObject *__pyx_pf_9_pyOpenMS_10PyPolarity_1toString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10PyPolarity_1toString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toString");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":186
 * 
 *     def toString(self):
 *         return { 0 : "POLNULL",             # <<<<<<<<<<<<<<
 *                  1 : "POSITIVE",
 *                  2 : "NEGATIVE",
 */
  __Pyx_XDECREF(__pyx_r);

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":189
 *                  1 : "POSITIVE",
 *                  2 : "NEGATIVE",
 *                  3 : "SIZE_OF_POLARITY"}[<long>self.p]             # <<<<<<<<<<<<<<
 * 
 *     def toInt(self):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_0, ((PyObject *)__pyx_n_s__POLNULL)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_1, ((PyObject *)__pyx_n_s__POSITIVE)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_2, ((PyObject *)__pyx_n_s__NEGATIVE)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_3, ((PyObject *)__pyx_n_s__SIZE_OF_POLARITY)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_t_1), ((long)((struct __pyx_obj_9_pyOpenMS_PyPolarity *)__pyx_v_self)->p), sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.PyPolarity.toString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":191
 *                  3 : "SIZE_OF_POLARITY"}[<long>self.p]
 * 
 *     def toInt(self):             # <<<<<<<<<<<<<<
 *         return self.p
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_10PyPolarity_2toInt(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_10PyPolarity_2toInt(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toInt");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":192
 * 
 *     def toInt(self):
 *         return self.p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_9_pyOpenMS_PyPolarity *)__pyx_v_self)->p); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyPolarity.toInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":199
 *     cdef Precursor * inst
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = new Precursor()
 * 
 */

static int __pyx_pf_9_pyOpenMS_11PyPrecursor___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_11PyPrecursor___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":200
 * 
 *     def __cinit__(self):
 *         self.inst = new Precursor()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_9_pyOpenMS_PyPrecursor *)__pyx_v_self)->inst = new OpenMS::Precursor();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":203
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.inst
 * 
 */

static void __pyx_pf_9_pyOpenMS_11PyPrecursor_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_11PyPrecursor_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":204
 * 
 *     def __dealloc__(self):
 *         del self.inst             # <<<<<<<<<<<<<<
 * 
 *     cdef replaceInstance(self, Precursor * inst):
 */
  delete ((struct __pyx_obj_9_pyOpenMS_PyPrecursor *)__pyx_v_self)->inst;

  __Pyx_RefNannyFinishContext();
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":206
 *         del self.inst
 * 
 *     cdef replaceInstance(self, Precursor * inst):             # <<<<<<<<<<<<<<
 *         del self.inst
 *         self.inst = inst
 */

static PyObject *__pyx_f_9_pyOpenMS_11PyPrecursor_replaceInstance(struct __pyx_obj_9_pyOpenMS_PyPrecursor *__pyx_v_self, OpenMS::Precursor *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replaceInstance");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":207
 * 
 *     cdef replaceInstance(self, Precursor * inst):
 *         del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
  delete __pyx_v_self->inst;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":208
 *     cdef replaceInstance(self, Precursor * inst):
 *         del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def getMZ(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":210
 *         self.inst = inst
 * 
 *     def getMZ(self):             # <<<<<<<<<<<<<<
 *         return self.inst.getMZ()
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_11PyPrecursor_2getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_11PyPrecursor_2getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMZ");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":211
 * 
 *     def getMZ(self):
 *         return self.inst.getMZ()             # <<<<<<<<<<<<<<
 * 
 *     def getIntensity(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9_pyOpenMS_PyPrecursor *)__pyx_v_self)->inst->getMZ()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyPrecursor.getMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":213
 *         return self.inst.getMZ()
 * 
 *     def getIntensity(self):             # <<<<<<<<<<<<<<
 *         return self.inst.getIntensity()
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_11PyPrecursor_3getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_11PyPrecursor_3getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntensity");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":214
 * 
 *     def getIntensity(self):
 *         return self.inst.getIntensity()             # <<<<<<<<<<<<<<
 * 
 *     def setMZ(self, double mz):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9_pyOpenMS_PyPrecursor *)__pyx_v_self)->inst->getIntensity()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyPrecursor.getIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":216
 *         return self.inst.getIntensity()
 * 
 *     def setMZ(self, double mz):             # <<<<<<<<<<<<<<
 *         self.inst.setMZ(mz)
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_11PyPrecursor_4setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_mz); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_11PyPrecursor_4setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_mz) {
  double __pyx_v_mz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMZ");
  assert(__pyx_arg_mz); {
    __pyx_v_mz = __pyx_PyFloat_AsDouble(__pyx_arg_mz); if (unlikely((__pyx_v_mz == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyPrecursor.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":217
 * 
 *     def setMZ(self, double mz):
 *         self.inst.setMZ(mz)             # <<<<<<<<<<<<<<
 * 
 *     def setIntensity(self, double I):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyPrecursor *)__pyx_v_self)->inst->setMZ(__pyx_v_mz);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":219
 *         self.inst.setMZ(mz)
 * 
 *     def setIntensity(self, double I):             # <<<<<<<<<<<<<<
 *         self.inst.setIntensity(I)
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_11PyPrecursor_5setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_I); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_11PyPrecursor_5setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_I) {
  double __pyx_v_I;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setIntensity");
  assert(__pyx_arg_I); {
    __pyx_v_I = __pyx_PyFloat_AsDouble(__pyx_arg_I); if (unlikely((__pyx_v_I == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyPrecursor.setIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":220
 * 
 *     def setIntensity(self, double I):
 *         self.inst.setIntensity(I)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyPeak1D:
 */
  ((struct __pyx_obj_9_pyOpenMS_PyPrecursor *)__pyx_v_self)->inst->setIntensity(__pyx_v_I);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":226
 *     cdef Peak1D * inst
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = new Peak1D()
 * 
 */

static int __pyx_pf_9_pyOpenMS_8PyPeak1D___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_8PyPeak1D___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":227
 * 
 *     def __cinit__(self):
 *         self.inst = new Peak1D()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_9_pyOpenMS_PyPeak1D *)__pyx_v_self)->inst = new OpenMS::Peak1D();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":230
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.inst
 * 
 */

static void __pyx_pf_9_pyOpenMS_8PyPeak1D_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_8PyPeak1D_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":231
 * 
 *     def __dealloc__(self):
 *         del self.inst             # <<<<<<<<<<<<<<
 * 
 *     cdef replaceInstance(self, Peak1D * inst):
 */
  delete ((struct __pyx_obj_9_pyOpenMS_PyPeak1D *)__pyx_v_self)->inst;

  __Pyx_RefNannyFinishContext();
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":233
 *         del self.inst
 * 
 *     cdef replaceInstance(self, Peak1D * inst):             # <<<<<<<<<<<<<<
 *         del self.inst
 *         self.inst = inst
 */

static PyObject *__pyx_f_9_pyOpenMS_8PyPeak1D_replaceInstance(struct __pyx_obj_9_pyOpenMS_PyPeak1D *__pyx_v_self, OpenMS::Peak1D *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replaceInstance");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":234
 * 
 *     cdef replaceInstance(self, Peak1D * inst):
 *         del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
  delete __pyx_v_self->inst;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":235
 *     cdef replaceInstance(self, Peak1D * inst):
 *         del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def getMZ(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":237
 *         self.inst = inst
 * 
 *     def getMZ(self):             # <<<<<<<<<<<<<<
 *         return self.inst.getMZ()
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_8PyPeak1D_2getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_8PyPeak1D_2getMZ(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMZ");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":238
 * 
 *     def getMZ(self):
 *         return self.inst.getMZ()             # <<<<<<<<<<<<<<
 * 
 *     def getIntensity(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9_pyOpenMS_PyPeak1D *)__pyx_v_self)->inst->getMZ()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyPeak1D.getMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":240
 *         return self.inst.getMZ()
 * 
 *     def getIntensity(self):             # <<<<<<<<<<<<<<
 *         return self.inst.getIntensity()
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_8PyPeak1D_3getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_8PyPeak1D_3getIntensity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntensity");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":241
 * 
 *     def getIntensity(self):
 *         return self.inst.getIntensity()             # <<<<<<<<<<<<<<
 * 
 *     def setMZ(self, double mz):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_9_pyOpenMS_PyPeak1D *)__pyx_v_self)->inst->getIntensity()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyPeak1D.getIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":243
 *         return self.inst.getIntensity()
 * 
 *     def setMZ(self, double mz):             # <<<<<<<<<<<<<<
 *         self.inst.setMZ(mz)
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_8PyPeak1D_4setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_mz); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_8PyPeak1D_4setMZ(PyObject *__pyx_v_self, PyObject *__pyx_arg_mz) {
  double __pyx_v_mz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMZ");
  assert(__pyx_arg_mz); {
    __pyx_v_mz = __pyx_PyFloat_AsDouble(__pyx_arg_mz); if (unlikely((__pyx_v_mz == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyPeak1D.setMZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":244
 * 
 *     def setMZ(self, double mz):
 *         self.inst.setMZ(mz)             # <<<<<<<<<<<<<<
 * 
 *     def setIntensity(self, double I):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyPeak1D *)__pyx_v_self)->inst->setMZ(__pyx_v_mz);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":246
 *         self.inst.setMZ(mz)
 * 
 *     def setIntensity(self, double I):             # <<<<<<<<<<<<<<
 *         self.inst.setIntensity(I)
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_8PyPeak1D_5setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_I); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_8PyPeak1D_5setIntensity(PyObject *__pyx_v_self, PyObject *__pyx_arg_I) {
  double __pyx_v_I;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setIntensity");
  assert(__pyx_arg_I); {
    __pyx_v_I = __pyx_PyFloat_AsDouble(__pyx_arg_I); if (unlikely((__pyx_v_I == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyPeak1D.setIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":247
 * 
 *     def setIntensity(self, double I):
 *         self.inst.setIntensity(I)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyInstrumentSettings:
 */
  ((struct __pyx_obj_9_pyOpenMS_PyPeak1D *)__pyx_v_self)->inst->setIntensity(__pyx_v_I);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":253
 *     cdef InstrumentSettings * inst
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.inst = new InstrumentSettings()
 * 
 */

static int __pyx_pf_9_pyOpenMS_20PyInstrumentSettings___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_9_pyOpenMS_20PyInstrumentSettings___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":254
 * 
 *     def __cinit__(self):
 *         self.inst = new InstrumentSettings()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *)__pyx_v_self)->inst = new OpenMS::InstrumentSettings();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":256
 *         self.inst = new InstrumentSettings()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.inst
 * 
 */

static void __pyx_pf_9_pyOpenMS_20PyInstrumentSettings_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_9_pyOpenMS_20PyInstrumentSettings_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":257
 * 
 *     def __dealloc__(self):
 *         del self.inst             # <<<<<<<<<<<<<<
 * 
 *     cdef replaceInstance(self, InstrumentSettings * inst):
 */
  delete ((struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *)__pyx_v_self)->inst;

  __Pyx_RefNannyFinishContext();
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":259
 *         del self.inst
 * 
 *     cdef replaceInstance(self, InstrumentSettings * inst):             # <<<<<<<<<<<<<<
 *         del self.inst
 *         self.inst = inst
 */

static PyObject *__pyx_f_9_pyOpenMS_20PyInstrumentSettings_replaceInstance(struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *__pyx_v_self, OpenMS::InstrumentSettings *__pyx_v_inst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replaceInstance");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":260
 * 
 *     cdef replaceInstance(self, InstrumentSettings * inst):
 *         del self.inst             # <<<<<<<<<<<<<<
 *         self.inst = inst
 * 
 */
  delete __pyx_v_self->inst;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":261
 *     cdef replaceInstance(self, InstrumentSettings * inst):
 *         del self.inst
 *         self.inst = inst             # <<<<<<<<<<<<<<
 * 
 *     def getPolarity(self):
 */
  __pyx_v_self->inst = __pyx_v_inst;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":263
 *         self.inst = inst
 * 
 *     def getPolarity(self):             # <<<<<<<<<<<<<<
 *         return PyPolarity(self.inst.getPolarity())
 * 
 */

static PyObject *__pyx_pf_9_pyOpenMS_20PyInstrumentSettings_2getPolarity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_20PyInstrumentSettings_2getPolarity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPolarity");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":264
 * 
 *     def getPolarity(self):
 *         return PyPolarity(self.inst.getPolarity())             # <<<<<<<<<<<<<<
 * 
 *     def setPolarity(self, int p):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *)__pyx_v_self)->inst->getPolarity()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_9_pyOpenMS_PyPolarity)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_pyOpenMS.PyInstrumentSettings.getPolarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":266
 *         return PyPolarity(self.inst.getPolarity())
 * 
 *     def setPolarity(self, int p):             # <<<<<<<<<<<<<<
 *         self.inst.setPolarity(<Polarity>p)
 *         return self.inst.getPolarity()
 */

static PyObject *__pyx_pf_9_pyOpenMS_20PyInstrumentSettings_3setPolarity(PyObject *__pyx_v_self, PyObject *__pyx_arg_p); /*proto*/
static PyObject *__pyx_pf_9_pyOpenMS_20PyInstrumentSettings_3setPolarity(PyObject *__pyx_v_self, PyObject *__pyx_arg_p) {
  int __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPolarity");
  assert(__pyx_arg_p); {
    __pyx_v_p = __Pyx_PyInt_AsInt(__pyx_arg_p); if (unlikely((__pyx_v_p == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_pyOpenMS.PyInstrumentSettings.setPolarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":267
 * 
 *     def setPolarity(self, int p):
 *         self.inst.setPolarity(<Polarity>p)             # <<<<<<<<<<<<<<
 *         return self.inst.getPolarity()
 * 
 */
  ((struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *)__pyx_v_self)->inst->setPolarity(((enum OpenMS::IonSource::Polarity)__pyx_v_p));

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":268
 *     def setPolarity(self, int p):
 *         self.inst.setPolarity(<Polarity>p)
 *         return self.inst.getPolarity()             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *)__pyx_v_self)->inst->getPolarity()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_pyOpenMS.PyInstrumentSettings.setPolarity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9_pyOpenMS_PyMSSpectrum __pyx_vtable_9_pyOpenMS_PyMSSpectrum;

static PyObject *__pyx_tp_new_9_pyOpenMS_PyMSSpectrum(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_PyMSSpectrum;
  if (__pyx_pf_9_pyOpenMS_12PyMSSpectrum___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyMSSpectrum(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_12PyMSSpectrum_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_9_pyOpenMS_PyMSSpectrum(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyMSSpectrum[] = {
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMSSpectrum_2size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMSSpectrum_3getRT, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setRT"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMSSpectrum_4setRT, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMSLevel"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMSSpectrum_5setMSLevel, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMSLevel"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMSSpectrum_6getMSLevel, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMSSpectrum_7getName, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getInstrumentSettings"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMSSpectrum_9getInstrumentSettings, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getPrecursors"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMSSpectrum_10getPrecursors, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyMSSpectrum = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyMSSpectrum = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9_pyOpenMS_PyMSSpectrum, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyMSSpectrum = {
  0, /*mp_length*/
  __pyx_pf_9_pyOpenMS_12PyMSSpectrum_8__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyMSSpectrum = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyMSSpectrum = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyMSSpectrum"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyMSSpectrum), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyMSSpectrum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyMSSpectrum, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyMSSpectrum, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyMSSpectrum, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyMSSpectrum, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyMSSpectrum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyMSSpectrum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9_pyOpenMS_PyMSExperiment(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_9_pyOpenMS_14PyMSExperiment___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyMSExperiment(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_14PyMSExperiment_2__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_9_pyOpenMS_PyMSExperiment(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyMSExperiment[] = {
  {__Pyx_NAMESTR("getMinMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_14PyMSExperiment_3getMinMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("sortSpectra"), (PyCFunction)__pyx_pf_9_pyOpenMS_14PyMSExperiment_4sortSpectra, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("size"), (PyCFunction)__pyx_pf_9_pyOpenMS_14PyMSExperiment_6size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyMSExperiment = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyMSExperiment = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9_pyOpenMS_PyMSExperiment, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyMSExperiment = {
  0, /*mp_length*/
  __pyx_pf_9_pyOpenMS_14PyMSExperiment_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyMSExperiment = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyMSExperiment = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyMSExperiment"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyMSExperiment), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyMSExperiment, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyMSExperiment, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyMSExperiment, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyMSExperiment, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyMSExperiment, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyMSExperiment, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyMSExperiment, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9_pyOpenMS_PyMzXMLFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_9_pyOpenMS_11PyMzXMLFile___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyMzXMLFile(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyMzXMLFile[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_11PyMzXMLFile_1load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_11PyMzXMLFile_2store, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyMzXMLFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyMzXMLFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyMzXMLFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyMzXMLFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyMzXMLFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyMzXMLFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyMzXMLFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyMzXMLFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyMzXMLFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyMzXMLFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyMzXMLFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyMzXMLFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyMzXMLFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyMzXMLFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9_pyOpenMS_PyMzMLFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_9_pyOpenMS_10PyMzMLFile___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyMzMLFile(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyMzMLFile[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_10PyMzMLFile_1load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_10PyMzMLFile_2store, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyMzMLFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyMzMLFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyMzMLFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyMzMLFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyMzMLFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyMzMLFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyMzMLFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyMzMLFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyMzMLFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyMzMLFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyMzMLFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyMzMLFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyMzMLFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyMzMLFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9_pyOpenMS_PyMzDataFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_9_pyOpenMS_12PyMzDataFile___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyMzDataFile(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyMzDataFile[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMzDataFile_1load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("store"), (PyCFunction)__pyx_pf_9_pyOpenMS_12PyMzDataFile_2store, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyMzDataFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyMzDataFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyMzDataFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyMzDataFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyMzDataFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyMzDataFile"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyMzDataFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyMzDataFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyMzDataFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyMzDataFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyMzDataFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyMzDataFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyMzDataFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyMzDataFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9_pyOpenMS_PyChromatogramTools(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_9_pyOpenMS_19PyChromatogramTools___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyChromatogramTools(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyChromatogramTools[] = {
  {__Pyx_NAMESTR("convertChromatogramsToSpectra"), (PyCFunction)__pyx_pf_9_pyOpenMS_19PyChromatogramTools_1convertChromatogramsToSpectra, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("convertSpectraToChromatograms"), (PyCFunction)__pyx_pf_9_pyOpenMS_19PyChromatogramTools_2convertSpectraToChromatograms, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyChromatogramTools = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyChromatogramTools = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyChromatogramTools = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyChromatogramTools = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyChromatogramTools = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyChromatogramTools"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyChromatogramTools), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyChromatogramTools, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyChromatogramTools, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyChromatogramTools, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyChromatogramTools, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyChromatogramTools, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyChromatogramTools, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyChromatogramTools, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_9_pyOpenMS_PyPolarity(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_9_pyOpenMS_10PyPolarity___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyPolarity(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyPolarity[] = {
  {__Pyx_NAMESTR("toString"), (PyCFunction)__pyx_pf_9_pyOpenMS_10PyPolarity_1toString, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("toInt"), (PyCFunction)__pyx_pf_9_pyOpenMS_10PyPolarity_2toInt, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyPolarity = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyPolarity = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyPolarity = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyPolarity = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyPolarity = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyPolarity"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyPolarity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyPolarity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyPolarity, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyPolarity, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyPolarity, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyPolarity, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyPolarity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyPolarity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_PyPrecursor __pyx_vtable_9_pyOpenMS_PyPrecursor;

static PyObject *__pyx_tp_new_9_pyOpenMS_PyPrecursor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_PyPrecursor *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_PyPrecursor *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_PyPrecursor;
  if (__pyx_pf_9_pyOpenMS_11PyPrecursor___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyPrecursor(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_11PyPrecursor_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyPrecursor[] = {
  {__Pyx_NAMESTR("getMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_11PyPrecursor_2getMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_11PyPrecursor_3getIntensity, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_11PyPrecursor_4setMZ, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_11PyPrecursor_5setIntensity, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyPrecursor = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyPrecursor = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyPrecursor = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyPrecursor = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyPrecursor = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyPrecursor"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyPrecursor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyPrecursor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyPrecursor, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyPrecursor, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyPrecursor, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyPrecursor, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyPrecursor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyPrecursor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_PyPeak1D __pyx_vtable_9_pyOpenMS_PyPeak1D;

static PyObject *__pyx_tp_new_9_pyOpenMS_PyPeak1D(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_PyPeak1D *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_PyPeak1D *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_PyPeak1D;
  if (__pyx_pf_9_pyOpenMS_8PyPeak1D___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyPeak1D(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_8PyPeak1D_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyPeak1D[] = {
  {__Pyx_NAMESTR("getMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_8PyPeak1D_2getMZ, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_8PyPeak1D_3getIntensity, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setMZ"), (PyCFunction)__pyx_pf_9_pyOpenMS_8PyPeak1D_4setMZ, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setIntensity"), (PyCFunction)__pyx_pf_9_pyOpenMS_8PyPeak1D_5setIntensity, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyPeak1D = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyPeak1D = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyPeak1D = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyPeak1D = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyPeak1D = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyPeak1D"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyPeak1D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyPeak1D, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyPeak1D, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyPeak1D, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyPeak1D, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyPeak1D, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyPeak1D, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyPeak1D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_9_pyOpenMS_PyInstrumentSettings __pyx_vtable_9_pyOpenMS_PyInstrumentSettings;

static PyObject *__pyx_tp_new_9_pyOpenMS_PyInstrumentSettings(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *)o);
  p->__pyx_vtab = __pyx_vtabptr_9_pyOpenMS_PyInstrumentSettings;
  if (__pyx_pf_9_pyOpenMS_20PyInstrumentSettings___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9_pyOpenMS_PyInstrumentSettings(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_9_pyOpenMS_20PyInstrumentSettings_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9_pyOpenMS_PyInstrumentSettings[] = {
  {__Pyx_NAMESTR("getPolarity"), (PyCFunction)__pyx_pf_9_pyOpenMS_20PyInstrumentSettings_2getPolarity, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setPolarity"), (PyCFunction)__pyx_pf_9_pyOpenMS_20PyInstrumentSettings_3setPolarity, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyInstrumentSettings = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyInstrumentSettings = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyInstrumentSettings = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyInstrumentSettings = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_9_pyOpenMS_PyInstrumentSettings = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_pyOpenMS.PyInstrumentSettings"), /*tp_name*/
  sizeof(struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9_pyOpenMS_PyInstrumentSettings, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyInstrumentSettings, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyInstrumentSettings, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyInstrumentSettings, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyInstrumentSettings, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9_pyOpenMS_PyInstrumentSettings, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9_pyOpenMS_PyInstrumentSettings, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("_pyOpenMS"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__NEGATIVE, __pyx_k__NEGATIVE, sizeof(__pyx_k__NEGATIVE), 0, 0, 1, 1},
  {&__pyx_n_s__POLNULL, __pyx_k__POLNULL, sizeof(__pyx_k__POLNULL), 0, 0, 1, 1},
  {&__pyx_n_s__POSITIVE, __pyx_k__POSITIVE, sizeof(__pyx_k__POSITIVE), 0, 0, 1, 1},
  {&__pyx_n_s__SIZE_OF_POLARITY, __pyx_k__SIZE_OF_POLARITY, sizeof(__pyx_k__SIZE_OF_POLARITY), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__exp, __pyx_k__exp, sizeof(__pyx_k__exp), 0, 0, 1, 1},
  {&__pyx_n_s__experiment, __pyx_k__experiment, sizeof(__pyx_k__experiment), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__pp, __pyx_k__pp, sizeof(__pyx_k__pp), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__remove, __pyx_k__remove, sizeof(__pyx_k__remove), 0, 0, 1, 1},
  {&__pyx_n_s__size, __pyx_k__size, sizeof(__pyx_k__size), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":51
 *         if i<0: i+= self.size()
 *         if i<0:
 *                 raise Exception("invalid index")             # <<<<<<<<<<<<<<
 *         cdef Peak1D a = deref(self.inst)[i]
 *         cdef PyPeak1D  res = PyPeak1D()
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_2));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "c:\Dokumente und Einstellungen\Administrator\Eigene Dateien\pyOpenMS\pyOpenMS\cython_code\all.pyx":100
 *         if i<0: i+= self.size()
 *         if i<0:
 *                 raise Exception("invalid index")             # <<<<<<<<<<<<<<
 * 
 *         cdef MSSpectrum[Peak1D] a= deref(self.inst)[i]
 */
  __pyx_k_tuple_3 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_3));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_pyOpenMS(void); /*proto*/
PyMODINIT_FUNC init_pyOpenMS(void)
#else
PyMODINIT_FUNC PyInit__pyOpenMS(void); /*proto*/
PyMODINIT_FUNC PyInit__pyOpenMS(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__pyOpenMS(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_pyOpenMS"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main__pyOpenMS) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_9_pyOpenMS_PyMSSpectrum = &__pyx_vtable_9_pyOpenMS_PyMSSpectrum;
  __pyx_vtable_9_pyOpenMS_PyMSSpectrum.replaceInstance = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_PyMSSpectrum *, OpenMS::MSSpectrum<OpenMS::Peak1D> *))__pyx_f_9_pyOpenMS_12PyMSSpectrum_replaceInstance;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyMSSpectrum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_PyMSSpectrum.tp_dict, __pyx_vtabptr_9_pyOpenMS_PyMSSpectrum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyMSSpectrum", (PyObject *)&__pyx_type_9_pyOpenMS_PyMSSpectrum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyMSSpectrum = &__pyx_type_9_pyOpenMS_PyMSSpectrum;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyMSExperiment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyMSExperiment", (PyObject *)&__pyx_type_9_pyOpenMS_PyMSExperiment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyMSExperiment = &__pyx_type_9_pyOpenMS_PyMSExperiment;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyMzXMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyMzXMLFile", (PyObject *)&__pyx_type_9_pyOpenMS_PyMzXMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyMzXMLFile = &__pyx_type_9_pyOpenMS_PyMzXMLFile;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyMzMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyMzMLFile", (PyObject *)&__pyx_type_9_pyOpenMS_PyMzMLFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyMzMLFile = &__pyx_type_9_pyOpenMS_PyMzMLFile;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyMzDataFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyMzDataFile", (PyObject *)&__pyx_type_9_pyOpenMS_PyMzDataFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyMzDataFile = &__pyx_type_9_pyOpenMS_PyMzDataFile;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyChromatogramTools) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyChromatogramTools", (PyObject *)&__pyx_type_9_pyOpenMS_PyChromatogramTools) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyChromatogramTools = &__pyx_type_9_pyOpenMS_PyChromatogramTools;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyPolarity) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyPolarity", (PyObject *)&__pyx_type_9_pyOpenMS_PyPolarity) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyPolarity = &__pyx_type_9_pyOpenMS_PyPolarity;
  __pyx_vtabptr_9_pyOpenMS_PyPrecursor = &__pyx_vtable_9_pyOpenMS_PyPrecursor;
  __pyx_vtable_9_pyOpenMS_PyPrecursor.replaceInstance = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_PyPrecursor *, OpenMS::Precursor *))__pyx_f_9_pyOpenMS_11PyPrecursor_replaceInstance;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyPrecursor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_PyPrecursor.tp_dict, __pyx_vtabptr_9_pyOpenMS_PyPrecursor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyPrecursor", (PyObject *)&__pyx_type_9_pyOpenMS_PyPrecursor) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyPrecursor = &__pyx_type_9_pyOpenMS_PyPrecursor;
  __pyx_vtabptr_9_pyOpenMS_PyPeak1D = &__pyx_vtable_9_pyOpenMS_PyPeak1D;
  __pyx_vtable_9_pyOpenMS_PyPeak1D.replaceInstance = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_PyPeak1D *, OpenMS::Peak1D *))__pyx_f_9_pyOpenMS_8PyPeak1D_replaceInstance;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyPeak1D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_PyPeak1D.tp_dict, __pyx_vtabptr_9_pyOpenMS_PyPeak1D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyPeak1D", (PyObject *)&__pyx_type_9_pyOpenMS_PyPeak1D) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyPeak1D = &__pyx_type_9_pyOpenMS_PyPeak1D;
  __pyx_vtabptr_9_pyOpenMS_PyInstrumentSettings = &__pyx_vtable_9_pyOpenMS_PyInstrumentSettings;
  __pyx_vtable_9_pyOpenMS_PyInstrumentSettings.replaceInstance = (PyObject *(*)(struct __pyx_obj_9_pyOpenMS_PyInstrumentSettings *, OpenMS::InstrumentSettings *))__pyx_f_9_pyOpenMS_20PyInstrumentSettings_replaceInstance;
  if (PyType_Ready(&__pyx_type_9_pyOpenMS_PyInstrumentSettings) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_9_pyOpenMS_PyInstrumentSettings.tp_dict, __pyx_vtabptr_9_pyOpenMS_PyInstrumentSettings) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyInstrumentSettings", (PyObject *)&__pyx_type_9_pyOpenMS_PyInstrumentSettings) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9_pyOpenMS_PyInstrumentSettings = &__pyx_type_9_pyOpenMS_PyInstrumentSettings;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "_pyOpenMS.pyx":2
 * 
 * from cython.operator cimport address as addr, dereference as deref             # <<<<<<<<<<<<<<
 * 
 * # somehow the order if inclusion is important,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init _pyOpenMS", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _pyOpenMS");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    /* cause is unused */
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}


static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
